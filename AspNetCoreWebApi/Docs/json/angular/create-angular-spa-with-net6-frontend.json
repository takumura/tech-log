{"title":".NET6とAngular v13でSPAサイトを作る（フロントエンド）","date":"2022-01-07","category":"csharp","tag":["net6","angular v13"],"body":"本サイトは自作のwebサイト生成エンジンで生成されています。自作エンジンは2019年に.NET Core 2.1とAngular v7で開発しました。\r\n\r\nそれから時は流れ、2021年末時点でバックエンド側は.NET6に、フロントエンド側はAngular v13にそれぞれバージョンアップされています。\r\n\r\n進化の波に取り残されないように、最新バージョンのモジュールを使ってwebサイト生成エンジンを再開発してみようと思います。\r\n\r\nこの記事では、フロントエンド編ということでAngularのSPAサイトをを実装していきます。\r\n\r\n## 開発準備\r\n\r\nVSプロジェクト作成時、最新のAngular v13ではエラーが発生したので、一時的にAngular v12を利用していました。本格的にサイト実装を始める前に、まずはv13へバージョンアップします。\r\n\r\nangularのバージョンアップといえば`ng update`を使うべきだと思うのですが、VSが作成したテンプレートが非常に質素で通常のサイトとは異なっていました。変更点を探るため、v13のcliで`ng new`した内容と比較してみます。\r\n\r\n``` powershell\r\n> npm uninstall -g @angular\/cli\r\n> npm install -g @angular\/cli\r\n> ng version\r\nadded 183 packages, and audited 184 packages in 33s\r\n\r\n22 packages are looking for funding\r\n  run `npm fund` for details\r\n\r\nfound 0 vulnerabilities\r\nPS C:\\WINDOWS\\system32> ng version\r\n\r\n     _                      _                 ____ _     ___\r\n    \/ \\   _ __   __ _ _   _| | __ _ _ __     \/ ___| |   |_ _|\r\n   \/ △ \\ | '_ \\ \/ _` | | | | |\/ _` | '__|   | |   | |    | |\r\n  \/ ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\r\n \/_\/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\r\n                |___\/\r\n\r\n\r\nAngular CLI: 13.1.2\r\nNode: 16.13.1\r\nPackage Manager: yarn 1.22.15\r\nOS: win32 x64\r\n\r\nAngular:\r\n...\r\n\r\nPackage                      Version\r\n------------------------------------------------------\r\n@angular-devkit\/architect    0.1301.2 (cli-only)\r\n@angular-devkit\/core         13.1.2 (cli-only)\r\n@angular-devkit\/schematics   13.1.2 (cli-only)\r\n@schematics\/angular          13.1.2 (cli-only)\r\n```\r\n\r\n``` powershell\r\n> ng new net6-markdown-web-engine\r\n? Would you like to add Angular routing? Yes\r\n? Which stylesheet format would you like to use? SCSS   [ https:\/\/sass-lang.com\/documentation\/syntax#scss\r\n ]\r\nCREATE net6-markdown-web-engine\/angular.json (3315 bytes)\r\nCREATE net6-markdown-web-engine\/package.json (1088 bytes)\r\nCREATE net6-markdown-web-engine\/README.md (1067 bytes)\r\nCREATE net6-markdown-web-engine\/tsconfig.json (863 bytes)\r\nCREATE net6-markdown-web-engine\/.editorconfig (274 bytes)\r\nCREATE net6-markdown-web-engine\/.gitignore (620 bytes)\r\nCREATE net6-markdown-web-engine\/.browserslistrc (600 bytes)\r\nCREATE net6-markdown-web-engine\/karma.conf.js (1441 bytes)\r\nCREATE net6-markdown-web-engine\/tsconfig.app.json (287 bytes)\r\nCREATE net6-markdown-web-engine\/tsconfig.spec.json (333 bytes)\r\nCREATE net6-markdown-web-engine\/.vscode\/extensions.json (130 bytes)\r\nCREATE net6-markdown-web-engine\/.vscode\/launch.json (474 bytes)\r\nCREATE net6-markdown-web-engine\/.vscode\/tasks.json (938 bytes)\r\nCREATE net6-markdown-web-engine\/src\/favicon.ico (948 bytes)\r\nCREATE net6-markdown-web-engine\/src\/index.html (307 bytes)\r\nCREATE net6-markdown-web-engine\/src\/main.ts (372 bytes)\r\nCREATE net6-markdown-web-engine\/src\/polyfills.ts (2338 bytes)\r\nCREATE net6-markdown-web-engine\/src\/styles.sass (80 bytes)\r\nCREATE net6-markdown-web-engine\/src\/test.ts (745 bytes)\r\nCREATE net6-markdown-web-engine\/src\/assets\/.gitkeep (0 bytes)\r\nCREATE net6-markdown-web-engine\/src\/environments\/environment.prod.ts (51 bytes)\r\nCREATE net6-markdown-web-engine\/src\/environments\/environment.ts (658 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app-routing.module.ts (245 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app.module.ts (393 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app.component.html (23364 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app.component.spec.ts (1127 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app.component.ts (229 bytes)\r\nCREATE net6-markdown-web-engine\/src\/app\/app.component.sass (0 bytes)\r\n\/ Installing packages (yarn)...\r\n√ Packages installed successfully.\r\n```\r\n\r\n比較したところ、apiのproxy(VSテンプレート独自の変更点)以外の際はほとんどありませんでした。IE11が正式にサポート対象から外れたようで、polifills.ts等からIE11の記述が消えているくらいで、angular.jsonもほぼほぼ同じ。移行はとても簡単そうです。せっかくなので、サーバサイドapiを使うページは名前を変えて残した状態でv12とv13のソースをマージしました。\r\n\r\n## linterのセットアップ\r\n\r\nTSlintからESLintへのマイグレーションは[AngularのRoadmapでCompleted Q4 2020](https:\/\/angular.io\/guide\/roadmap#migrate-to-eslint)となっており、`ng new`したコード中からlintの設定がなくなったようです。\r\n\r\nググったところ[angular-eslint](https:\/\/github.com\/angular-eslint\/angular-eslint)を利用する記事が多く目についたので、今回はこれを試してみます。1コマンドで作業は完了です。\r\n\r\n``` powershell\r\n> ng add @angular-eslint\/schematics\r\nℹ Using package manager: yarn\r\n✔ Found compatible package version: @angular-eslint\/schematics@13.0.1.\r\n✔ Package information loaded.\r\n\r\nThe package @angular-eslint\/schematics@13.0.1 will be installed and executed.\r\nWould you like to proceed? Yes\r\n✔ Package successfully installed.\r\n\r\n    All @angular-eslint dependencies have been successfully installed 🎉\r\n\r\n    Please see https:\/\/github.com\/angular-eslint\/angular-eslint for how to add ESLint configuration to your project.\r\n\r\n\r\n    We detected that you have a single project in your workspace and no existing linter wired up, so we are configuring ESLint for you automatically.\r\n\r\n    Please see https:\/\/github.com\/angular-eslint\/angular-eslint for more information.\r\n\r\nCREATE .eslintrc.json (984 bytes)\r\nUPDATE package.json (1662 bytes)\r\nUPDATE angular.json (3692 bytes)\r\n✔ Packages installed successfully.\r\n```\r\n\r\n## Angular Materialの設定\r\n\r\nデザインシステムにAngular Materialを設定します。当初はFluent UI web componentsを試そうと思ったのですが、Angular Materialを前回利用したときに、やり残していた課題があったので今回再チャレンジします。\r\n\r\n``` powershell\r\n> ng add @angular\/material\r\nℹ Using package manager: yarn\r\n✔ Found compatible package version: @angular\/material@13.1.3.\r\n✔ Package information loaded.\r\n\r\nThe package @angular\/material@13.1.3 will be installed and executed.\r\nWould you like to proceed? Yes\r\n✔ Package successfully installed.\r\n? Choose a prebuilt theme name, or \"custom\" for a custom theme: Indigo\/Pink        [ Preview: https:\/\/material.angular.io?theme=indigo-pink ]\r\n? Set up global Angular Material typography styles? No\r\n? Set up browser animations for Angular Material? Yes\r\nUPDATE package.json (1727 bytes)\r\n✔ Packages installed successfully.\r\nUPDATE src\/app\/app.module.ts (737 bytes)\r\nUPDATE angular.json (3982 bytes)\r\nUPDATE src\/index.html (613 bytes)\r\nUPDATE src\/styles.scss (182 bytes)\r\n```\r\n\r\n## nav componentの追加\r\n\r\n以前のバージョンで利用していたNav Componentをほぼそのまま移行することができました。\r\n\r\n以前のバージョンではAngular.ioの実装から、レイアウトのbreakpoint設定を拝借していたのですが、`handset`を利用していると画面のwidthを変えたときに変なところでサイドバーが出るので、この実装を変更することにしました。\r\n\r\n[AngularMaterialのレイアウト設定](https:\/\/material.angular.io\/cdk\/layout\/overview#predefined-breakpoints)によると、handsetのルールは`(max-width: 599.98px) and (orientation: portrait), (max-width: 959.98px) and (orientation: landscape)`でした。orientationの関係でmax-widthが600-960の間でもisHandSetがtrueになる瞬間があるのだと思います。\r\n\r\n`XSmall`と`Small`のときはサイドバーを表示しないように変更したらイイ感じになりました。\r\n\r\n``` ts\r\nisSmall$: Observable<boolean> = this.breakpointObserver\r\n    .observe([Breakpoints.XSmall, Breakpoints.Small])\r\n    .pipe(map((result) => result.matches));\r\n```\r\n\r\n## loading bar componentの追加\r\n\r\nこちらも以前のバージョンで実装したcomponentをほぼそのまま移行できました。勉強不足でasync pipeを使わずにstateをローカル変数に持ち直して表示\/非表示の制御をしていた部分を、シンプルに書き直す修正だけ行いました。\r\n\r\n## NGRXの導入\r\n\r\nmarkdownからコンバートしたjsonファイルを`ngrx store`に読み込んだら、どのcomponetからでも好きに呼び出せてイイ感じにならないかな？という発想から、今回はNGRXを利用してみることにします。\r\n\r\n``` powershell\r\n> ng add @ngrx\/store@latest\r\nℹ Using package manager: yarn\r\n✔ Package information loaded.\r\n\r\nThe package @ngrx\/store@latest will be installed and executed.\r\nWould you like to proceed? Yes\r\n✔ Package successfully installed.\r\n\r\n    The NgRx ESLint Plugin is installed and configured with the recommended config.\r\n\r\n    If you want to change the configuration, please see https:\/\/github.com\/timdeschryver\/eslint-plugin-ngrx\/#eslint-plugin-ngrx.\r\n\r\nUPDATE src\/app\/app.module.ts (1090 bytes)\r\nUPDATE package.json (1793 bytes)\r\nUPDATE .eslintrc.json (1098 bytes)\r\n✔ Packages installed successfully.\r\n✔ Packages installed successfully.\r\n``\r\n\r\n公式のガイドに[ESLint NgRx Plugin](https:\/\/ngrx.io\/guide\/eslint-plugin)が載っていたので導入してみます。\r\n``` powershell\r\n> ng add eslint-plugin-ngrx\r\nSkipping installation: Package already installed\r\n? Which config would you like to use? recommended (all the recommended rules configured with the recommended severity) [https:\/\/github.com\/timdeschryver\/eslint-plugin-ngrx\/blob\/main\/src\/configs\/recommended.ts]\r\n\r\n      The NgRx ESLint Plugin is installed and configured with the 'recommended' config.\r\n\r\n      If you want to change the configuration, please see https:\/\/github.com\/timdeschryver\/eslint-plugin-ngrx\/#eslint-plugin-ngrx.\r\n\r\nUPDATE .eslintrc.json (1098 bytes)\r\n```\r\n\r\n## markdownのhtml変換処理\r\n\r\n以前からmarkdown⇒htmlへの変換処理はクライアント(angular)側で行っていました。\r\n\r\n- バックエンド側でfrontmatter付きmarkdownをmarkdown記法のままjsonに変換\r\n    - 変換元mdファイルと1対1対応するjsonファイル\r\n    - すべてのjsonファイルをまとめたindex.json\r\n- 検索画面ではindex.jsonを利用してサーチを実施\r\n- 個々のドキュメントページはurlから対象のjsonファイルを取得\r\n- clientはmarkdown部分をjsonから抜き出して、[unified(remark, rehype)](https:\/\/unifiedjs.com\/)を利用してhtmlに変換\r\n\r\n### jsonファイル読み込み処理の変更点\r\n\r\n前半のjsonファイルの読み込み部分について、index.jsonを直接importする記述に変更しました\r\n\r\n- ngrxのactionでindex.jsonを読み込み、個々のドキュメントも探すようにしたので個々のドキュメントファイルをfetchする必要がなくなった\r\n- debug実行時、index.jsonに変更が発生すると自動でreloadが掛かるので、markdownの更新が画面に自動反映されるようになった。（嬉しい副産物）\r\n\r\n### unifiedのプラグインチェック\r\n\r\n後半のunifiedによる変換処理について、remarkのmarkdownパーサーエンジンが[micromark](https:\/\/github.com\/micromark\/micromark)に置き換わるという大きな変更が起きていたようです。その影響で、以前使っていたプラグインが使えなくなるといった影響が出ていました。この機会に使用するプラグインの厳選を行いました。\r\n\r\n- remark-parse\r\n    - 標準plugin。markdownをmdast(syntax tree)に変換\r\n- [remark-attr](https:\/\/github.com\/arobase-che\/remark-attr)\r\n    - markdownに記述したattributeを変換後のhtmlに付与。cssクラスをセットする等の用途で使用していたが、micromarkの移行により利用不可になった。\r\n    - https:\/\/github.com\/arobase-che\/remark-attr\/issues\/22\r\n- remark-rehype\r\n    - 標準plugin。mdastをhastに変換\r\n- rehype-raw\r\n    - 標準plugin: markdown内のhtmlタグをsyntax treeのnodeに含める\r\n- rehype-slug\r\n    - 標準plugin。Hタグにidを付与\r\n- rehype-autolink-headings\r\n    - 標準plugin。Hタグへのlinkを作成\r\n- rehype-External-Links\r\n    - 今回新たに採用。標準plugin。外部サイトへのリンクを制御。target=\"_blank\"を付与するのに使用\r\n- rehype-attrs\r\n    - remarkAttrの代わりに採用。markdownに記述したattributeを変換後のhtmlに付与。cssクラスをセットする等の用途で使用\r\n- rehype-highlight\r\n    - \r\n\r\n``` ts\r\nconst processor = unified()\r\n      .use(remarkParse)\r\n      \/\/ .use(remarkAttr)\r\n      .use(remarkRehype, {allowDangerousHtml: true})\r\n      .use(rehypeRaw)\r\n      .use(rehypeSlug)\r\n      .use(rehypeAutolinkHeadings)\r\n      .use(rehypeExternalLinks, {target: '_blank', rel: ['noopener']})\r\n      .use(rehypeAttrs, { properties: 'attr' }) \/\/ \r\n      \/\/ .use(highlight)\r\n      .use(rehypeStringify); \/\/ 標準plugin: hastをhtmlに変換\r\n    const html = String(processor.processSync(document.content.body));\r\n```\r\n\r\n## 後で調べる\r\n\r\n- prettierの[bracket line](https:\/\/prettier.io\/docs\/en\/options.html#bracket-line)をtrueにする\r\n- loading barのshow\/hideにアニメーションを付ける\r\n\r\n## 関連項目\r\n\r\n- [How to upgrade Angular CLI to the latest version](https:\/\/stackoverflow.com\/questions\/43931986\/how-to-upgrade-angular-cli-to-the-latest-version)\r\n- [angular-eslint](https:\/\/github.com\/angular-eslint\/angular-eslint)\r\n- [Tasks in Visual Studio Code - Compound tasks](https:\/\/code.visualstudio.com\/docs\/editor\/tasks#_compound-tasks)\r\n- [Getting Started with Angular Material](https:\/\/material.angular.io\/guide\/getting-started)\r\n- [Remark plugins list](https:\/\/github.com\/remarkjs\/remark\/blob\/main\/doc\/plugins.md)\r\n- [Rehype plugins list](https:\/\/github.com\/rehypejs\/rehype\/blob\/main\/doc\/plugins.md)"}