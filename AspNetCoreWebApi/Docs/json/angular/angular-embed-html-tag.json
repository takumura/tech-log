{"title":"Angularで動的にHTMLタグをコンポーネントに埋め込む","date":"2019-11-14","category":"Angular","tag":["html","embed"],"body":"\r\n\r\nAngularでは、データバインドを利用したテキストの埋め込み時にセキュリティ上の考慮がなされています。具体的には、scriptやhtmlは自動的にエスケープ処理され、原則的にはhtmlタグを埋め込めないようになっています。\r\n\r\nAngularで、markdownから生成したhtmlをタグとして画面に挿入する方法を調査しました。\r\n\r\n## 注意点\r\n\r\n開発者は、**有害なhtmlデータ**がこれらの処理を通してユーザに送信されないよう、十分に考慮する必要があります。\r\n\r\n## SafeHtml型のhtmlデータを[innerHTML]にバインドする\r\n\r\n実装例を以下に示します。\r\n\r\n**MarkdownService**\r\n\r\n```ts\r\nexport class MarkdownService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private sanitizer: DomSanitizer,\r\n    @Inject(\"BASE_URL\") private baseUrl: string,\r\n  ) {}\r\n\r\n  getDocument(path: string): Observable<DocumentInfo> {\r\n    let docInfo: DocumentInfo;\r\n    const processor = unified()\r\n      .use(markdown, { commonmark: true })\r\n      .use(remarkAttr)\r\n      .use(remarkRehype, { allowDangerousHTML: true })\r\n      .use(raw)\r\n      .use(slug)\r\n      .use(autoLinkHeadings)\r\n      .use(highlight)\r\n      .use(html);\r\n\r\n    return this.http.get<DocumentInfo>(this.baseUrl + path).pipe(\r\n      map(result => {\r\n        \/\/ this.baseUrl + pathにアクセスすると、docInfo型のデータがjsonで取得できる。それをそのまま代入。\r\n        docInfo = result;\r\n\r\n        \/\/ set default toc\r\n        if (!docInfo.toc) {\r\n          docInfo.toc = \"h2,h3\";\r\n        }\r\n\r\n        \/\/ docInfo.bodyはmarkdown形式のデータ。processor.processSync処理でhtmlに変換される\r\n        docInfo.bodyHtml = processor.processSync(docInfo.body).contents;\r\n\r\n        \/\/ bypassSecurityTrustHtmlはhtmlデータをSafeHTMLという特別な型に変換する\r\n        docInfo.safeBody = this.sanitizer.bypassSecurityTrustHtml(docInfo.bodyHtml);\r\n        return docInfo;\r\n      }),\r\n    );\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n**document.component.html(抜粋)**\r\n\r\n```html\r\n<div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.bodyHtml\" appRouteTransformer>\r\n```\r\n\r\nまたは\r\n\r\n```html\r\n<div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.safeBody\" appRouteTransformer>\r\n```\r\n\r\n通常のhtmlデータ(docInfo.bodyHtml)をinnerHTMLにバインドした場合、idやスタイルなどの属性は自動的に取り除かれてしまいます。またブラウザのコンソール上に**安全でないhtmlデータがバインドされた**という警告が表示されます。\r\n\r\nDomSanitizer.bypassSecurityTrustHtmlを利用すると、htmlデータはSafeHTML型に変換され、Angularはこのデータを無害なhtmlデータとして取り扱います。つまりすべてそのままの状態でバインドされます。\r\n\r\n## ElementRef.nativeElementにバインドする\r\n\r\n実装例を以下に示します。\r\n\r\n**document.component.html(抜粋)**\r\n\r\n```html\r\n<div fxLayout=\"column\" class=\"doc-container\" [@openClose]=\"isOpen ? 'open' : 'closed'\">\r\n  <!-- <p *ngIf=\"!docInfo\">loading...<\/p> -->\r\n  <ng-container *ngIf=\"docInfo && docInfo?.toc === 'none'\">\r\n    ...\r\n  <\/ng-container>\r\n  <ng-container *ngIf=\"docInfo && docInfo?.toc !== 'none'\">\r\n    <div fxLayout=\"row\">\r\n      <div fxFlex=\"1 1 85%\" fxFlex.lt-md=\"1 1 100%\">\r\n        <div fxLayout=\"column\">\r\n          ...\r\n          <!-- <div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.safeBody\" appRouteTransformer><\/div> -->\r\n          <div #mdContent fxFlex class=\"doc-body\" appRouteTransformer><\/div>\r\n        <\/div>\r\n      <\/div>\r\n      <div fxFlex=\"1 1 15%\" fxHide.lt-md>\r\n        <app-document-toc [tocList]=\"tocList\" appRouteTransformer><\/app-document-toc>\r\n      <\/div>\r\n    <\/div>\r\n  <\/ng-container>\r\n<\/div>\r\n```\r\n\r\n**document.component.ts**\r\n\r\n```ts\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular\/core';\r\n\r\n@Component({\r\n  selector: \"app-document\",\r\n  templateUrl: \".\/document.component.html\",\r\n  styleUrls: [\".\/document.component.scss\", \".\/vs2015.css\"],\r\n  animations: [defaultRouteAnimation],\r\n})\r\nexport class DocumentComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  docInfo: DocumentInfo | null;\r\n  isOpen: boolean = true;\r\n  tocList: TocItem[] | null;\r\n\r\n  \/\/ template html中の<div #mdContent>を参照するオブジェクトを定義\r\n  @ViewChild(\"mdContent\")\r\n  mdRef: ElementRef<HTMLElement>;\r\n\r\n  private fragment: string;\r\n  private previousPath: string;\r\n  private onDestroy = new Subject();\r\n  private routeChangeSubject = new Subject();\r\n\r\n  constructor(\r\n    private markdownService: MarkdownService,\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private loadingBarService: LoadingBarService,\r\n    private changeDetector: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    ...\r\n    this.route.url.pipe(takeUntil(this.onDestroy)).subscribe(params => {\r\n      const docRef = params.map(x => x.path).join(\"\/\");\r\n      if (docRef !== this.previousPath) {\r\n        this.docInfo = null;\r\n        this.isOpen = false;\r\n        this.getMarkdownDocInfo(docRef);\r\n      } else {\r\n        this.loadingBarService.hide();\r\n      }\r\n      this.previousPath = docRef;\r\n    });\r\n  }\r\n  ...\r\n  private getMarkdownDocInfo(docRef: string) {\r\n    const path = this.location.normalize(\"assets\/json\/\" + docRef + \".json\");\r\n\r\n    this.markdownService\r\n      .getDocument(path)\r\n      .pipe(takeUntil(this.onDestroy))\r\n      .subscribe(\r\n        doc => {\r\n          this.docInfo = doc;\r\n\r\n          \/\/ 初期画面は<ng-container *ngIf=\"docInfo>の条件設定により\r\n          \/\/ #mdContentを持つelementがまだ画面にない。\r\n          \/\/\r\n          \/\/ this.docInfoをセットした後に、ChangeDetectorRef.detectChanges()することで\r\n          \/\/ 仮想DOMの内容が更新され、<ng-container *ngIf=\"docInfo>内のelementに\r\n          \/\/ アクセスすることができるようになる。\r\n          this.changeDetector.detectChanges();\r\n\r\n          \/\/ mdRef(#mdContentを持つdiv)のnativeElementにアクセスすることで\r\n          \/\/ JQueryやjavascriptで過去に行っていたような、htmlタグの操作が可能になる。\r\n          this.mdRef.nativeElement.innerHTML = doc.bodyHtml;\r\n        },\r\n        err => console.error(\"MarkdownService\", err),\r\n      );\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n`nativeElement`に対する処理はjavascriptで直接実施されるので、safeHTML型にする必要はなく、サニタイズを考慮せずにhtmlをそのままバインドできます（出来てしまいます）。\r\n\r\n## 関連項目\r\n\r\n- [セキュリティ - angular.jp](https:\/\/angular.jp\/guide\/security#bypass-security-apis)\r\n- [ElementRef - angular.jp](https:\/\/angular.jp\/api\/core\/ElementRef)\r\n- [\\[Angular\\]変数のバインドで、htmlタグを埋め込む](https:\/\/akamist.com\/blog\/archives\/2223)\r\n- [AngularでビューにHTML文書を「バインド」するには？（Property Binding）](https:\/\/www.atmarkit.co.jp\/ait\/articles\/1702\/13\/news127.html)\r\n"}