{"title":"NuxtJS + Typescriptで正しく型推論させる","date":"2021-01-24","category":"Vue","tag":["vue","nuxtjs","storybook","vuex","typed vuex"],"body":"\r\n\r\nNuxtJSを使っていて「Typescriptなのに型推論が効いてなくてイマイチだなぁ」と思っていたのですが、設定が悪いだけでした。\r\n\r\n## コンポーネント\r\n\r\n実装を急ぐあまり、基本を理解していませんでした。そもそも`.vue`はjavasriptでしか書けないのかと思っていたのですが、ちゃんと[公式サイトに説明](https:\/\/typescript.nuxtjs.org\/ja\/cookbook\/components)がありました。\r\n\r\n``` ts\r\n<script lang=\"ts\">\r\n  \/** TypeScript はここに記述します **\/\r\n<\/script>\r\n```\r\n\r\nscriptのlangを設定していたり、していないものがあったのでtypescriptに統一しました。\r\n\r\n### Options API\r\n\r\nその後、ビルドは通りstorybookではエラーなく動いていたのですが`yarn dev`でNuxtJSのアプリを動かすと大量にエラーが出ることに気が付きました。\r\n\r\n``` ts\r\nTS2339: Property 'duration' does not exist on type '{ minutes(): number; seconds(): number; }'\r\n```\r\n\r\n設定不十分な状態でtypescriptにした結果、型がうまく見つからずにエラーが表示されるようになった模様。これについてもちゃんと[公式サイトを読んで](https:\/\/typescript.nuxtjs.org\/ja\/cookbook\/components#options-api)いれば何ということはない話でした。\r\n\r\n``` ts\r\nimport Vue, { PropOptions } from 'vue'\r\n\r\ninterface User {\r\n  firstName: string\r\n  lastName: string\r\n}\r\n\r\nexport default Vue.extend({\r\n  name: 'YourComponent',\r\n\r\n  props: {\r\n    user: {\r\n      type: Object,\r\n      required: true\r\n    } as PropOptions<User>\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      message: 'This is a message'\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fullName (): string {\r\n      return `${this.user.firstName} ${this.user.lastName}`\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n対応方法はいくつかあるようですが、既存の書き方のまま`Vue.extened{()}`で囲むだけでよいOptions API方式を採用するのがお手軽で良さそうに感じました。\r\n\r\n## Vuex with Typed Vuex\r\n\r\nVuex store自体はtypescriptで書けるのですが、component等から利用するときにAction、getter、mutationの型推論やインテリセンスが効きません。書き味は悪いけどそういうものかと思っていたのですが、改善策があるようなのでトライしてみます。\r\n\r\nTyped VuexのNuxt用モジュールを[公式サイトの手順](https:\/\/typed-vuex.roe.dev\/getting-started-nuxt)に従い導入しました。\r\n\r\n``` powershell\r\n> yarn add --dev nuxt-typed-vuex\r\n```\r\n\r\n``` ts\r\n\/\/ nuxt.config.js 抜粋\r\n  \/*\r\n  ** Nuxt.js dev-modules\r\n  *\/\r\n  buildModules: [\r\n    '@nuxt\/typescript-build',\r\n    '@nuxtjs\/vuetify',\r\n    'nuxt-typed-vuex',\r\n  ],\r\n```\r\n\r\nそしてstoreへのアクセスに利用する`$accessor`の型定義ファイルを追加します。\r\n\r\n``` ts\r\n\/\/ ~\/types\/index.d.ts\r\nimport { accessorType } from '~\/store'\r\n\r\ndeclare module 'vue\/types\/vue' {\r\n  interface Vue {\r\n    $accessor: typeof accessorType\r\n  }\r\n}\r\n\r\ndeclare module '@nuxt\/types' {\r\n  interface NuxtAppOptions {\r\n    $accessor: typeof accessorType\r\n  }\r\n}\r\n```\r\n\r\nその後は[実装サンプル](https:\/\/github.com\/danielroe\/typed-vuex\/blob\/main\/examples\/nuxt\/store\/index.ts)や[参考記事](https:\/\/qiita.com\/shindex\/items\/a90217b9e4c03c5b5215#vuex-%E3%81%AE-typescript-%E5%8C%96)などを見ながらstoreスクリプトをTyped Vuex仕様にしていきます。\r\n\r\nstore側が完了してしまえば、呼び出しているcomponent側の更新は非常に簡単です。getter\/mutation\/actionへのアクセスはthis.$accessorがイイ感じに行ってくれます。例えば`dispatch('アクション名')`としていた部分は`this.$accessor.{submodules}.アクション名()`とリテラルではなく直接呼出しになり、インテリセンスも効いています。素晴らしい！\r\n\r\n### Storybook with Typed Vuex\r\n\r\nこれでめでたしめでたし！と思いきや、StorybookでTyped Vuexの`$accessor`にアクセスしている部分の処理がエラーを出すようになってしまいました。StorybookはNuxtJSとは異なるプロジェクトとして起動するので、`nuxt-typed-vuex`によるaccessor自動インポートが効いていないからだと推測しました。\r\n\r\n> Nuxt Typed Vuex is made up of two packages:\r\n>\r\n> 1. typed-vuex - a typed store accessor with helper functions, with no Nuxt dependencies\r\n> 1. nuxt-typed-vuex - a Nuxt module that auto-injects this accessor throughout your project\r\n\r\n[Vue版のTyped Vuex setup](https:\/\/typed-vuex.roe.dev\/getting-started-vue#setup)と[StackOverflowのこの回答](https:\/\/stackoverflow.com\/a\/62610041)を参考に`preview.js`を更新したところ、Storybookでも`$accessor`を利用できるようになりました。\r\n\r\n``` diff\r\n\/\/ .storybook\/preview.js\r\nimport { addDecorator } from '@storybook\/vue'\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n+import { useAccessor } from 'typed-vuex'\r\n\r\nimport Vuetify from 'vuetify'\r\nimport { VApp, VContent } from 'vuetify\/lib'\r\nimport colors from 'vuetify\/es5\/util\/colors'\r\nimport 'vuetify\/dist\/vuetify.min.css'\r\n+import * as rootStore from '~\/store\/index'\r\n+import * as todos from '~\/store\/todos'\r\n+import * as tasks from '~\/store\/tasks'\r\n\r\n+\/\/ setup Vuex with Typed Vuex\r\nVue.use(Vuex)\r\n+export const storePattern = {\r\n+  state: rootStore.state,\r\n+  getters: rootStore.getters,\r\n+  actions: rootStore.actions,\r\n+  mutations: rootStore.mutations,\r\n+  modules: {\r\n+    todos: {\r\n+      namespaced: true,\r\n+      state: {\r\n+        list: [\r\n+          { name: 'task1', done: false, running: false },\r\n+          { name: 'task2', done: false, running: false },\r\n+          { name: 'task3', done: false, running: true },\r\n+          { name: 'task4', done: false, running: false },\r\n+          { name: 'task5', done: false, running: false },\r\n+        ],\r\n+      },\r\n+      getters: todos.getters,\r\n+      actions: todos.actions,\r\n+      mutations: todos.mutations,\r\n+    },\r\n+    tasks,\r\n+  },\r\n+}\r\n+const store = new Vuex.Store(storePattern)\r\n+export const accessor = useAccessor(store, storePattern)\r\n+Vue.prototype.$accessor = accessor\r\n+\r\n+export default store\r\n+\r\n+\/\/ Setup vuetify\r\nconst vuetifyOptions = {}\r\n\r\nVue.use(Vuetify, {\r\n  iconfont: 'mdi',\r\n  customVariables: ['~\/assets\/variables.scss'],\r\n  theme: {\r\n    dark: true,\r\n    themes: {\r\n      light: {\r\n        primary: colors.purple,\r\n        secondary: colors.grey.darken1,\r\n        accent: colors.shades.black,\r\n        error: colors.red.accent3,\r\n      },\r\n      dark: {\r\n        primary: colors.blue.darken2,\r\n        accent: colors.grey.darken3,\r\n        secondary: colors.amber.darken3,\r\n        info: colors.teal.lighten1,\r\n        warning: colors.amber.base,\r\n        error: colors.deepOrange.accent4,\r\n        success: colors.green.accent3,\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\naddDecorator(() => ({\r\n  vuetify: new Vuetify(vuetifyOptions),\r\n  components: { VApp, VContent },\r\n  template: `<v-app><v-main><story\/><\/v-main><\/v-app>`,\r\n}))\r\n\r\nexport const parameters = {\r\n  actions: { argTypesRegex: '^on[A-Z].*' },\r\n}\r\n```\r\n\r\nstory側ではstoreのモックを作成する代わりに、`preview.js`でexportしたstoreをそのまま利用できることに気が付きました。とっても便利！！\r\n\r\n``` diff\r\n-import Vuex from 'vuex'\r\n+import store from '@\/.storybook\/preview'\r\nimport TodoList from '~\/components\/TodoList'\r\n\r\n-const store = new Vuex.Store({\r\n-  modules: {\r\n-    todos: {\r\n-      namespaced: true,\r\n-      state: {\r\n-        list: [\r\n-          { name: 'task1', done: false },\r\n-          { name: 'task2', done: true },\r\n-          { name: 'task3', done: true },\r\n-          { name: 'task4', done: true },\r\n-        ],\r\n-      },\r\n-      getters: {\r\n-        getTodoList: (state) => {\r\n-          return state.list\r\n-        },\r\n-      },\r\n-    },\r\n-  },\r\n-})\r\n\r\nconst Template = (args, { argTypes }) => ({\r\n  props: Object.keys(argTypes),\r\n  components: { TodoList },\r\n  template: '<todo-list \/>',\r\n  store,\r\n})\r\n\r\nexport const todoList = Template.bind({})\r\n```\r\n\r\n## 所感\r\n\r\n色々な試行錯誤を通してVue\/Nuxtに関する理解が深まってきたように感じます。\r\n\r\n## 関連項目\r\n\r\n- [Qiita - NuxtJS + Vuexでいい感じのTypescript環境をあまり頑張らないで構築する](https:\/\/qiita.com\/shindex\/items\/a90217b9e4c03c5b5215)\r\n- [Nuxt Typescript](https:\/\/typescript.nuxtjs.org\/ja\/)\r\n- [Typed Vuex](https:\/\/typed-vuex.roe.dev\/)\r\n- [stack overflow - How can I make Vuex store work with Storybook?](https:\/\/stackoverflow.com\/questions\/56682493\/how-can-i-make-vuex-store-work-with-storybook)\r\n"}