{"title":".NET6とAngular v13でSPAサイトを作る（バックエンド）","date":"2022-01-06","category":"csharp","tag":["net6","angular v13"],"body":"\r\n\r\n本サイトは自作のwebサイト生成エンジンで生成されています。自作エンジンは2019年に.NET Core 2.1とAngular v7で開発しました。\r\n\r\nそれから時は流れ、2021年末時点でバックエンド側は.NET6に、フロントエンド側はAngular v13にそれぞれバージョンアップされています。\r\n\r\n進化の波に取り残されないように、最新バージョンのモジュールを使ってwebサイト生成エンジンを再開発してみようと思います。\r\n\r\nこの記事では、バックエンド編ということで.NET6のASP.NET Core SPAプロジェクト側のBackground Serviceと、Markdownを記事ファイルをJsonへ変換する機構を実装していきます。\r\n\r\n## Backend Service\r\n\r\n旧webサイト生成エンジンでは、[この記事](https://docs.microsoft.com/en-gb/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice)を参考に、MarkdownファイルをJsonに変換するBackgroundServiceをASP.NET Coreのプロセスに登録していました。\r\n\r\n[この記事](https://docs.microsoft.com/en-us/aspnet/core/migration/50-to-60-samples?view=aspnetcore-6.0#add-services)を見るに、ASP.NET Core アプリの新しい .NET 6 最小ホスティング モデル(minimal hosting model)でも、登録方法の書き方が変わっただけで同じようにBackground Serviceを登録できそうです。\r\n\r\n``` diff\r\n// Program.cs\r\n\r\n @@ -1,3 +1,5 @@\r\n+using Net6MarkdownWebEngine.Backend.Services;\r\n+\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\n\r\n @@ -7,6 +9,27 @@ builder.Services.AddControllers();\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\n+// // Add md2json converter service\r\n+//builder.Services.AddSingleton<IService, MarkdownConverterService>();\r\n+\r\n+// Add Documents Watch Service\r\n+var contetRootPath = builder.Environment.ContentRootPath;\r\n+var isDevelopment = builder.Environment.IsDevelopment();\r\n+builder.Services.Configure<DocumentsWatchServiceOptions> (options =>\r\n+{\r\n+    // TODO: review correct input/output directory path\r\n+    options.InputDirectry = Path.Combine(contetRootPath, \"../AngularStandalone/src/assets/docs\");\r\n+    if (isDevelopment)\r\n+    {\r\n+        options.OutputDirectry = Path.Combine(contetRootPath, \"../AngularStandalone/src/assets/json\");\r\n+    }\r\n+    else\r\n+    {\r\n+        options.OutputDirectry = Path.Combine(contetRootPath, \"../AngularStandalone/dist/assets/+json\");\r\n+    }\r\n+});\r\n+builder.Services.AddSingleton<Microsoft.Extensions.Hosting.IHostedService, DocumentsWatchService>();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\n```\r\n\r\n## Markdown to Json Converter\r\n\r\nコンソールアプリケーションのプログラムも、.NET 6からはシンプルな最上位レベルのステートメントのテンプレートで生成されていました。\r\n\r\nですが、シンプルな形式でのうまい記述方法が見いだせなかったので、以前と同様にクラスを宣言する書き方で実装しました。この部分は将来への宿題です。\r\n\r\nせっかくのリライトなので、以前の実装で気になっていた部分について書き直してみました。\r\n\r\n- 再帰してフォルダとファイルを探索する際、folder構成が深い場合に速度低下が発生していた。再帰を使わずに対象ファイルをリストアップするように変更。\r\n- ファイルの読み込み/書き込みは並列処理可能なので、.NET 6で追加されたParallel.ForEachAsycを利用した非同期並列処理を実装\r\n- JSON serializer/deserializerをJson.NETからDynaJsonに変更\r\n  - [DynaJsonではJSONデータをRFCに則り厳密にparseする](https://dev.to/fujieda/how-to-make-json-parser-strict-4a85)とのことで、escape characterの差分が現れました。フロントエンド側での表示に影響が出る懸念あり（後で要確認）\r\n\r\nパフォーマンスの測定も時間ができたら試してみたいと思います。\r\n\r\n## 関連項目\r\n\r\n- [IHostedService と BackgroundService クラスを使ってマイクロサービスのバックグラウンド タスクを実装する](https://docs.microsoft.com/ja-jp/dotnet/architecture/microservices/multi-container-microservice-net-applications/background-tasks-with-ihostedservice)\r\n-[.NET の Worker サービス](https://docs.microsoft.com/ja-jp/dotnet/core/extensions/workers)\r\n- [Parallel Foreach async in C#](https://medium.com/@alex.puiu/parallel-foreach-async-in-c-36756f8ebe62)\r\n- [Parallel.ForEachAsync in .NET 6](https://www.hanselman.com/blog/parallelforeachasync-in-net-6)\r\n- [C#でParallelの処理速度比較(for, foreach, AsParallel(), AsParallel().ForAll(), Parallel.ForEach())](https://dasuma20.hatenablog.com/entry/cs/parallel-of-speed)\r\n"}