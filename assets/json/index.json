[{"docRef":"/angular/angular-embed-html-tag","content":{"title":"Angularで動的にHTMLタグをコンポーネントに埋め込む","date":"2019-11-14","category":"Angular","tag":["html","embed"],"body":"\r\n\r\nAngularでは、データバインドを利用したテキストの埋め込み時にセキュリティ上の考慮がなされています。具体的には、scriptやhtmlは自動的にエスケープ処理され、原則的にはhtmlタグを埋め込めないようになっています。\r\n\r\nAngularで、markdownから生成したhtmlをタグとして画面に挿入する方法を調査しました。\r\n\r\n## 注意点\r\n\r\n開発者は、**有害なhtmlデータ**がこれらの処理を通してユーザに送信されないよう、十分に考慮する必要があります。\r\n\r\n## SafeHtml型のhtmlデータを[innerHTML]にバインドする\r\n\r\n実装例を以下に示します。\r\n\r\n**MarkdownService**\r\n\r\n```ts\r\nexport class MarkdownService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private sanitizer: DomSanitizer,\r\n    @Inject(\"BASE_URL\") private baseUrl: string,\r\n  ) {}\r\n\r\n  getDocument(path: string): Observable<DocumentInfo> {\r\n    let docInfo: DocumentInfo;\r\n    const processor = unified()\r\n      .use(markdown, { commonmark: true })\r\n      .use(remarkAttr)\r\n      .use(remarkRehype, { allowDangerousHTML: true })\r\n      .use(raw)\r\n      .use(slug)\r\n      .use(autoLinkHeadings)\r\n      .use(highlight)\r\n      .use(html);\r\n\r\n    return this.http.get<DocumentInfo>(this.baseUrl + path).pipe(\r\n      map(result => {\r\n\t\t// this.baseUrl + pathにアクセスすると、docInfo型のデータがjsonで取得できる。それをそのまま代入。\r\n        docInfo = result;\r\n\r\n        // set default toc\r\n        if (!docInfo.toc) {\r\n          docInfo.toc = \"h2,h3\";\r\n        }\r\n\r\n\t\t// docInfo.bodyはmarkdown形式のデータ。processor.processSync処理でhtmlに変換される\r\n\t\tdocInfo.bodyHtml = processor.processSync(docInfo.body).contents;\r\n\r\n\t\t// bypassSecurityTrustHtmlはhtmlデータをSafeHTMLという特別な型に変換する\r\n        docInfo.safeBody = this.sanitizer.bypassSecurityTrustHtml(docInfo.bodyHtml);\r\n        return docInfo;\r\n      }),\r\n    );\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n**document.component.html(抜粋)**\r\n\r\n```html\r\n<div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.bodyHtml\" appRouteTransformer>\r\n```\r\n\r\nまたは\r\n\r\n```html\r\n<div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.safeBody\" appRouteTransformer>\r\n```\r\n\r\n通常のhtmlデータ(docInfo.bodyHtml)をinnerHTMLにバインドした場合、idやスタイルなどの属性は自動的に取り除かれてしまいます。またブラウザのコンソール上に**安全でないhtmlデータがバインドされた**という警告が表示されます。\r\n\r\nDomSanitizer.bypassSecurityTrustHtmlを利用すると、htmlデータはSafeHTML型に変換され、Angularはこのデータを無害なhtmlデータとして取り扱います。つまりすべてそのままの状態でバインドされます。\r\n\r\n## ElementRef.nativeElementにバインドする\r\n\r\n実装例を以下に示します。\r\n\r\n**document.component.html(抜粋)**\r\n\r\n```html\r\n<div fxLayout=\"column\" class=\"doc-container\" [@openClose]=\"isOpen ? 'open' : 'closed'\">\r\n  <!-- <p *ngIf=\"!docInfo\">loading...</p> -->\r\n  <ng-container *ngIf=\"docInfo && docInfo?.toc === 'none'\">\r\n    ...\r\n  </ng-container>\r\n  <ng-container *ngIf=\"docInfo && docInfo?.toc !== 'none'\">\r\n    <div fxLayout=\"row\">\r\n      <div fxFlex=\"1 1 85%\" fxFlex.lt-md=\"1 1 100%\">\r\n        <div fxLayout=\"column\">\r\n          ...\r\n          <!-- <div fxFlex class=\"doc-body\" [innerHTML]=\"docInfo?.safeBody\" appRouteTransformer></div> -->\r\n          <div #mdContent fxFlex class=\"doc-body\" appRouteTransformer></div>\r\n        </div>\r\n      </div>\r\n      <div fxFlex=\"1 1 15%\" fxHide.lt-md>\r\n        <app-document-toc [tocList]=\"tocList\" appRouteTransformer></app-document-toc>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n```\r\n\r\n**document.component.ts**\r\n\r\n```ts\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: \"app-document\",\r\n  templateUrl: \"./document.component.html\",\r\n  styleUrls: [\"./document.component.scss\", \"./vs2015.css\"],\r\n  animations: [defaultRouteAnimation],\r\n})\r\nexport class DocumentComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  docInfo: DocumentInfo | null;\r\n  isOpen: boolean = true;\r\n  tocList: TocItem[] | null;\r\n\r\n  // template html中の<div #mdContent>を参照するオブジェクトを定義\r\n  @ViewChild(\"mdContent\")\r\n  mdRef: ElementRef<HTMLElement>;\r\n\r\n  private fragment: string;\r\n  private previousPath: string;\r\n  private onDestroy = new Subject();\r\n  private routeChangeSubject = new Subject();\r\n\r\n  constructor(\r\n    private markdownService: MarkdownService,\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private loadingBarService: LoadingBarService,\r\n    private changeDetector: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    ...\r\n    this.route.url.pipe(takeUntil(this.onDestroy)).subscribe(params => {\r\n      const docRef = params.map(x => x.path).join(\"/\");\r\n      if (docRef !== this.previousPath) {\r\n        this.docInfo = null;\r\n        this.isOpen = false;\r\n        this.getMarkdownDocInfo(docRef);\r\n      } else {\r\n        this.loadingBarService.hide();\r\n      }\r\n      this.previousPath = docRef;\r\n    });\r\n  }\r\n  ...\r\n  private getMarkdownDocInfo(docRef: string) {\r\n    const path = this.location.normalize(\"assets/json/\" + docRef + \".json\");\r\n\r\n    this.markdownService\r\n      .getDocument(path)\r\n      .pipe(takeUntil(this.onDestroy))\r\n      .subscribe(\r\n        doc => {\r\n\t\t  this.docInfo = doc;\r\n\r\n\t\t  // 初期画面は<ng-container *ngIf=\"docInfo>の条件設定により\r\n\t\t  // #mdContentを持つelementがまだ画面にない。\r\n\t\t  //\r\n\t\t  // this.docInfoをセットした後に、ChangeDetectorRef.detectChanges()することで\r\n\t\t  // 仮想DOMの内容が更新され、<ng-container *ngIf=\"docInfo>内のelementに\r\n\t\t  // アクセスすることができるようになる。\r\n\t\t  this.changeDetector.detectChanges();\r\n\r\n\t\t  // mdRef(#mdContentを持つdiv)のnativeElementにアクセスすることで\r\n\t\t  // JQueryやjavascriptで過去に行っていたような、htmlタグの操作が可能になる。\r\n          this.mdRef.nativeElement.innerHTML = doc.bodyHtml;\r\n        },\r\n        err => console.error(\"MarkdownService\", err),\r\n      );\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n`nativeElement`に対する処理はjavascriptで直接実施されるので、safeHTML型にする必要はなく、サニタイズを考慮せずにhtmlをそのままバインドできます（出来てしまいます）。\r\n\r\n## 関連項目\r\n\r\n-   [セキュリティ - angular.jp](https://angular.jp/guide/security#bypass-security-apis)\r\n-   [ElementRef - angular.jp](https://angular.jp/api/core/ElementRef)\r\n-   [\\[Angular\\]変数のバインドで、htmlタグを埋め込む](https://akamist.com/blog/archives/2223)\r\n-   [AngularでビューにHTML文書を「バインド」するには？（Property Binding）](https://www.atmarkit.co.jp/ait/articles/1702/13/news127.html)\r\n"}},{"docRef":"/angular/angular-setup-ghpages","content":{"title":"angular-cli-ghpagesを利用する","date":"2019-11-14","category":"Angular","tag":["deploy","github pages"],"body":"\r\n\r\nAngular 7でangular-cli-ghpagesライブラリを利用して、github pagesを簡単に更新できるようなので、その設定方法などを調べました。\r\n\r\n## 実施した手順\r\n\r\nまず初めに[angular-cli-ghpagesのgithubリポジトリ](https://github.com/angular-schule/angular-cli-ghpages)を確認しました。\r\n\r\nPrerequisitesに`Angular project created via Angular CLI v8.3.0-next.0 or greate`と書かれているのを発見。うまくいかないかもしれないが、とりあえずAngular CLI v7系のまま設定を実施しました。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> ng add angular-cli-ghpages\r\nInstalling packages for tooling via npm.\r\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\\fsevents):\r\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\r\n+ angular-cli-ghpages@0.5.3\r\nadded 18 packages from 17 contributors and audited 42977 packages in 21.148s\r\nfound 607 vulnerabilities (3 moderate, 604 high)\r\n  run `npm audit fix` to fix them, or `npm audit` for details\r\nInstalled packages for tooling via npm.\r\nThe package that you are trying to add does not support schematics. You can try using a different version of the package or contact the package author to add ng-add support.\r\n```\r\n\r\n警告などが出ている（auditは今後の課題）が、今回は無視して進めます。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> ng build --prod --base-href \"https://takumura.github.io/tech-log/\"\r\n```\r\n\r\ndry-runによる予行でどのように動くか実験。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages --dry-run\r\n*** Dry-run: No changes are applied at all.\r\n*** Dry-run / SKIPPED: cleaning of the cache directory\r\n*** Dry-run / SKIPPED: copying of index.html to 404.html\r\n*** Dry-run / SKIPPED: publishing to \"C:\\Repos\\github\\tech-log\\Website\\ClientApp\\dist\" with the following options: { dir: 'C:\\\\Repos\\\\github\\\\tech-log\\\\Website\\\\ClientApp\\\\dist',\r\n  repo:\r\n   'undefined: current working directory (which must be a git repo in this case) will be used to commit & push',\r\n  message: 'Auto-generated commit',\r\n  branch: 'gh-pages',\r\n  user:\r\n   'undefined: local or gloabl git username & email properties will be taken',\r\n  noSilent: 'undefined: logging is in silent mode by default',\r\n  noDotfiles: 'undefined: dotfiles are included by default',\r\n  dryRun: true,\r\n  cname: 'undefined: no CNAME file will be created' }\r\n*** Successfully published!\r\n```\r\n\r\n問題なさそうなので本実行。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages\r\n```\r\n\r\n初回は`Permission denied (publickey)`エラーが発生してpushに失敗。[Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える](docs/env/git-ssh-configuration){.internal-link}の対応を実施してから再チャレンジ。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages\r\n*** Successfully published!\r\n```\r\n\r\n無事成功。<https://takumura.github.io/tech-log/> にアクセスすると、見事にサイトが表示されていました。fetchでのjsonデータ取得や、ページ遷移なども問題なく動作しています。素晴らしい！\r\n\r\n## パブリッシュスクリプトの作成\r\n\r\nprodオプション付きのビルドを実行し、生成されたdistフォルダ以下をorigin/gh-pagesにpushするスクリプトを作成しました。\r\n\r\n### publish-to-ghpages.ps1\r\n\r\n```bash\r\nng build --prod --base-href \"https://takumura.github.io/tech-log/\"\r\nnpx angular-cli-ghpages\r\n```\r\n\r\n## 作業時に参照した情報\r\n\r\n-   [Deploying an Angular App to Github Pages](https://alligator.io/angular/deploying-angular-app-github-pages/)\r\n-   [Angular-CLIで作成したアプリをGithub Pagesにデプロイする](https://prokatsu.com/angular-cli_github-pages_deploy/)\r\n-   [AngularのプロジェクトをGithub Pagesに公開する](https://choco14t.hatenablog.com/entry/2018/07/07/144504)\r\n"}},{"docRef":"/angular/angular-show-gist","content":{"title":"Angularでgistを表示する","date":"2019-11-14","category":"Angular","tag":["gist","embed","PostScribe"],"body":"\r\n\r\n[Angularで動的にHTMLタグをコンポーネントに埋め込む](docs/angular/angular-embed-html-tag){.internal-link}により、htmlを埋め込むことができたが、その中にscriptタグが含まれていた場合、表示させただけではscriptが実行されません。JQueryでいうところの`$()`に相当する、画面描画後にscriptを実行する処理が必要になります。\r\n\r\n本tech-log内で、gistのembedを表示するのに本課題を対応する必要があり、解決方法を調査しました。\r\n\r\n## PostScribeを利用する\r\n\r\n非同期にscriptを実行し、結果をDOMに書き込む[PostScribe](https://krux.github.io/postscribe/)というライブラリを利用することで、gistのembedを実現しました。\r\n\r\n**Markdownファイル(抜粋)**\r\n\r\n```html\r\ngistの表示デモ。class=\"gist\"のdivでgistのembedスクリプトを囲います\r\n<div class=\"gist\">\r\n\t<script src=\"https://gist.github.com/takumura/bbff68078afb2d0846773965d1678c7c.js\"></script>\r\n</div>\r\n```\r\n\r\n**document.component.ts（抜粋）**\r\n\r\n```ts\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport postscribe from 'postscribe';\r\n\r\n@Component({\r\n  selector: \"app-document\",\r\n  templateUrl: \"./document.component.html\",\r\n  styleUrls: [\"./document.component.scss\", \"./vs2015.css\"],\r\n  animations: [defaultRouteAnimation],\r\n})\r\nexport class DocumentComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  docInfo: DocumentInfo | null;\r\n  isOpen: boolean = true;\r\n  tocList: TocItem[] | null;\r\n\r\n  // template html中の<div #mdContent>を参照するオブジェクトを定義\r\n  @ViewChild(\"mdContent\")\r\n  mdRef: ElementRef<HTMLElement>;\r\n\r\n  private fragment: string;\r\n  private previousPath: string;\r\n  private onDestroy = new Subject();\r\n  private routeChangeSubject = new Subject();\r\n\r\n  constructor(\r\n    private markdownService: MarkdownService,\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private loadingBarService: LoadingBarService,\r\n    private changeDetector: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    ...\r\n    this.route.url.pipe(takeUntil(this.onDestroy)).subscribe(params => {\r\n      const docRef = params.map(x => x.path).join(\"/\");\r\n      if (docRef !== this.previousPath) {\r\n        this.docInfo = null;\r\n        this.isOpen = false;\r\n        this.getMarkdownDocInfo(docRef);\r\n      } else {\r\n        this.loadingBarService.hide();\r\n      }\r\n      this.previousPath = docRef;\r\n    });\r\n  }\r\n  ...\r\n  private getMarkdownDocInfo(docRef: string) {\r\n    const path = this.location.normalize('assets/json/' + docRef + '.json');\r\n\r\n    this.markdownService\r\n      .getDocument(path)\r\n      .pipe(takeUntil(this.onDestroy))\r\n      .subscribe(\r\n        doc => {\r\n          this.docInfo = doc;\r\n\r\n          // detect change to update virtual DOM\r\n          // and allow to access mdContentRef\r\n          this.cdRef.detectChanges();\r\n          this.mdContentRef.nativeElement.innerHTML = this.docInfo.bodyHtml;\r\n\r\n          this.showGist();\r\n          this.generateToc();\r\n          this.routeChangeSubject.next();\r\n        },\r\n        err => console.error('MarkdownService', err),\r\n      );\r\n  }\r\n\r\n  private showGist() {\r\n    const gists = this.mdContentRef.nativeElement.querySelectorAll('div.gist');\r\n    gists.forEach(gist => {\r\n      postscribe(gist, gist.innerHTML);\r\n    });\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n`this.mdContentRef.nativeElement.innerHTML = this.docInfo.bodyHtml;`でhtmlをDOMに反映させた後で、`showGist()`関数を呼んでいます。\r\n\r\n`showGist`関数では、`this.mdContentRef.nativeElement.querySelectorAll('div.gist')`で`gist`クラスを持つ`div`タグをリストアップし、発見したすべての`div`に対して`div.innerHTML`、すなわちembedのscriptを実行しています。\r\n\r\n```ts\r\npostscribe(\r\n  gist,           // div.gistのtag。このdivの中にscript実行結果が書き込まれる。\r\n  gist.innerHTML  // div.innerHTML = gistのembed script\r\n);\r\n```\r\n\r\n## 関連項目\r\n\r\n-   [postscribe - Github](https://github.com/krux/postscribe)\r\n-   [VSCode: Settings Syncで環境設定を共有する](docs/env/vscode-settings-sync){.internal-link}\r\n"}},{"docRef":"/env/git-ssh-configuration","content":{"title":"Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える","date":"2019-08-15","category":"環境設定","tag":["git","vscode","openssh","windows10"],"body":"## 経緯\r\n\r\n-   これまではSourceTreeを利用してGithub, Bitbucketのリモートリポジトリを操作していました\r\n-   接続にはsshを利用し、SourceTreeに付属のPuttyおよびPageantで鍵の運用をしていました\r\n-   [angular-cli-ghpagesを利用する](docs/angular/angular-setup-ghpages){.internal-link}の作業で、origin/gh-pagesにpushする処理でエラーが発生\r\n-   VSCodeをPutty(Pageant)を連携する方法を調べたが見つからず、ssh clientの利用方法を見直す必要がありました\r\n\r\n## 環境\r\n\r\n-   Windows 10 May 2019 Update(バージョン1903)\r\n-   SourceTree 3.1.3\r\n\r\n## 実施した手順\r\n\r\nまず初めに、VSCodeからssh接続でremoteにpushする方法について、google検索で情報収集しました。Puttyを利用している記事はヒットせず、openssh clientの設定を行う記事が大半でした。\r\n\r\n開発環境はWindows 10 May 2019 Update(バージョン1903)が適用済みで、特に設定不要でssh clientが利用可能になっていました。なのでこれを利用することにします。\r\n\r\n途中までSourceTreeで作業をしていたので、鍵の作成や公開鍵のgithubへの登録は完了済みでした。なのでssh clientに秘密鍵を登録して使えるようにします。\r\n\r\n### OpenSSH Authentication Agentサービスの設定変更\r\n\r\nOpenSSH Authentication Agentサービスは無効状態でした。サービスを起動し、設定を自動起動に変更しました。\r\n\r\n### ppkファイルからOpenSSH形式の秘密鍵を生成\r\n\r\nPutty(Pageant)が利用している秘密鍵(.ppk)はOpenSSHと互換性のない独自形式です。ssh clientで利用するためにはOpenSSH形式に変換してあげる必要があります。\r\n\r\n1.  SourceTreeのメニューから`SSH キーの生成/インポート`を選択\\\r\n    <img src=\"assets/images/git-ssh-configuration/git-ssh-configuration-1.png\" alt=\"puttygen.exe\" title=\"puttygen.exe\">\r\n\r\n2.  Loadボタンを押して、githubの秘密鍵(.ppk)を読み込み、メニュの`Conversions` > `Export OpenSSH key`を選択。OpenSSh形式の秘密鍵: `id_rsa`を生成\r\n3.  作成した`id_ras`ファイルを`c:\\Users\\<username>\\.ssh`フォルダに配置\r\n\r\n1.で実行されるツール(puttygen.exe)は、私の環境では`c:\\Users\\<username>\\AppData\\Local\\SourceTree\\app-3.1.3\\tools\\putty\\puttygen.exe`にありました。\r\n\r\n`c:\\Users\\<username>\\.ssh`も存在していましたが、中身は空でした。\r\n\r\n### ssh-agentに秘密鍵を登録\r\n\r\n以下のコマンドを実行します。\r\n\r\n```cmd\r\n> cd c:\\Users\\<username>\\.ssh\r\n> ssh-add id_rsa\r\n```\r\n\r\nパスフレーズを聞かれるので、正しく入力すると登録が完了しました。\r\n\r\nこれで、gitコマンドを使ってリモートリポジトリを操作できるようになりました。\r\n\r\n## SourceTreeの併用について\r\n\r\nこれまで通りSourceTreeも併用していきたいので、鍵の管理フォルダを`c:\\Users\\<username>\\.ssh`に変更しました。\r\n\r\nそして、これまで鍵長2048でキーを作成していることに気が付いたので、鍵長4096のキーにすべて置き換えることにしました。\r\n\r\nBitbucket用、Github用に別々のキーを作成して管理していましたが、今回はAzure DevOpsを含めた3つのgitリポジトリへのアクセスを、共通した1つの鍵で管理することにしました。\r\n\r\n```cmd\r\n.ssh> dir\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019/08/15     14:11           3311 id_rsa\r\n-a----       2019/08/15     14:10           2719 id_rsa.ppk\r\n-a----       2019/08/15     15:13            739 id_rsa.pub\r\n-a----       2019/08/15     15:49           4377 known_hosts\r\n```\r\n\r\n## 作業時に参照した情報\r\n\r\n-   [PuTTYを卒業してWindows 10標準のssh client（ベータ）に切り替えた](http://www.freia.jp/taka/blog/windows-native-ssh-client/index.html)\r\n-   [Use SSH key authentication](https://docs.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops)"}},{"docRef":"/env/tool-list","content":{"title":"Windowsの環境セットアップ","date":"2019-11-08","category":"環境設定","tag":["setup","tool","install"],"body":"\r\n\r\nWindowsの環境セットアップ手順についてまとめます。Scoopを利用できるものはセットアップを自動化し、そうでないものは個別にインストールしています。\r\n\r\n## scoopを用いた環境セットアップスクリプト\r\n\r\n**env-setup-common.ps1**\r\n\r\n```ps\r\n## plese run following command if error occured for running powershell script.\r\n## set-executionpolicy unrestricted -s cu\r\n\r\n# install scoop to \"c:\\Apps\\scoop\" folder\r\n$env:SCOOP='C:\\Apps\\scoop'\r\n[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')\r\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')\r\n\r\n# install git to add bucket\r\nscoop install git\r\n\r\n# add extras bucket\r\nscoop bucket add extras\r\n\r\n# utils\r\nscoop install 7zip keepass curl winmerge fiddler\r\n```\r\n\r\n**env-setup-dev.ps1**\r\n\r\n```ps\r\n# dev utils\r\nscoop install git fork\r\n\r\n# programming\r\nscoop install dotnet-sdk nodejs\r\n\r\n# editor\r\nscoop install vscode\r\n```\r\n\r\n### 7zip\r\n\r\n圧縮・解凍ソフト。Scoopを利用してインストールできます。完了後に、`scoop\\apps\\7zip\\current\\7zFM.exe`のメニュ > `ツール` > `オプション` > `7-Zip` から `シェルコンテキストメニュに7zipを登録`のチェックを入れて、右クリックメニュから7zipを使えるようにします。\r\n\r\n### keepass\r\n\r\nパスワード管理ツール。\r\n\r\n### curl\r\n\r\nURLシンタックスを用いてファイル送受信を行うコマンドラインツール\r\n\r\n### git\r\n\r\nバージョン管理ツール\r\n\r\n### git-fork\r\n\r\nグラフィカルgitクライアント。一緒に仕事をしている人が超絶お勧めしているので試してみる予定。Scoopを利用してインストールできるか検討中。\r\n\r\n### WinMerge\r\n\r\n差分比較、マージツール。Scoopを利用してインストールできます。\r\n\r\n### fiddler\r\n\r\nHTTPトラフィック監視ツール。Scoopを利用してインストールできるか検討中。\r\n\r\n### Simple VHD Manager\r\n\r\nVHD（仮想ハードディスク）ファイルの管理ツール。Scoopを利用してインストールできるか検討中。公式bucketsにはapp manifestが存在しないため、自分で作る必要がある。\r\n\r\n### .NET Core\r\n\r\n開発環境。Scoopを利用してインストールできるか検討中。\r\n\r\n### Nodejs\r\n\r\n開発環境。Scoopを利用してインストールできるか検討中。LTS版をインストールする予定。\r\n\r\n### Visual Studio Code\r\n\r\n軽量コードエディター。Scoopを利用してインストールできるか検討中。\r\n\r\n### chrome\r\n\r\nブラウザ。Scoopを利用してインストールできるか検討中。公式bucketsにはapp manifestが存在しないため、自分で作る必要がある。\r\n\r\n## 個別にインストールするAppについて\r\n\r\n### Synkron\r\n\r\nフォルダ同期ツール\r\n\r\n### Visual Studio\r\n\r\n開発環境\r\n\r\n## 関連項目\r\n\r\n-   [Example Setup Scripts](https://github.com/lukesampson/scoop/wiki/Example-Setup-Scripts)\r\n-   [Chrome.json](https://github.com/Ash258/scoop-Ash258/blob/master/bucket/Chrome.json)\r\n-   [SimpleVHDManager.json](https://github.com/Ash258/scoop-Ash258/blob/master/bucket/SimpleVHDManager.json)\r\n"}},{"docRef":"/env/use-scoop","content":{"title":"scoopでWindowsアプリを管理する","date":"2019-11-01","category":"環境設定","tag":["tool","scoop"],"body":"\r\n\r\nscoop を利用して、開発環境の自動セットアップ、および最新版への定期的なアップデートなどの管理を上手に行えるのか試してみます。\r\n\r\n## インストール\r\n\r\nまず初めに[公式サイト](https://scoop.sh/)と[GitHub リポジトリ](https://github.com/lukesampson/scoop)を確認しました。インストールは PowerShell スクリプトで行うと書いてあるので、その通りに実行しました。\r\n\r\n```ps\r\n> Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')\r\nInitializing...\r\nDownloading scoop...\r\nExtracting...\r\nCreating shim...\r\nDownloading main bucket...\r\nExtracting...\r\nAdding ~\\scoop\\shims to your path.\r\n'lastupdate' has been set to '2019-11-01T17:22:42.8161465+09:00'\r\nScoop was installed successfully!\r\nType 'scoop help' for instructions.\r\n```\r\n\r\nログインしているアカウントのユーザフォルダ以下に`scoop`フォルダが作成されました。scoop で管理される App はこのフォルダ以下に配置されるようです。\r\n\r\n## Bucket の設定\r\n\r\nデフォルトでは main backet が利用可能です。`bucket add`コマンドにより、bucket を追加することができます。追加可能な bucket は`scoop\\apps\\scoop\\current\\buckets.json`で設定されており、`bucket known`コマンドで見る事もできます。\r\n\r\n```ps\r\n> scoop bucket known\r\nmain\r\nextras\r\nnightlies\r\nnirsoft\r\nphp\r\nnerd-fonts\r\nnonportable\r\njava\r\ngames\r\njetbrains\r\n```\r\n\r\n以前から利用している App が extras にありそうだったので、追加しました。\r\n\r\n```ps\r\n> scoop bucket add extras\r\nChecking repo... ok\r\nThe extras bucket was added successfully.\r\n```\r\n\r\ngit がインストールされていないと bucket の追加に失敗します。その場合は git を先にインストールします。\r\n\r\n```ps\r\nscoop install git\r\n```\r\n\r\n## よく使うであろうコマンド\r\n\r\n### scoop search\r\n\r\n指定した App が Bucket(collections of apps)にあるか検索する。\r\n\r\n```ps\r\n> scoop search nodejs\r\n'main' bucket:\r\n    nodejs-lts (12.13.0)\r\n    nodejs (13.1.0)\r\n\r\n> scoop search keepass\r\n'extras' bucket:\r\n    keepass-plugin-keeagent (0.10.1)\r\n    keepass-plugin-keeanywhere (1.5.1)\r\n    keepass-plugin-keepassnatmsg (2.0.6)\r\n    keepass-plugin-keepassrpc (1.9.0)\r\n    keepass-plugin-keetraytotp (0.99-Beta)\r\n    keepass-plugin-sequencer (0.1.1)\r\n    keepass-plugin-yafd (1.2.2.0)\r\n    keepass (2.43)\r\n    keepassxc (2.5.0)\r\n```\r\n\r\n### scoop install\r\n\r\n指定した App をインストールする。\r\n\r\n```ps\r\n> scoop install 7zip\r\nUpdating Scoop...\r\nUpdating 'main' bucket...\r\nChecking repo... ok\r\nThe main bucket was added successfully.\r\nScoop was updated successfully!\r\nInstalling '7zip' (19.00) [64bit]\r\n7z1900-x64.msi (1.7 MB) [===============================================================================================] 100%\r\nChecking hash of 7z1900-x64.msi ... ok.\r\nExtracting 7z1900-x64.msi ... done.\r\nLinking ~\\scoop\\apps\\7zip\\current => ~\\scoop\\apps\\7zip\\19.00\r\nCreating shim for '7z'.\r\nCreating shortcut for 7-Zip (7zFM.exe)\r\n'7zip' (19.00) was installed successfully!\r\n```\r\n\r\n## scoop update\r\n\r\n`scoop udpate`コマンドで scoop 自体とインストール可能な App の情報（app manifest）を更新できます。セミコロンで続けて`scoop update *`とすることで、インストール済みのすべての App に対して、バージョンアップのチェックおよび App の更新ができます。\r\n\r\n```ps\r\n> scoop update; scoop update *\r\nUpdating Scoop...\r\nUpdating 'extras' bucket...\r\n * 4366eadd vscodium: Update to version 1.40.0                           2 hours ago\r\n * 3ade6589 vscodium-portable: Update to version 1.40.0                  2 hours ago\r\n * 88e85c64 vivaldi: Update to version 2.9.1705.41                       2 hours ago\r\nUpdating 'main' bucket...\r\n * 124c0c6a ffmpeg-nightly: Update to version 20191108-e700038           2 hours ago\r\n * 20998cde annie: Update to version 0.9.6                               2 hours ago\r\n * 41fcafae terraform-provider-ibm: Update to version 0.19.0             3 hours ago\r\n * 94629c47 jx: Update to version 2.0.971                                3 hours ago\r\n * b017d181 faas-cli: Update to version 0.10.3                           3 hours ago\r\nScoop was updated successfully!\r\nLatest versions for all apps are installed! For more information try 'scoop status'\r\n```\r\n\r\n## アンインストール\r\n\r\n追加でインストールする App は`C:\\Apps`以下にまとめるルールにしていたので、scoop をインストールし直すことにします。\r\n\r\n```ps\r\n> scoop uninstall scoop\r\nWARN  This will uninstall Scoop and all the programs that have been installed with Scoop!\r\nAre you sure? (yN): y\r\nUninstalling '7zip'\r\nRemoving shim for '7z'.\r\nWARN  Couldn't remove ~\\scoop\\apps\\7zip: 項目 C:\\Users\\takum\\scoop\\apps\\7zip\\19.00\\7-zip.dll を削除できません: パス '7-zip.dll' へのアクセスが拒否されました。.Exception\r\nUninstalling 'winmerge'\r\nRemoving shim for 'WinMergeU'.\r\nCouldn't remove ~\\scoop\\apps: 項目 C:\\Users\\takum\\scoop\\apps\\7zip\\19.00\\7-zip.dll を削除できません: パス '7-zip.dll'\r\nへのアクセスが拒否されました。\r\n```\r\n\r\n7zip インストール後にエクスプローラ統合の設定をしたために`7-zip.dll`が削除できなくなっていました。設定を解除して再起動後、アンインストールをやり直します。\r\n\r\n```ps\r\nscoop uninstall scoop\r\nWARN  This will uninstall Scoop and all the programs that have been installed with Scoop!\r\nAre you sure? (yN): y\r\nUninstalling '7zip'\r\nWARN  Shim for '7z' is missing. Skipping.\r\nRemoving ~\\scoop\\shims from your path.\r\nScoop has been uninstalled.\r\n```\r\n\r\n今度は正常にアンインストール処理が完走しました。\r\n\r\n## カスタムディレクトリに scoop をインストール\r\n\r\n公式 wiki の[Installing Scoop to Custom Directory](https://github.com/lukesampson/scoop/wiki/Quick-Start#installing-scoop-to-custom-directory)を参考にして、`C:\\Apps\\scoop`以下に scoop をインストールします。\r\n\r\n```ps\r\n$env:SCOOP='C:\\Apps\\scoop'\r\n[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')\r\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')\r\n```\r\n\r\n## App Manifest について\r\n\r\n公式が提供していない App Manifest は自分で作ることも可能です。詳細な方法は[Creating an app manifest](https://github.com/lukesampson/scoop/wiki/Creating-an-app-manifest)に書かれています。\r\n\r\n## 関連項目\r\n\r\n[scoop wiki - GitHub](https://github.com/lukesampson/scoop/wiki)\r\n"}},{"docRef":"/env/vscode-settings-sync","content":{"title":"VSCode: Settings Syncで環境設定を共有する","date":"2019-11-01","category":"環境設定","tag":["vscode","git","settings.json"],"body":"\r\n\r\n拡張機能: `Settings Sync`を導入することで、VSCodeの設定、スニペット、テーマ、ファイルアイコン、キーバインディング、ワークスペース、拡張機能を複数のマシンで同期できます。\r\n\r\nデータはgistで共有されることになるので、設定のバックアップにもなりそうです。\r\n\r\n## 手順\r\n\r\nまずはSettings Syncの拡張機能画面で、設定方法の解説を確認。\r\n\r\n```plaintext\r\nShortcuts\r\n\t1. Upload Key : Shift + Alt + U\r\n\t2. Download Key : Shift + Alt + D\r\n\r\nConfigure Settings Sync\r\n\tSettings Sync Configuration page will be opened automatically on code start and requires two things to setup:\r\n\r\n\t1. GitHub Token\r\n\t2. GitHub Gist Id\r\n\r\n\tGitHub Token needs to be retrived by your GitHub account while Settings Sync creates GIST if you are first time user.\r\n\r\n\tFollowing are the steps you need to perform to configure.\r\n\r\n\t- Click on Login with GitHub .\r\n\t- Login GitHub on Browser and close the browser tab once you get Success message.\r\n\t- If you are using Settings Sync first time GIST will be created automatically when you upload your settings.\r\n\t- If you already have GitHub Gist, new window will be opened to allow you to select the GitHub Gist or Skip to create new Gist.\r\n```\r\n\r\n  \\\r\n特に気になる記述や疑問がなかったので、拡張機能: `Settings Sync`をインストール。完了すると`Welcome to Settings Sync`のタブが表示されたので、`LOGIN WITH GITHUB`を選択。\r\n\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-1.png\" alt=\"Welcome to Settings Sync\" title=\"Welcome to Settings Sync\">\r\n\r\n`Authorize Settings Sync`のページがブラウザで表示されたので、`Authorize shanalikhan`する。\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-2.png\" alt=\"Github OAuth Authorization\" title=\"Github OAuth Authorization\">\r\n\r\n設定完了の表示に切り替わり、準備が完了しました。\r\n\r\n`Shift + Alt + U` もしくは、コマンドパレットから`Sync: アップデート・アップロードの設定`を選択すると、環境設定情報がGistにアップロードされました。\r\n\r\nアップロード後、変更なしにもう一度アップロードしようとしたところ、確認ダイアログが表示されました。親切ですね。\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-3.png\" alt=\"Dialog\" title=\"Dialog\">\r\n\r\n## 自動作成されたgist\r\n\r\nSettings Syncは`couldSettings`という名前のシークレットgistを自動的に作成していました。手動設定を行えば、自分で作成したgistに環境設定情報をアップロードさせることもできるようです。\r\n\r\ngistには、以下の5つのファイルが登録されていました。\r\n\r\n-   cloudSettings\r\n-   extensions.json\r\n-   keybindings.json\r\n-   keybindingsMac.json\r\n-   settings.json\r\n\r\n<div class=\"gist\">\r\n\t<script src=\"https://gist.github.com/takumura/bbff68078afb2d0846773965d1678c7c.js\"></script>\r\n</div>\r\n"}},{"docRef":"/nodejs/update-node-modules","content":{"title":"node_modulesを更新する","date":"2020-02-09","category":"Nodejs","tag":["npm","Dependabot"],"body":"\r\n\r\nGithub で管理している Node.js アプリケーションで、依存 package のバージョンにセキュリティリスクがある場合に、Dependabot が警告してくれました。この警告を解消する手順を確認します。\r\n\r\n## 警告の内容を確認\r\n\r\ntech-log のリポジトリで、2020-02-09 時点で 9 件の Security Alerts がレポートされていました。\r\n\r\n<img src=\"\" alt=\"security alerts\" title=\"security alerts\">\r\n\r\nいずれも package.lock.json に対して変更行われており、間接的に依存している参照の更新が必要です。\r\n\r\n## npm audit を確認\r\n\r\nnpm にも監査のコマンドがあったことを思い出し、状況を確認してみました。\r\n\r\n```ps\r\n> npm audit\r\n...\r\nfound 625 vulnerabilities (2 low, 7 moderate, 615 high, 1 critical) in 42979 scanned packages\r\n  run `npm audit fix` to fix 624 of them.\r\n  1 vulnerability requires semver-major dependency updates.\r\n```\r\n\r\n625 件。。。今後の課題にしようと思います。\r\n\r\n## 個々の PR を npm ci して確認\r\n\r\n`npm ci`コマンドにより、pacakge.lock.json を元に node_modules を再構築してくれるようでした。なので「個々の PR に対してローカルリポジトリ上で`npm ci`し、app の挙動に問題がなければ master へ merge する」という方法を試しました。\r\n\r\n```ps\r\n> npm ci\r\nnpm WARN prepare removing existing node_modules/ before installation\r\n...\r\nadded 1199 packages in 135.974s\r\n```\r\n\r\n作業開始時に node_modules は削除されると公式サイトに書いてありましたが、実行時にも警告が表示されました。\r\n\r\nvulnerabilities も着実に減少しました。\r\n\r\n```ps\r\ntar 適用時 = found 623 vulnerabilities (2 low, 7 moderate, 613 high, 1 critical) in 42979 scanned packages\r\nfstream 適用時 = found 622 vulnerabilities (2 low, 7 moderate, 612 high, 1 critical) in 42979 scanned packages\r\njs-yaml 適用時 = found 617 vulnerabilities (2 low, 4 moderate, 610 high, 1 critical) in 42979 scanned packages\r\nhandlebars 適用時 = found 616 vulnerabilities (2 low, 6 moderate, 608 high) in 42978 scanned packages\r\nlodash 適用時 = found 588 vulnerabilities (2 low, 7 moderate, 578 high, 1 critical) in 42979 scanned packages\r\nlodash.mergewith 適用時 = found 574 vulnerabilities (2 low, 3 moderate, 569 high) in 42978 scanned packages\r\nmixin-deep 適用時 = found 387 vulnerabilities (2 low, 3 moderate, 382 high) in 42978 scanned packages\r\n```\r\n\r\n残りは Angular のアップグレード後に確認しようと思いました。\r\n\r\n## 関連項目\r\n\r\n- [Configuring automated security updates](https://help.github.com/ja/github/managing-security-vulnerabilities/configuring-automated-security-updates)\r\n- [npm-ci](https://docs.npmjs.com/cli/ci.html)\r\n"}},{"docRef":"/todo","content":{"title":"Todo リスト","date":"2019-08-12","category":"todo","body":"\r\n\r\n## 記事ストック\r\n\r\n- [x] [angular-cli-ghpages](https://github.com/angular-schule/angular-cli-ghpages)のセットアップ\r\n- [ ] 開発マシンの構成を標準化\r\n- [ ] Azure DevOps の ssh 接続確認\r\n- [ ] SourceTree の設定その後\r\n- [ ] コード規約について\r\n  - [ ] C#\r\n  - [ ] Typescript\r\n  - [ ] Angular\r\n- [ ] Visual Studio Code の設定\r\n- [ ] Visual Studio の設定\r\n- [ ] Angular Markdown Notebook のエントリーページ\r\n- [ ] VSCode の git アクセス設定\r\n\r\n## サイトの更新\r\n\r\n- [x] Doc List 画面: loading bar 表示の bug 修正\r\n- [x] gist のコードを埋め込みできない問題\r\n- [ ] PWA 化\r\n- [ ] Angular Univarsal トライアル\r\n"}}]