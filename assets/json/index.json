[{"docRef":"/angular/angular-setup-ghpages","content":{"title":"angular-cli-ghpagesを利用する","date":"2019-08-12","category":"Angular","body":"\r\n\r\n## 実施した手順\r\n\r\nまず初めに[angular-cli-ghpagesのgithubリポジトリ](https://github.com/angular-schule/angular-cli-ghpages)を確認しました。\r\n\r\nPrerequisitesに`Angular project created via Angular CLI v8.3.0-next.0 or greate`と書かれているのを発見。うまくいかないかもしれないが、とりあえずAngular CLI v7系のまま設定を実施しました。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> ng add angular-cli-ghpages\r\nInstalling packages for tooling via npm.\r\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\\fsevents):\r\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\r\n+ angular-cli-ghpages@0.5.3\r\nadded 18 packages from 17 contributors and audited 42977 packages in 21.148s\r\nfound 607 vulnerabilities (3 moderate, 604 high)\r\n  run `npm audit fix` to fix them, or `npm audit` for details\r\nInstalled packages for tooling via npm.\r\nThe package that you are trying to add does not support schematics. You can try using a different version of the package or contact the package author to add ng-add support.\r\n```\r\n\r\n警告などが出ている（auditは今後の課題）が、今回は無視して進めます。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> ng build --prod --base-href \"https://takumura.github.io/tech-log/\"\r\n```\r\n\r\ndry-runによる予行でどのように動くか実験。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages --dry-run\r\n*** Dry-run: No changes are applied at all.\r\n*** Dry-run / SKIPPED: cleaning of the cache directory\r\n*** Dry-run / SKIPPED: copying of index.html to 404.html\r\n*** Dry-run / SKIPPED: publishing to \"C:\\Repos\\github\\tech-log\\Website\\ClientApp\\dist\" with the following options: { dir: 'C:\\\\Repos\\\\github\\\\tech-log\\\\Website\\\\ClientApp\\\\dist',\r\n  repo:\r\n   'undefined: current working directory (which must be a git repo in this case) will be used to commit & push',\r\n  message: 'Auto-generated commit',\r\n  branch: 'gh-pages',\r\n  user:\r\n   'undefined: local or gloabl git username & email properties will be taken',\r\n  noSilent: 'undefined: logging is in silent mode by default',\r\n  noDotfiles: 'undefined: dotfiles are included by default',\r\n  dryRun: true,\r\n  cname: 'undefined: no CNAME file will be created' }\r\n*** Successfully published!\r\n```\r\n\r\n問題なさそうなので本実行。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages\r\n```\r\n\r\n初回は`Permission denied (publickey)`エラーが発生してpushに失敗。[Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える](docs/env/git-ssh-configuration){.internal-link}の対応を実施してから再チャレンジ。\r\n\r\n```bash\r\nPS C:\\Repos\\github\\tech-log\\Website\\ClientApp> npx angular-cli-ghpages\r\n*** Successfully published!\r\n```\r\n\r\n無事成功。<https://takumura.github.io/tech-log/> にアクセスすると、見事にサイトが表示されていました。fetchでのjsonデータ取得や、ページ遷移なども問題なく動作しています。素晴らしい！\r\n\r\n## パブリッシュスクリプトの作成\r\n\r\nprodオプション付きのビルドを実行し、生成されたdistフォルダ以下をorigin/gh-pagesにpushするスクリプトを作成しました。\r\n\r\n### publish-to-ghpages.ps1\r\n\r\n```bash\r\nng build --prod --base-href \"https://takumura.github.io/tech-log/\"\r\nnpx angular-cli-ghpages\r\n```\r\n\r\n## 作業時に参照した情報\r\n\r\n-   [Deploying an Angular App to Github Pages](https://alligator.io/angular/deploying-angular-app-github-pages/)\r\n-   [Angular-CLIで作成したアプリをGithub Pagesにデプロイする](https://prokatsu.com/angular-cli_github-pages_deploy/)\r\n-   [AngularのプロジェクトをGithub Pagesに公開する](https://choco14t.hatenablog.com/entry/2018/07/07/144504)\r\n"}},{"docRef":"/env/git-ssh-configuration","content":{"title":"Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える","date":"2019-08-15","category":"環境設定","tag":["git","vscode","openssh","windows10"],"body":"## 経緯\r\n\r\n-   これまではSourceTreeを利用してGithub, Bitbucketのリモートリポジトリを操作していました\r\n-   接続にはsshを利用し、SourceTreeに付属のPuttyおよびPageantで鍵の運用をしていました\r\n-   [angular-cli-ghpagesを利用する](docs/angular/angular-setup-ghpages){.internal-link}の作業で、origin/gh-pagesにpushする処理でエラーが発生\r\n-   VSCodeをPutty(Pageant)を連携する方法を調べたが見つからず、ssh clientの利用方法を見直す必要がありました\r\n\r\n## 環境\r\n\r\n-   Windows 10 May 2019 Update(バージョン1903)\r\n-   SourceTree 3.1.3\r\n\r\n## 実施した手順\r\n\r\nまず初めに、VSCodeからssh接続でremoteにpushする方法について、google検索で情報収集しました。Puttyを利用している記事はヒットせず、openssh clientの設定を行う記事が大半でした。\r\n\r\n開発環境はWindows 10 May 2019 Update(バージョン1903)が適用済みで、特に設定不要でssh clientが利用可能になっていました。なのでこれを利用することにします。\r\n\r\n途中までSourceTreeで作業をしていたので、鍵の作成や公開鍵のgithubへの登録は完了済みでした。なのでssh clientに秘密鍵を登録して使えるようにします。\r\n\r\n### OpenSSH Authentication Agentサービスの設定変更\r\n\r\nOpenSSH Authentication Agentサービスは無効状態でした。サービスを起動し、設定を自動起動に変更しました。\r\n\r\n### ppkファイルからOpenSSH形式の秘密鍵を生成\r\n\r\nPutty(Pageant)が利用している秘密鍵(.ppk)はOpenSSHと互換性のない独自形式です。ssh clientで利用するためにはOpenSSH形式に変換してあげる必要があります。\r\n\r\n1.  SourceTreeのメニューから`SSH キーの生成/インポート`を選択\\\r\n    <img src=\"assets/images/git-ssh-configuration/git-ssh-configuration-1.png\" alt=\"puttygen.exe\" title=\"puttygen.exe\">\r\n\r\n2.  Loadボタンを押して、githubの秘密鍵(.ppk)を読み込み、メニュの`Conversions` > `Export OpenSSH key`を選択。OpenSSh形式の秘密鍵: `id_rsa`を生成\r\n3.  作成した`id_ras`ファイルを`c:\\Users\\<username>\\.ssh`フォルダに配置\r\n\r\n1.で実行されるツール(puttygen.exe)は、私の環境では`c:\\Users\\<username>\\AppData\\Local\\SourceTree\\app-3.1.3\\tools\\putty\\puttygen.exe`にありました。\r\n\r\n`c:\\Users\\<username>\\.ssh`も存在していましたが、中身は空でした。\r\n\r\n### ssh-agentに秘密鍵を登録\r\n\r\n以下のコマンドを実行します。\r\n\r\n```cmd\r\n> cd c:\\Users\\<username>\\.ssh\r\n> ssh-add id_rsa\r\n```\r\n\r\nパスフレーズを聞かれるので、正しく入力すると登録が完了しました。\r\n\r\nこれで、gitコマンドを使ってリモートリポジトリを操作できるようになりました。\r\n\r\n## SourceTreeの併用について\r\n\r\nこれまで通りSourceTreeも併用していきたいので、鍵の管理フォルダを`c:\\Users\\<username>\\.ssh`に変更しました。\r\n\r\nそして、これまで鍵長2048でキーを作成していることに気が付いたので、鍵長4096のキーにすべて置き換えることにしました。\r\n\r\nBitbucket用、Github用に別々のキーを作成して管理していましたが、今回はAzure DevOpsを含めた3つのgitリポジトリへのアクセスを、共通した1つの鍵で管理することにしました。\r\n\r\n```cmd\r\n.ssh> dir\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----       2019/08/15     14:11           3311 id_rsa\r\n-a----       2019/08/15     14:10           2719 id_rsa.ppk\r\n-a----       2019/08/15     15:13            739 id_rsa.pub\r\n-a----       2019/08/15     15:49           4377 known_hosts\r\n```\r\n\r\n## 作業時に参照した情報\r\n\r\n-   [PuTTYを卒業してWindows 10標準のssh client（ベータ）に切り替えた](http://www.freia.jp/taka/blog/windows-native-ssh-client/index.html)\r\n-   [Use SSH key authentication](https://docs.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops)"}},{"docRef":"/env/vscode-settings-sync","content":{"title":"VSCode: Settings Syncで環境設定を共有する","date":"2019-08-31","category":"環境設定","tag":["vscode","git","settings.json"],"body":"\r\n\r\n拡張機能: `Settings Sync`を導入することで、VSCodeの設定、スニペット、テーマ、ファイルアイコン、キーバインディング、ワークスペース、拡張機能を複数のマシンで同期できます。\r\n\r\nデータはgistで共有されることになるので、設定のバックアップにもなりそうです。\r\n\r\n## 手順\r\n\r\nまずはSettings Syncの拡張機能画面で、設定方法の解説を確認。\r\n\r\n```plaintext\r\nShortcuts\r\n\t1. Upload Key : Shift + Alt + U\r\n\t2. Download Key : Shift + Alt + D\r\n\r\nConfigure Settings Sync\r\n\tSettings Sync Configuration page will be opened automatically on code start and requires two things to setup:\r\n\r\n\t1. GitHub Token\r\n\t2. GitHub Gist Id\r\n\r\n\tGitHub Token needs to be retrived by your GitHub account while Settings Sync creates GIST if you are first time user.\r\n\r\n\tFollowing are the steps you need to perform to configure.\r\n\r\n\t- Click on Login with GitHub .\r\n\t- Login GitHub on Browser and close the browser tab once you get Success message.\r\n\t- If you are using Settings Sync first time GIST will be created automatically when you upload your settings.\r\n\t- If you already have GitHub Gist, new window will be opened to allow you to select the GitHub Gist or Skip to create new Gist.\r\n```\r\n\r\n  \\\r\n特に気になる記述や疑問がなかったので、拡張機能: `Settings Sync`をインストール。完了すると`Welcome to Settings Sync`のタブが表示されたので、`LOGIN WITH GITHUB`を選択。\r\n\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-1.png\" alt=\"Welcome to Settings Sync\" title=\"Welcome to Settings Sync\">\r\n\r\n`Authorize Settings Sync`のページがブラウザで表示されたので、`Authorize shanalikhan`する。\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-2.png\" alt=\"Github OAuth Authorization\" title=\"Github OAuth Authorization\">\r\n\r\n設定完了の表示に切り替わり、準備が完了しました。\r\n\r\n`Shift + Alt + U` もしくは、コマンドパレットから`Sync: アップデート・アップロードの設定`を選択すると、環境設定情報がGistにアップロードされました。\r\n\r\nアップロード後、変更なしにもう一度アップロードしようとしたところ、確認ダイアログが表示されました。親切ですね。\r\n<img src=\"assets/images/vscode-settings-sync/vscode-settings-sync-3.png\" alt=\"Dialog\" title=\"Dialog\">\r\n\r\n## 自動作成されたgist\r\n\r\nSettings Syncは`couldSettings`という名前のシークレットgistを自動的に作成していました。手動設定を行えば、自分で作成したgistに環境設定情報をアップロードさせることもできるようです。\r\n\r\ngistには、以下の5つのファイルが登録されていました。\r\n\r\n-   cloudSettings\r\n-   extensions.json\r\n-   keybindings.json\r\n-   keybindingsMac.json\r\n-   settings.json\r\n\r\n<script src=\"https://gist.github.com/takumura/bbff68078afb2d0846773965d1678c7c.js\"></script>\r\n"}},{"docRef":"/todo","content":{"title":"Todo リスト","date":"2019-08-12","category":"todo","body":"\r\n\r\n## 記事ストック\r\n\r\n-   [x] [angular-cli-ghpages](https://github.com/angular-schule/angular-cli-ghpages)のセットアップ\r\n-   [ ] 開発マシンの構成を標準化\r\n-   [ ] Azure DevOpsのssh接続確認\r\n-   [ ] コード規約について\r\n    -   [ ] C#\r\n    -   [ ] Typescript\r\n    -   [ ] Angular\r\n-   [ ] Visual Studio Codeの設定\r\n-   [ ] Visual Studioの設定\r\n-   [ ] Angular Markdown Notebookのエントリーページ\r\n\r\n-   [ ] VSCodeのgitアクセス設定\r\n\r\n## サイトの更新\r\n\r\n-   [x] Doc List画面: loading bar表示のbug修正\r\n-   [ ] PWA化\r\n-   [ ] Angular Univarsalトライアル\r\n"}}]