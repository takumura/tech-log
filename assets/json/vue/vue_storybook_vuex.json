{"title":"vuexを利用したコンポーネントをStorybookで扱う","date":"2020-10-25","category":"Vue","tag":["vue","nuxtjs","storybook","vuex"],"body":"\r\n\r\nNuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。component毎にstoryを作ってテストを行い、Nuxt側でそれをViewにまとめていこうと思います。\r\n\r\nデータはvuexのstoreからくるので、storybookとvuexの連携が必要になりました。\r\n\r\n## ワークログ\r\n\r\nstorybookの構成として、`preview.js`にvuexを利用するための設定が必要なのですが、[前回の時点](#todo)で既に含めていました。\r\n\r\n``` ts\r\n...\r\nimport Vuex from 'vuex'\r\n...\r\nVue.use(Vuex)\r\n...\r\n```\r\n\r\n動作確認のため、ドラフトのtask storeを作成します。getterだけの簡単なモノにしました。\r\n\r\n``` ts\r\nimport { GetterTree } from 'vuex'\r\nimport { RootState } from '~/store'\r\n\r\nexport interface Task {\r\n  name: string\r\n  done: boolean\r\n}\r\n\r\nexport interface TaskState {\r\n  list: Task[]\r\n}\r\n\r\nexport const state = () => ({\r\n  list: [],\r\n})\r\n\r\nexport const getters: GetterTree<TaskState, RootState> = {\r\n  getTasks: (state: TaskState) => {\r\n    return state.list\r\n  },\r\n}\r\n```\r\n\r\n同様にtask componentを作成。\r\n\r\n``` ts\r\n<template>\r\n  <v-list>\r\n    <v-list-item v-for=\"task in getTasks\" :key=\"task.name\">\r\n      <v-list-item-content>\r\n        <div>\r\n          <span>{{ task.name }}</span>\r\n          <v-btn small depressed color=\"primary\">start</v-btn>\r\n        </div>\r\n      </v-list-item-content>\r\n    </v-list-item>\r\n  </v-list>\r\n</template>\r\n<script>\r\nimport { mapMutations, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  computed: {\r\n    ...mapGetters({\r\n      getTasks: 'tasks/getTasks',\r\n    }),\r\n  },\r\n}\r\n</script>\r\n<style></style>\r\n```\r\n\r\nこのcomponentのstoryは以下のような記述で動くようになりました。テスト用のmock storeがポイントだと思います。今後mock storeが煩雑に感じてきたら、全コンポーネント共通の汎用mock storeを作ることになりそうです。\r\n\r\n``` ts\r\nimport Task from '../../components/Task'\r\nimport Vuex from 'vuex'\r\n\r\nexport default {\r\n  title: 'Components/Task',\r\n  component: Task,\r\n  argTypes: {},\r\n}\r\n\r\n// テスト用のmock store\r\nconst store = new Vuex.Store({\r\n  modules: {\r\n    tasks: {\r\n      namespaced: true,\r\n      state: {\r\n        list: [\r\n          { name: 'task1', done: false },\r\n          { name: 'task2', done: true },\r\n          { name: 'task3', done: true },\r\n        ],\r\n      },\r\n      getters: {\r\n        getTasks: (state) => {\r\n          return state.list\r\n        },\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\nconst Template = (args, { argTypes }) => ({\r\n  props: Object.keys(argTypes),\r\n  components: { Task },\r\n  template: '<task />',\r\n  store,\r\n})\r\n\r\nexport const TaskComponent = Template.bind({})\r\n```\r\n\r\n## 関連項目\r\n\r\n- [実践StorybookでVuexに立ち向かう](https://medium.com/studist-dev/storybook-with-vuex-7084bea6b509)\r\n- [【Nuxt.js】VuexをStorybookで使う方法](https://sawami.net/2019/11/01/tech/nuxt-js-vuex-and-storybook/)\r\n"}