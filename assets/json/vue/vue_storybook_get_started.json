{"title":"NuxtJSにStorybookを導入する","date":"2021-01-04","category":"Vue","tag":["vue","nuxtjs","storybook"],"body":"\r\n\r\nNuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。まずは NuxtJS(Vue.js)に慣れるためのサンプル Todo アプリを作ります。Storybook を導入して、コンポーネントカタログも併せて作ってみます。\r\n\r\n## 環境確認\r\n\r\n- エディタ: VSCode\r\n- nodejs: v12.16.0\r\n- yarn: 1.22.4\r\n\r\n## ワークログ\r\n\r\n### yarn のアップグレード\r\n\r\n```ps\r\n> yarn -v\r\n1.22.0\r\n\r\n> yarn policies set-version\r\nResolving latest to a url...\r\nDownloading https://github.com/yarnpkg/yarn/releases/download/v1.22.4/yarn-1.22.4.js...\r\nSaving it into C:\\Users\\takum\\.yarn\\releases\\yarn-1.22.4.js...\r\nUpdating C:\\Users\\takum/.yarnrc...\r\nDone!\r\n\r\n> yarn -v\r\n1.22.4\r\n```\r\n\r\n### NuxtJS プロジェクトの新規作成\r\n\r\n`yarn create nuxt-app nuxt-components-storybook`により`create-nuxt-app`モジュールが global に install され、プロジェクト生成が行われました。\r\n\r\nデフォルトの設定でlinting toolなどお好みで選択できます。何度かプロジェクトを作って試してみた結果、以下の設定に落ち着きました。\r\n\r\n```ps\r\n> yarn create nuxt-app nuxt-components-storybook\r\n\r\n> yarn create nuxt-app nuxt-components-storybook\r\nyarn create v1.22.4\r\n[1/4] Resolving packages...\r\n[2/4] Fetching packages...\r\n[3/4] Linking dependencies...\r\n[4/4] Building fresh packages...\r\n\r\nsuccess Installed \"create-nuxt-app@3.2.0\" with binaries:\r\n      - create-nuxt-app\r\n\r\ncreate-nuxt-app v3.2.0\r\n✨  Generating Nuxt.js project in nuxt-components-storybook\r\n? Project name: nuxt-components-storybook\r\n? Programming language: TypeScript\r\n? Package manager: Yarn\r\n? UI framework: Vuetify.js\r\n? Nuxt.js modules: (Press <space> to select, <a> to toggle all, <i> to invert selection)\r\n? Linting tools: Prettier\r\n? Testing framework: Jest\r\n? Rendering mode: Single Page App\r\n? Deployment target: Static (Static/JAMStack hosting)\r\n? Development tools:\r\n\r\nyarn install v1.22.4\r\ninfo No lockfile found.\r\n\r\n🎉  Successfully created project nuxt-components-storybook\r\n\r\n  To get started:\r\n\r\n        cd nuxt-components-storybook\r\n        yarn dev\r\n\r\n  To build & start for production:\r\n\r\n        cd nuxt-components-storybook\r\n        yarn build\r\n        yarn start\r\n\r\n  To test:\r\n\r\n        cd nuxt-components-storybook\r\n        yarn test\r\n\r\n\r\n  For TypeScript users.\r\n\r\n  See : https://typescript.nuxtjs.org/cookbook/components/\r\nDone in 502.43s.\r\n```\r\n\r\n### 最初の動作確認\r\n\r\ninstall 完了時メッセージに従い`yarn dev`を実行すると、localhost:3000 でサイトが起動しました。\r\n\r\n```ps\r\n> yarn dev\r\nyarn run v1.22.4\r\n$ nuxt-ts\r\n\r\n   ╭───────────────────────────────────────╮\r\n   │                                       │\r\n   │   Nuxt.js @ v2.14.1                   │\r\n   │                                       │\r\n   │   ▸ Environment: development          │\r\n   │   ▸ Rendering:   client-side          │\r\n   │   ▸ Target:      static               │\r\n   │                                       │\r\n   │   Listening: http://localhost:3000/   │\r\n   │                                       │\r\n   ╰───────────────────────────────────────╯\r\n\r\ni Preparing project for development                 12:44:00\r\ni Initial build may take a while                    12:44:00\r\n√ Builder initialized                               12:44:00\r\n√ Nuxt files generated                              12:44:01\r\n\r\n√ Client\r\n  Compiled successfully in 20.95s\r\n\r\ni Waiting for file changes                          12:44:32\r\ni Memory usage: 258 MB (RSS: 355 MB)                12:44:32\r\ni Listening on: http://localhost:3000/              12:44:32\r\nNo issues found.                                    12:44:32\r\n```\r\n\r\n### Storybook の導入\r\n\r\nstorybook cliを利用することで、各フレームワーク/ツール向けの初期設定ができるようです。`@storybook/cli`をdevDependencies に追加、初期化コマンドを実行します。\r\n\r\n```ps\r\nyarn add --dev @storybook/cli\r\nyarn sb init --type vue\r\n```\r\n\r\nプロジェクト直下に`.storybook`フォルダと`stories`フォルダが作成され、`.storybook/main.js`といくつかのサンプルストーリーも作成されました。project.json には storybook 起動用 script が追加されており、実行するとデフォルトブラウザが起動し、localhost:6006 で storybook のサイトが表示されました。\r\n\r\n```ps\r\nyarn storybook\r\n```\r\n\r\n### vuetify用の設定を追加する\r\n\r\n[Nuxt + Vuetify の構成で Storybook を導入する](https://almond.milk200.cc/blog/2020/06/01/storybook.html)の設定を参考にして、`preview.js`と`webpack.config.js`を調整しました。\r\n\r\n```js\r\n// .storybook/webpack.config.js\r\nconst path = require('path')\r\nconst rootPath = path.resolve(__dirname, '../')\r\n\r\nmodule.exports = ({ config }) => {\r\n  config.module.rules.push({\r\n    test: /\\.s(c|a)ss$/,\r\n    use: [\r\n      'style-loader',\r\n      'css-loader',\r\n      {\r\n        loader: 'sass-loader',\r\n      },\r\n    ],\r\n  })\r\n\r\n  config.resolve.alias['~'] = rootPath\r\n  config.resolve.alias['@'] = rootPath\r\n\r\n  return config\r\n}\r\n```\r\n\r\n```js\r\n// .storybook/preview.js\r\nimport { addDecorator } from '@storybook/vue'\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nimport Vuetify from 'vuetify'\r\nimport { VApp, VContent } from 'vuetify/lib'\r\nimport colors from 'vuetify/es5/util/colors'\r\nimport 'vuetify/dist/vuetify.min.css'\r\n\r\nVue.use(Vuex)\r\nconst vuetifyOptions = {}\r\n\r\nVue.use(Vuetify, {\r\n  iconfont: 'mdi',\r\n  customVariables: ['~/assets/variables.scss'],\r\n  theme: {\r\n    dark: true,\r\n    themes: {\r\n      light: {\r\n        primary: colors.purple,\r\n        secondary: colors.grey.darken1,\r\n        accent: colors.shades.black,\r\n        error: colors.red.accent3,\r\n      },\r\n      dark: {\r\n        primary: colors.blue.darken2,\r\n        accent: colors.grey.darken3,\r\n        secondary: colors.amber.darken3,\r\n        info: colors.teal.lighten1,\r\n        warning: colors.amber.base,\r\n        error: colors.deepOrange.accent4,\r\n        success: colors.green.accent3,\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\naddDecorator(() => ({\r\n  vuetify: new Vuetify(vuetifyOptions),\r\n  components: { VApp, VContent },\r\n  template: `<v-app><v-content><story/></v-content></v-app>`,\r\n}))\r\n\r\nexport const parameters = {\r\n  actions: { argTypesRegex: '^on[A-Z].*' },\r\n}\r\n```\r\n\r\n`Logo.vue`と`WeatherCard.vue`（テスト用に[Nuxt + Vuetify の構成で Storybook を導入する](https://almond.milk200.cc/blog/2020/06/01/storybook.html)のcomponentを借用）向けにストーリーを作成しました。\r\n\r\n``` js\r\n// Logo.stories.js\r\nimport { storiesOf } from '@storybook/vue'\r\nimport Logo from '@/components/Logo.vue'\r\n\r\nstoriesOf('Components/Default', module).add(\r\n  'Logo',\r\n  () => ({\r\n    components: { Logo },\r\n    template: `\r\n    <logo />\r\n`,\r\n  }),\r\n  {\r\n    info: true,\r\n    notes: `\r\n        # Logo\r\n        Nuxt.js default logo\r\n      `,\r\n  },\r\n)\r\n```\r\n\r\n``` js\r\n// WeatherCard.stories.js\r\nimport WeatherCard from '../components/WeatherCard.vue'\r\n\r\nexport default {\r\n  title: 'Components/Vuetify',\r\n  component: WeatherCard,\r\n}\r\n\r\nconst Template = (args, { argTypes }) => ({\r\n  props: Object.keys(argTypes),\r\n  components: { WeatherCard },\r\n  template: '<weather-card :day-of-the-week-labels=\"dayOfTheWeekLabels\"/>',\r\n})\r\n\r\nexport const WeatherCardComponent = Template.bind({})\r\nWeatherCardComponent.args = {\r\n  dayOfTheWeekLabels: ['SU', 'MO', 'TU', 'WED', 'TH', 'FR', 'SA'],\r\n}\r\n```\r\n\r\n`WeatherCard.vue`で利用している[Material Design Icon](https://material.io/resources/icons/?style=baseline)が正しく表示されなかったので、`.storybook/preview-head.html`を追加。\r\n\r\n``` html\r\n<!-- .storybook/preview-head.html -->\r\n<link\r\n  href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900&display=swap\"\r\n  rel=\"stylesheet\"\r\n/>\r\n<link\r\n  href=\"https://cdn.jsdelivr.net/npm/@mdi/font@3.x/css/materialdesignicons.min.css\"\r\n  rel=\"stylesheet\"\r\n/>\r\n```\r\n\r\n## 課題\r\n\r\n### lint/formatについて\r\n\r\nこれまで Prettier をフォーマッター/リンターとして使ってきたのですが、vue のおすすめフォーマット設定がよくわかりませんでした。eslint + prettierのようなのですが、VSCode で一番人気がある vue 用拡張機能[Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)の標準フォーマッターはPrettier になっていて、eslintの推奨と競合するようになってしまいました。\r\n\r\n各configを調整して、eslintとprettierを共存させる設定について解説しているサイトを調べたりもしましたが、私自身はeslintへのこだわりが無いのでprettierにすべてお任せするようにしました。しばらくこのまま開発を進め、問題点が出てきたらそのとき考えようと思います。\r\n\r\n### vscodeのformatter設定について\r\n\r\nangularとvueのプロジェクトをVSCodeで開発するようになると、VSCodeのグローバル設定で全てをまかなうのは難しいように感じました。グローバルの設定は最低限の共通事項に留め、各種プロジェクトに必要な設定を個別に適用した方が良さそうです。\r\n\r\nなのでVSCodeの設定を、共通 / angular用 / vue用で分割する予定です。\r\n\r\n## 関連項目\r\n\r\n- [Vue.js official](https://vuejs.org/)\r\n- [awesome-vue - Github](https://github.com/vuejs/awesome-vue)\r\n- [Vue CLI official](https://cli.vuejs.org/)\r\n- [How to use Vue.js with Electron and Vuex](https://www.digitalocean.com/community/tutorials/vuejs-vue-electron)\r\n- [Nuxt.js official](https://nuxtjs.org/)\r\n- [ESLint と Prettier - NuxtJS](https://ja.nuxtjs.org/guide/development-tools/#eslint-%E3%81%A8-prettier)\r\n- [An (almost) comprehensive guide on using Storybook with Nuxt.js](https://medium.com/js-dojo/a-guide-on-using-storybook-with-nuxt-js-1e0018ec51c9)\r\n- [Storybook for Vue](https://storybook.js.org/docs/guides/guide-vue/)\r\n- [Nuxt + Vuetify の構成で Storybook を導入する](https://almond.milk200.cc/blog/2020/06/01/storybook.html)\r\n- [Story rendering - Storybook](https://storybook.js.org/docs/react/configure/story-rendering#adding-to-head)\r\n"}