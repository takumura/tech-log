{"title":"NuxtJS + Electronのアプリ開発環境を構築する","date":"2021-05-07","category":"Vue","tag":["vue","nuxtjs","electron"],"body":"NuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。Vueに少し慣れてきたので、次にElectronとVueの組み合わせについて学んでいきます。\r\n\r\n## 環境確認\r\n\r\n- エディタ: VSCode\r\n- nodejs: v12.16.0\r\n- yarn: 1.22.4\r\n\r\n## ワークログ\r\n\r\nボイラープレート的なプロジェクトで、[electron-nuxt](https://github.com/michalzaq12/electron-nuxt)と[nuxtron](https://github.com/saltyshiomix/nuxtron)というのを見つけましたが、今回は勉強も兼ねて一から構築してみることにしました。\r\n\r\n### NuxtJS プロジェクトの新規作成\r\n\r\n前回同様、`yarn create nuxt-app`コマンドにてプロジェクトを生成します。ただし今回はLinting tools全部盛りで試してみます。\r\n\r\n``` ps\r\n> yarn create nuxt-app nuxt-electron-example\r\nyarn create v1.22.4\r\n[2/4] Fetching packages...\r\n[3/4] Linking dependencies...\r\n[4/4] Building fresh packages...\r\n\r\nwarning Your current version of Yarn is out of date. The latest version is \"1.22.5\", while you're on \"1.22.4\".\r\nsuccess Installed \"create-nuxt-app@3.4.0\" with binaries:\r\n      - create-nuxt-app\r\n\r\ncreate-nuxt-app v3.4.0\r\n✨  Generating Nuxt.js project in nuxt-electron-example\r\n? Project name: nuxt-electron-example\r\n? Programming language: TypeScript\r\n? Package manager: Yarn\r\n? UI framework: Vuetify.js\r\n? Nuxt.js modules: (Press <space> to select, <a> to toggle all, <i> to invert selection)\r\n? Linting tools: ESLint, Prettier, Lint staged files, StyleLint, Commitlint\r\n? Testing framework: Jest\r\n? Rendering mode: Single Page App\r\n? Deployment target: Static (Static/JAMStack hosting)\r\n? Development tools: (Press <space> to select, <a> to toggle all, <i> to invert selection)\r\n? Continuous integration: None\r\n? Version control system: Git\r\n\r\nyarn install v1.22.4\r\ninfo No lockfile found.\r\n\r\nyarn run v1.22.4\r\n$ eslint --ext .js,.vue --ignore-path .gitignore . --fix\r\nDone in 28.71s.\r\n\r\nyarn run v1.22.4\r\n$ stylelint **/*.{vue,css} --ignore-path .gitignore --fix\r\nDone in 8.22s.\r\n\r\n�🎉  Successfully created project nuxt-electron-example\r\n\r\n  To get started:\r\n\r\n        cd nuxt-electron-example\r\n        yarn dev\r\n\r\n  To build & start for production:\r\n\r\n        cd nuxt-electron-example\r\n        yarn build\r\n        yarn start\r\n\r\n  To test:\r\n\r\n        cd nuxt-electron-example\r\n        yarn test\r\n\r\n\r\n  For TypeScript users.\r\n\r\n  See : https://typescript.nuxtjs.org/cookbook/components/\r\nDone in 8116.40s.\r\n```\r\n\r\nビルド完了後に`yarn dev`で動作確認をしたところ問題なく実行できました。\r\n\r\n### NuxtJSのソースをsrc\\renderer以下に移動\r\n\r\n[この記事](https://qiita.com/282Haniwa/items/a3b0a7d3c622ad82ac8d#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B)を参考に、フォルダ構成を変更しました。\r\n\r\nNuxtJSに必要なconfigファイルは`.babelrc`、`nuxt.config.js`、`tsconfig.json`の3つで、それ以外はトップフォルダのまま移動不要でした。ただしファイル場所が変わったためpackage.jsonのscripts記述は更新が必要でした。\r\n\r\n``` json\r\n// package.json 抜粋\r\n{\r\n  \"name\": \"nuxt-electron-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev:renderer\": \"nuxt-ts src/renderer\",\r\n    \"build:renderer\": \"nuxt-ts build src/renderer\",\r\n    \"generate:renderer\": \"nuxt-ts generate src/renderer\"\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n### Electronの導入\r\n\r\n必要なモジュールをyarnコマンドで追加しました。\r\n\r\n``` ps\r\n> yarn add --dev electron electron-builder electron-devtools-installer\r\n> yarn add --dev cross-env\r\n```\r\n\r\n- [electron](https://github.com/electron/electron#readme) = Electron本体\r\n- [electron-builder](https://github.com/electron-userland/electron-builder#readme) = Electronのpackage & buildツール\r\n- [electron-devtools-installer](https://github.com/MarshallOfSound/electron-devtools-installer) = Electron用のDevTool拡張機能インストーラー\r\n- [cross-env](https://github.com/kentcdodds/cross-env#readme) = node script実行時の環境変数を設定するツール\r\n\r\n次にElectronのメイン処理を行う`index.ts`を`src/main`以下に作成しました。\r\n\r\n後でわかったことなのですが、`process.env.NODE_ENV === 'development'`の場合、electron実行時に`nuxt.ready()`で非同期処理の完了を待たないと、vuexのstoreが使用できない（webpack処理が完了していないのかstoreのjsが一切見当たらない状態でした）問題がありました。また`process.env.NODE_ENV === 'development'`の場合、`nuxt.ready()`で非同期処理の完了を待ってしまうといつまでもwindowが表示されませんでした。\r\n\r\n試行錯誤した結果、以下のような実装になりました\r\n\r\n``` ts\r\n// index.ts\r\nimport nuxtConfig from '../renderer/nuxt.config'\r\nconst http = require('http')\r\nconst path = require('path')\r\nconst { Nuxt, Builder } = require('nuxt')\r\nconst electron = require('electron')\r\n\r\n// @ts-ignore\r\nnuxtConfig.rootDir = path.resolve('src/renderer')\r\n// @ts-ignore\r\nconst isDev = nuxtConfig.dev\r\nlet _NUXT_URL_ = ''\r\n\r\nconst nuxt = new Nuxt(nuxtConfig)\r\nif (isDev) {\r\n  nuxt.ready().then((n: { render: any }) => {\r\n    const builder = new Builder(n)\r\n    const server = http.createServer(n.render)\r\n\r\n    builder.build().catch((err: any) => {\r\n      console.error(err)\r\n      process.exit(1)\r\n    })\r\n    server.listen()\r\n    _NUXT_URL_ = `http://localhost:${server.address().port}`\r\n    console.log(`Nuxt working on ${_NUXT_URL_}`)\r\n\r\n    createElectronApp()\r\n  })\r\n} else {\r\n  _NUXT_URL_ = 'file://' + path.resolve(__dirname, '../../dist/nuxt-build/index.html')\r\n  createElectronApp()\r\n}\r\n\r\nfunction createElectronApp() {\r\n  let win: any = null\r\n  const app = electron.app\r\n  const newWin = () => {\r\n    win = new electron.BrowserWindow({\r\n      width: 1400,\r\n      height: 1000,\r\n      webPreferences: {\r\n        nodeIntegration: false,\r\n        contextIsolation: false,\r\n        preload: path.resolve(path.join(__dirname, 'preload.js')),\r\n        webSecurity: false,\r\n      },\r\n    })\r\n\r\n    win.on('closed', () => (win = null))\r\n\r\n    if (isDev) {\r\n      const { default: installExtension, VUEJS_DEVTOOLS } = require('electron-devtools-installer')\r\n\r\n      installExtension(VUEJS_DEVTOOLS.id)\r\n        .then((name: any) => {\r\n          console.log(`Added Extension:  ${name}`)\r\n          win.webContents.openDevTools()\r\n        })\r\n        .catch((err: any) => console.log('An error occurred: ', err))\r\n\r\n      const pollServer = () => {\r\n        http\r\n          .get(_NUXT_URL_, (res: any) => {\r\n            if (res.statusCode === 200) {\r\n              win.loadURL(_NUXT_URL_)\r\n            } else {\r\n              console.log('restart poolServer')\r\n              setTimeout(pollServer, 300)\r\n            }\r\n          })\r\n          .on('error', pollServer)\r\n      }\r\n\r\n      pollServer()\r\n    } else {\r\n      return win.loadURL(_NUXT_URL_)\r\n    }\r\n  }\r\n\r\n  app.on('ready', newWin)\r\n  app.on('window-all-closed', () => app.quit())\r\n  app.on('activate', () => win === null && newWin())\r\n}\r\n```\r\n\r\n記述中いくつかのエラーが発生したため、`.eslintrc.js`を修正しました。\r\n\r\n1. windows環境特有の改行に関するエラー: [このissue](https://github.com/prettier/eslint-plugin-prettier/issues/211)を参照\r\n1. `console`の利用不可エラー: [no-console](https://eslint.org/docs/rules/no-console)エラーを無視するように変更\r\n1. 一行の長さを120文字に変更。\r\n\r\n``` diff\r\n// .eslintrc.js\r\nmodule.exports = {\r\n  root: true,\r\n  env: {\r\n    browser: true,\r\n    node: true,\r\n  },\r\n  extends: [\r\n    '@nuxtjs/eslint-config-typescript',\r\n    'prettier',\r\n    'prettier/vue',\r\n    'plugin:prettier/recommended',\r\n    'plugin:nuxt/recommended',\r\n  ],\r\n  plugins: ['prettier'],\r\n  // add your custom rules here\r\n-  rules: {},\r\n+  rules: {\r\n+    'no-console': 'off',\r\n+    'prettier/prettier': ['error', { endOfLine: 'auto', printWidth: 120 }],\r\n+  },\r\n}\r\n```\r\n\r\nelectronのwindow起動時に`preload.ts`を指定しているので、`index.ts`と同じフォルダに空のファイル配置しました。\r\n\r\n``` ts\r\n  win = new electron.BrowserWindow({\r\n    width: 1400,\r\n    height: 1000,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: false,\r\n      preload: path.resolve(path.join(__dirname, 'preload.js')),\r\n      webSecurity: false,\r\n    },\r\n  })\r\n```\r\n\r\n`nuxt.config.js`も併せて修正が必要でした。\r\n\r\n``` diff\r\nimport colors from 'vuetify/es5/util/colors'\r\n\r\n+ const isProduction = process.env.NODE_ENV === 'production'\r\n+ const isDev = process.env.NODE_ENV === 'development'\r\n+\r\nexport default {\r\n  // Disable server-side rendering (https://go.nuxtjs.dev/ssr-mode)\r\n  ssr: false,\r\n\r\n  // Target (https://go.nuxtjs.dev/config-target)\r\n  target: 'static',\r\n\r\n  // Global page headers (https://go.nuxtjs.dev/config-head)\r\n  head: {\r\n    titleTemplate: '%s - nuxt-electron-example',\r\n    title: 'nuxt-electron-example',\r\n    meta: [\r\n      { charset: 'utf-8' },\r\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\r\n      { hid: 'description', name: 'description', content: '' },\r\n    ],\r\n    link: [{ rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }],\r\n  },\r\n\r\n  // Global CSS (https://go.nuxtjs.dev/config-css)\r\n  css: [],\r\n\r\n  // Plugins to run before rendering page (https://go.nuxtjs.dev/config-plugins)\r\n  plugins: [],\r\n\r\n  // Auto import components (https://go.nuxtjs.dev/config-components)\r\n  components: true,\r\n\r\n  // Modules for dev and build (recommended) (https://go.nuxtjs.dev/config-modules)\r\n  buildModules: [\r\n    // https://go.nuxtjs.dev/typescript\r\n    '@nuxt/typescript-build',\r\n    // https://go.nuxtjs.dev/stylelint\r\n    '@nuxtjs/stylelint-module',\r\n    // https://go.nuxtjs.dev/vuetify\r\n    '@nuxtjs/vuetify',\r\n  ],\r\n\r\n  // Modules (https://go.nuxtjs.dev/config-modules)\r\n  modules: [],\r\n\r\n  // Vuetify module configuration (https://go.nuxtjs.dev/config-vuetify)\r\n  vuetify: {\r\n    customVariables: ['~/assets/variables.scss'],\r\n    theme: {\r\n      dark: true,\r\n      themes: {\r\n        dark: {\r\n          primary: colors.blue.darken2,\r\n          accent: colors.grey.darken3,\r\n          secondary: colors.amber.darken3,\r\n          info: colors.teal.lighten1,\r\n          warning: colors.amber.base,\r\n          error: colors.deepOrange.accent4,\r\n          success: colors.green.accent3,\r\n        },\r\n      },\r\n    },\r\n  },\r\n\r\n+  dev: isDev,\r\n+  router: {\r\n+\r\n+    mode: 'hash',\r\n+  },\r\n  // Build Configuration (https://go.nuxtjs.dev/config-build)\r\n-   build: {}\r\n+   build: {\r\n+     extend(config) {\r\n+       if (!isDev) {\r\n+         // absolute path to files on production (default value: '/_nuxt/')\r\n+         config.output.publicPath = '_nuxt/'\r\n+       }\r\n+       config.node = {\r\n+         __dirname: !isProduction,\r\n+         __filename: !isProduction,\r\n+       }\r\n+     },\r\n+   },\r\n+   buildDir: '../../dist/nuxt-build',\r\n+   generate: {\r\n+     dir: '../../dist/nuxt-build',\r\n+   },\r\n+   telemetry: false,\r\n}\r\n```\r\n\r\n最後に`package.json`のscriptを整理しました。スクリプトの同時実行に利用する`npm-run-all`を併せて導入しました。\r\n\r\n``` ps\r\n> yarn add --dev npm-run-all\r\n```\r\n\r\n``` diff\r\n{\r\n  \"name\": \"nuxt-electron-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"private\": true,\r\n+  \"main\": \"dist/main/index.js\",\r\n  \"scripts\": {\r\n-    \"dev:renderer\": \"nuxt-ts src/renderer\",\r\n-    \"build:renderer\": \"nuxt-ts build src/renderer\",\r\n-    \"generate:renderer\": \"nuxt-ts generate src/renderer\"\r\n+    \"dev:main\": \"cross-env NODE_ENV=development tsc -p src/main/tsconfig.json\",\r\n+    \"dev:renderer\": \"cross-env NODE_ENV=development nuxt-ts src/renderer\",\r\n+    \"dev:electron\": \"cross-env NODE_ENV=development electron .\",\r\n+    \"build:main\": \"cross-env NODE_ENV=production tsc -p src/main/tsconfig.json\",\r\n+    \"build:renderer\": \"cross-env NODE_ENV=production nuxt-ts generate src/renderer\",\r\n+    \"build:electron\": \"cross-env NODE_ENV=production electron-builder\",\r\n+    \"build:electron:win\": \"cross-env NODE_ENV=production electron-builder --win\",\r\n+    \"build:electron:mac\": \"cross-env NODE_ENV=production electron-builder --mac\",\r\n+    \"build:electron:linux\": \"cross-env NODE_ENV=production electron-builder --linux\",\r\n+    \"build:win\": \"npm-run-all build:main build:renderer build:electron:win\",\r\n+    \"build:mac\": \"npm-run-all build:main build:renderer build:electron:mac\",\r\n+    \"build:linux\": \"npm-run-all build:main build:renderer build:electron:linux\"\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n### 動作確認\r\n\r\nこの状態で`yarn dev:main`を実行したところ、tsconfig.jsonが見つからないエラーが発生しました。\r\n\r\n``` ps\r\n> yarn dev:main\r\nyarn run v1.22.4\r\n$ cross-env NODE_ENV=development tsc -p src/main/tsconfig.json\r\n\r\nerror TS5058: The specified path does not exist: 'src/main/tsconfig.json'.\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\nERROR: \"dev:main\" exited with 1.\r\n```\r\n\r\ntsconfig.jsonを`src/main`以下に配置して再実行します。\r\n\r\n``` js\r\n// tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\r\n\r\n    /* Basic Options */\r\n    // \"incremental\": true,                   /* Enable incremental compilation */\r\n    \"target\": \"es5\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */\r\n    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */\r\n    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\r\n    \"allowJs\": true,                       /* Allow javascript files to be compiled. */\r\n    // \"checkJs\": true,                       /* Report errors in .js files. */\r\n    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\r\n    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\r\n    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\r\n    \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\r\n    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\r\n    \"outDir\": \"../../dist\",                        /* Redirect output structure to the directory. */\r\n    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n    // \"composite\": true,                     /* Enable project compilation */\r\n    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\r\n    // \"removeComments\": true,                /* Do not emit comments to output. */\r\n    // \"noEmit\": true,                        /* Do not emit outputs. */\r\n    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\r\n    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\r\n\r\n    /* Strict Type-Checking Options */\r\n    \"strict\": true,                           /* Enable all strict type-checking options. */\r\n    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\r\n    // \"strictNullChecks\": true,              /* Enable strict null checks. */\r\n    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\r\n    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\r\n    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\r\n    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\r\n    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\r\n\r\n    /* Additional Checks */\r\n    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\r\n    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\r\n    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\r\n    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\r\n\r\n    /* Module Resolution Options */\r\n    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\r\n        \"./*\"\r\n      ],\r\n      \"@/*\": [\r\n        \"./*\"\r\n      ]\r\n    },\r\n    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\r\n    // \"types\": [],                           /* Type declaration files to be included in compilation. */\r\n    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\r\n    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\r\n    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\r\n\r\n    /* Source Map Options */\r\n    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\r\n    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\r\n    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n    /* Experimental Options */\r\n    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\r\n    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n    /* Advanced Options */\r\n    \"skipLibCheck\": true,                     /* Skip type checking of declaration files. */\r\n    \"forceConsistentCasingInFileNames\": true  /* Disallow inconsistently-cased references to the same file. */\r\n  },\r\n  \"includes\": [\r\n    \"./*.(js|ts)\"\r\n  ]\r\n}\r\n```\r\n\r\nこれで、`yarn dev:main`が正常終了し、`yarn dev:electron`で、electron appをデバッグ実行できるようになりました。\r\n\r\n最後に`electron-builder.yml`をproject直下に配置し`build:win`を実行します。\r\n\r\n``` yml\r\n<!-- electron-builder.yml -->\r\nappId: com.nuxt-electron-example.app\r\nproductName: nuxt-electron-example\r\nasar: true\r\n\r\ndirectories:\r\n  output: build/\r\n\r\nfiles:\r\n  - package.json\r\n  - dist/main/\r\n  - dist/renderer/\r\n  - dist/nuxt-build/\r\n\r\ndmg:\r\n  contents:\r\n    - type: link\r\n      path: /Applications\r\n      x: 410\r\n      y: 150\r\n    - type: file\r\n      x: 130\r\n      y: 150\r\n\r\nmac:\r\n  target: dmg\r\n  category: public.app-category.developer-tools\r\n\r\nwin:\r\n  target: portable\r\n\r\nlinux:\r\n  target:\r\n    - deb\r\n    - AppImage\r\n```\r\n\r\n``` ps\r\n> yarn build:win\r\nyarn run v1.22.4\r\n$ npm-run-all build:main build:renderer build:electron:win\r\n$ cross-env NODE_ENV=production tsc -p src/main/tsconfig.json\r\n$ cross-env NODE_ENV=production nuxt-ts generate src/renderer\r\ni Doing webpack rebuild because pages\\index.vue modified\r\ni Production build\r\ni Bundling only for client side\r\ni Target: static\r\n√ Builder initialized\r\n√ Nuxt files generated\r\n√ Client\r\n  Compiled successfully in 44.10s\r\n\r\nHash: 93e7999117d5727b31d3\r\nVersion: webpack 4.44.2\r\nTime: 44106ms\r\nBuilt at: 2021-01-11 23:30:39\r\n                         Asset       Size  Chunks                                Chunk Names\r\n../server/client.manifest.json   14.7 KiB          [emitted]\r\n                    1643269.js   24.7 KiB       6  [emitted] [immutable]         vendors/pages/index\r\n                    380d0fb.js   3.83 KiB       0  [emitted] [immutable]         app\r\n                    45a7178.js    521 KiB       5  [emitted] [immutable]  [big]  vendors/app\r\n                    95ff23c.js   2.32 KiB       4  [emitted] [immutable]         runtime\r\n                      LICENSES  389 bytes          [emitted]\r\n                    bbcb20a.js    199 KiB       1  [emitted] [immutable]         commons/app\r\n                    eaca075.js    5.4 KiB       2  [emitted] [immutable]         pages/index\r\n                    fb55579.js   8.67 KiB       3  [emitted] [immutable]         pages/inspire\r\n + 1 hidden asset\r\nEntrypoint app = 95ff23c.js bbcb20a.js 45a7178.js 380d0fb.js\r\n\r\nWARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).\r\nThis can impact web performance.\r\nAssets:\r\n  45a7178.js (521 KiB)\r\ni Generating output directory: nuxt-build/\r\ni Generating pages\r\n√ Generated route \"/\"\r\n√ Client-side fallback created: 200.html\r\n$ cross-env NODE_ENV=production electron-builder --win\r\n  • electron-builder  version=22.9.1 os=10.0.19041\r\n  • loaded configuration  file=C:\\Repos\\github\\nuxt-electron-example\\electron-builder.yml\r\n  • description is missed in the package.json  appPackageFile=C:\\Repos\\github\\nuxt-electron-example\\package.json\r\n  • author is missed in the package.json  appPackageFile=C:\\Repos\\github\\nuxt-electron-example\\package.json\r\n  • writing effective config  file=build\\builder-effective-config.yaml\r\n  • packaging       platform=win32 arch=x64 electron=11.1.1 appOutDir=build\\win-unpacked\r\n  • default Electron icon is used  reason=application icon is not set\r\n  • building        target=portable file=build\\nuxt-electron-example 1.0.0.exe archs=x64\r\nDone in 337.16s.\r\n```\r\n\r\n約5分でbuildが完了しました。distフォルダに`build:main`、`build:renderer`で生成されたビルドモジュールが配置され、それらを使って`build:electron`が各環境用の実行ファイルを生成する、という流れのようです。\r\n\r\n今回はwindowsのビルド設定を`target: portable`にしているので、単独実行可能な`nuxt-electron-example 1.0.0.exe`(約60MB)が生成されました。\r\n\r\n``` ps\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-----        2021/01/11     23:32                win-unpacked\r\n-a----        2021/01/11     23:30            534 builder-effective-config.yaml\r\n-a----        2021/01/11     23:34       61868355 nuxt-electron-example 1.0.0.exe\r\n```\r\n\r\nこれで完璧！と思ったのですが、実行時に`nuxt.config.js`の`import colors from 'vuetify/es5/util/colors'`を解決できないエラーが発生してしまいました。詳細を調査できていないのですが、`yarn add vuetify`でdependeciesにvuetifyを追加することで解決するところまで確認できました。\r\n\r\n## 残課題\r\n\r\n- renderer/static フォルダに配置している画像等のリソースがelectronで利用できなくなっていました。electron用の設定が必要そうなので引き続き調査が必要です。\r\n\r\n## 関連項目\r\n\r\n- [Electron + Nuxt.js + TypeScriptの環境構築 - Qiita](https://qiita.com/282Haniwa/items/a3b0a7d3c622ad82ac8d)\r\n- [Electronでデスクトップアプリを作ろうとしたメモ](https://tenderfeel.xsrv.jp/javascript/4471/)\r\n- [Nuxt.js+Electronを試してみるv2 - Qiita](https://qiita.com/tamfoi/items/aa5b795d4559fa06f0e3)\r\n- [electron-nuxtを使ってデスクトップアプリケーションを作ってみる - Qiita](https://qiita.com/yakiniku0220/items/c78ee5c61bd245e80d7a)"}