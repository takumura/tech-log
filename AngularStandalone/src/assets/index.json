["{\"docRef\":\"windows-app\\\/howto-create-windows-app\",\"content\":\"{\\\"title\\\":\\\"Windowsデスクトップ向けポータブルアプリケーション開発の現状確認\\\",\\\"date\\\":\\\"2020-02-23\\\",\\\"category\\\":\\\"windows app\\\",\\\"tag\\\":[\\\"uwp\\\",\\\"msix\\\",\\\"electron\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n作業時間や手順を管理するためのWindows10向けデスクトップアプリケーションを作りたくなりました。2020\\\\\\\/2月時点で、どんな開発方法があるのか確認しました。\\\\r\\\\n\\\\r\\\\n## 検索してヒットした情報\\\\r\\\\n\\\\r\\\\nまず最初にかずきさんのde:code 2019プレゼンテーションを確認。\\\\r\\\\n\\\\r\\\\n- [Windows 10 対応のデスクトップアプリを 作る技術（事前公開版）](https:\\\\\\\/\\\\\\\/www.slideshare.net\\\\\\\/okazuki0130\\\\\\\/windows-10-147881407)\\\\r\\\\n\\\\r\\\\n続いてMicrosoft Docs\\\\r\\\\n\\\\r\\\\n- [Windows PC 用のデスクトップ アプリの構築](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/windows\\\\\\\/apps\\\\\\\/desktop\\\\\\\/)\\\\r\\\\n\\\\r\\\\nMSIXについて\\\\r\\\\n\\\\r\\\\n- [MSIX ドキュメント](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/windows\\\\\\\/msix\\\\\\\/)\\\\r\\\\n\\\\r\\\\nMSIXは管理者権限不要でインストール可能とあるが、インストール作業自体は必要。インストール不要なexe形式のアプリを作ろうと思った場合は、dotnet core + wpfで[自己完結型](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/core\\\\\\\/deploying\\\\\\\/index#publish-self-contained)にするのが良さそうです。\\\\r\\\\n\\\\r\\\\n## Electronについて\\\\r\\\\n\\\\r\\\\n[公式サイト](https:\\\\\\\/\\\\\\\/www.electronjs.org\\\\\\\/)のキャッチコピーは`Build cross-platform desktop apps with JavaScript, HTML, and CSS`。VSCodeがElectronを利用していることを考えると、十分に機能的なappを作成できるように思えます。\\\\r\\\\n\\\\r\\\\n## 何から手を付けるか\\\\r\\\\n\\\\r\\\\nElectronに将来性を感じる。そしてMSのテクノロジーが不確定で、この先まだまだ変更があるように感じる。なのでまずはElectron + Vue.jsの勉強から始めるのが良いのでは？と思いました。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [.NET Core 3.0のPublish Single File概要](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/Nuits\\\\\\\/items\\\\\\\/3136c999721e5e3fae90)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"vue\\\/vue_storybook_vuex\",\"content\":\"{\\\"title\\\":\\\"vuexを利用したコンポーネントをStorybookで扱う\\\",\\\"date\\\":\\\"2020-10-25\\\",\\\"category\\\":\\\"Vue\\\",\\\"tag\\\":[\\\"vue\\\",\\\"nuxtjs\\\",\\\"storybook\\\",\\\"vuex\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nNuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。component毎にstoryを作ってテストを行い、Nuxt側でそれをViewにまとめていこうと思います。\\\\r\\\\n\\\\r\\\\nデータはvuexのstoreからくるので、storybookとvuexの連携が必要になりました。\\\\r\\\\n\\\\r\\\\n## ワークログ\\\\r\\\\n\\\\r\\\\nstorybookの構成として、`preview.js`にvuexを利用するための設定が必要なのですが、[前回の時点](#todo)で既に含めていました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n...\\\\r\\\\nimport Vuex from 'vuex'\\\\r\\\\n...\\\\r\\\\nVue.use(Vuex)\\\\r\\\\n...\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n動作確認のため、ドラフトのtask storeを作成します。getterだけの簡単なモノにしました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nimport { GetterTree } from 'vuex'\\\\r\\\\nimport { RootState } from '~\\\\\\\/store'\\\\r\\\\n\\\\r\\\\nexport interface Task {\\\\r\\\\n  name: string\\\\r\\\\n  done: boolean\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nexport interface TaskState {\\\\r\\\\n  list: Task[]\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nexport const state = () => ({\\\\r\\\\n  list: [],\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\nexport const getters: GetterTree<TaskState, RootState> = {\\\\r\\\\n  getTasks: (state: TaskState) => {\\\\r\\\\n    return state.list\\\\r\\\\n  },\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n同様にtask componentを作成。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n<template>\\\\r\\\\n  <v-list>\\\\r\\\\n    <v-list-item v-for=\\\\\\\"task in getTasks\\\\\\\" :key=\\\\\\\"task.name\\\\\\\">\\\\r\\\\n      <v-list-item-content>\\\\r\\\\n        <div>\\\\r\\\\n          <span>{{ task.name }}<\\\\\\\/span>\\\\r\\\\n          <v-btn small depressed color=\\\\\\\"primary\\\\\\\">start<\\\\\\\/v-btn>\\\\r\\\\n        <\\\\\\\/div>\\\\r\\\\n      <\\\\\\\/v-list-item-content>\\\\r\\\\n    <\\\\\\\/v-list-item>\\\\r\\\\n  <\\\\\\\/v-list>\\\\r\\\\n<\\\\\\\/template>\\\\r\\\\n<script>\\\\r\\\\nimport { mapMutations, mapGetters, mapActions } from 'vuex'\\\\r\\\\n\\\\r\\\\nexport default {\\\\r\\\\n  computed: {\\\\r\\\\n    ...mapGetters({\\\\r\\\\n      getTasks: 'tasks\\\\\\\/getTasks',\\\\r\\\\n    }),\\\\r\\\\n  },\\\\r\\\\n}\\\\r\\\\n<\\\\\\\/script>\\\\r\\\\n<style><\\\\\\\/style>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nこのcomponentのstoryは以下のような記述で動くようになりました。テスト用のmock storeがポイントだと思います。今後mock storeが煩雑に感じてきたら、全コンポーネント共通の汎用mock storeを作ることになりそうです。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nimport Task from '..\\\\\\\/..\\\\\\\/components\\\\\\\/Task'\\\\r\\\\nimport Vuex from 'vuex'\\\\r\\\\n\\\\r\\\\nexport default {\\\\r\\\\n  title: 'Components\\\\\\\/Task',\\\\r\\\\n  component: Task,\\\\r\\\\n  argTypes: {},\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ テスト用のmock store\\\\r\\\\nconst store = new Vuex.Store({\\\\r\\\\n  modules: {\\\\r\\\\n    tasks: {\\\\r\\\\n      namespaced: true,\\\\r\\\\n      state: {\\\\r\\\\n        list: [\\\\r\\\\n          { name: 'task1', done: false },\\\\r\\\\n          { name: 'task2', done: true },\\\\r\\\\n          { name: 'task3', done: true },\\\\r\\\\n        ],\\\\r\\\\n      },\\\\r\\\\n      getters: {\\\\r\\\\n        getTasks: (state) => {\\\\r\\\\n          return state.list\\\\r\\\\n        },\\\\r\\\\n      },\\\\r\\\\n    },\\\\r\\\\n  },\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\nconst Template = (args, { argTypes }) => ({\\\\r\\\\n  props: Object.keys(argTypes),\\\\r\\\\n  components: { Task },\\\\r\\\\n  template: '<task \\\\\\\/>',\\\\r\\\\n  store,\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\nexport const TaskComponent = Template.bind({})\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [実践StorybookでVuexに立ち向かう](https:\\\\\\\/\\\\\\\/medium.com\\\\\\\/studist-dev\\\\\\\/storybook-with-vuex-7084bea6b509)\\\\r\\\\n- [【Nuxt.js】VuexをStorybookで使う方法](https:\\\\\\\/\\\\\\\/sawami.net\\\\\\\/2019\\\\\\\/11\\\\\\\/01\\\\\\\/tech\\\\\\\/nuxt-js-vuex-and-storybook\\\\\\\/)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"env\\\/vscode-settings-sync\",\"content\":\"{\\\"title\\\":\\\"VSCode: Settings Syncで環境設定を共有する\\\",\\\"date\\\":\\\"2019-11-01\\\",\\\"category\\\":\\\"環境設定\\\",\\\"tag\\\":[\\\"vscode\\\",\\\"git\\\",\\\"settings.json\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n拡張機能: `Settings Sync`を導入することで、VSCodeの設定、スニペット、テーマ、ファイルアイコン、キーバインディング、ワークスペース、拡張機能を複数のマシンで同期できます。\\\\r\\\\n\\\\r\\\\nデータはgistで共有されることになるので、設定のバックアップにもなりそうです。\\\\r\\\\n\\\\r\\\\n## 手順\\\\r\\\\n\\\\r\\\\nまずはSettings Syncの拡張機能画面で、設定方法の解説を確認。\\\\r\\\\n\\\\r\\\\n```plaintext\\\\r\\\\nShortcuts\\\\r\\\\n    1. Upload Key : Shift + Alt + U\\\\r\\\\n    2. Download Key : Shift + Alt + D\\\\r\\\\n\\\\r\\\\nConfigure Settings Sync\\\\r\\\\n    Settings Sync Configuration page will be opened automatically on code start and requires two things to setup:\\\\r\\\\n\\\\r\\\\n    1. GitHub Token\\\\r\\\\n    2. GitHub Gist Id\\\\r\\\\n\\\\r\\\\n    GitHub Token needs to be retrived by your GitHub account while Settings Sync creates GIST if you are first time user.\\\\r\\\\n\\\\r\\\\n    Following are the steps you need to perform to configure.\\\\r\\\\n\\\\r\\\\n    - Click on Login with GitHub .\\\\r\\\\n    - Login GitHub on Browser and close the browser tab once you get Success message.\\\\r\\\\n    - If you are using Settings Sync first time GIST will be created automatically when you upload your settings.\\\\r\\\\n    - If you already have GitHub Gist, new window will be opened to allow you to select the GitHub Gist or Skip to create new Gist.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n  \\\\\\\\\\\\r\\\\n特に気になる記述や疑問がなかったので、拡張機能: `Settings Sync`をインストール。完了すると`Welcome to Settings Sync`のタブが表示されたので、`LOGIN WITH GITHUB`を選択。\\\\r\\\\n\\\\r\\\\n<img src=\\\\\\\"assets\\\\\\\/images\\\\\\\/vscode-settings-sync\\\\\\\/vscode-settings-sync-1.png\\\\\\\" alt=\\\\\\\"Welcome to Settings Sync\\\\\\\" title=\\\\\\\"Welcome to Settings Sync\\\\\\\">\\\\r\\\\n\\\\r\\\\n`Authorize Settings Sync`のページがブラウザで表示されたので、`Authorize shanalikhan`する。\\\\r\\\\n<img src=\\\\\\\"assets\\\\\\\/images\\\\\\\/vscode-settings-sync\\\\\\\/vscode-settings-sync-2.png\\\\\\\" alt=\\\\\\\"Github OAuth Authorization\\\\\\\" title=\\\\\\\"Github OAuth Authorization\\\\\\\">\\\\r\\\\n\\\\r\\\\n設定完了の表示に切り替わり、準備が完了しました。\\\\r\\\\n\\\\r\\\\n`Shift + Alt + U` もしくは、コマンドパレットから`Sync: アップデート・アップロードの設定`を選択すると、環境設定情報がGistにアップロードされました。\\\\r\\\\n\\\\r\\\\nアップロード後、変更なしにもう一度アップロードしようとしたところ、確認ダイアログが表示されました。親切ですね。\\\\r\\\\n<img src=\\\\\\\"assets\\\\\\\/images\\\\\\\/vscode-settings-sync\\\\\\\/vscode-settings-sync-3.png\\\\\\\" alt=\\\\\\\"Dialog\\\\\\\" title=\\\\\\\"Dialog\\\\\\\">\\\\r\\\\n\\\\r\\\\n## 自動作成されたgist\\\\r\\\\n\\\\r\\\\nSettings Syncは`couldSettings`という名前のシークレットgistを自動的に作成していました。手動設定を行えば、自分で作成したgistに環境設定情報をアップロードさせることもできるようです。\\\\r\\\\n\\\\r\\\\ngistには、以下の5つのファイルが登録されていました。\\\\r\\\\n\\\\r\\\\n- cloudSettings\\\\r\\\\n- extensions.json\\\\r\\\\n- keybindings.json\\\\r\\\\n- keybindingsMac.json\\\\r\\\\n- settings.json\\\\r\\\\n\\\\r\\\\n<div class=\\\\\\\"gist\\\\\\\">\\\\r\\\\n    <script src=\\\\\\\"https:\\\\\\\/\\\\\\\/gist.github.com\\\\\\\/takumura\\\\\\\/bbff68078afb2d0846773965d1678c7c.js\\\\\\\"><\\\\\\\/script>\\\\r\\\\n<\\\\\\\/div>\\\\r\\\\n\\\"}\"}","{\"docRef\":\"env\\\/update-markdown-from-ios\",\"content\":\"{\\\"title\\\":\\\"Githubで管理しているmarkdownをiPhoneから更新する\\\",\\\"date\\\":\\\"2020-02-12\\\",\\\"category\\\":\\\"環境設定\\\",\\\"tag\\\":[\\\"開発\\\",\\\"markdown\\\",\\\"ios\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n帰宅中はやる気があるのに、自宅に帰るとまったりしてしまい、お勉強が捗らない今日この頃。まだやる気の残っている通勤中に記事を更新するのが時間効率的にもベストだろう。ということで、iPhoneからGithubのリポジトリを操作して、markdownの記事を更新する方法を模索します。\\\\r\\\\n\\\\r\\\\nGithubの操作にはWorking Copyを、markdownエディタにはTypeをそれぞれ選びました。\\\\r\\\\n\\\\r\\\\n## Working Copy\\\\r\\\\n\\\\r\\\\nApp Storeからダウンロードして開くと、`Repositories`の画面が表示されます。左上の歯車iconは設定、右上の`+`がリポジトリ操作のメニュでした。設定のいくつかはappの購入(2440円)が必要なようです。remoteへのpushが優良らしいので最終的には購入必須ですが、10日間のtrialがあるのでまずはそれから試す予定です。\\\\r\\\\n\\\\r\\\\nリポジトリ操作メニュの`Clone repository` > `Github`を選ぶとGithubへのログオンが要求されます。ログオンが完了するとssh keyが自動で作成、登録されました。改めてクローンしたいレポジトリを選択したら、何事もなくファイルがiPhoneにクローンされました。\\\\r\\\\n\\\\r\\\\nクローンしたファイルは、iOS標準のファイルアプリから参照することができました。クローン完了後にファイルアプリを開き、右上`・・・` > `編集`を選ぶと、`場所`欄にiCloud DriveやOneDriveと並んでWorking Copyが表示されます。デフォルトでは表示がオフになっているので、これをオンにするとクローンしたファイルが見えるようになりました。\\\\r\\\\n\\\\r\\\\n## Type\\\\r\\\\n\\\\r\\\\n利用は無料、独自クラウドへのデータ同期が有料なmarkdownエディタ。シンプルで使いやすそうなインタフェースだったので選びました。\\\\r\\\\n\\\\r\\\\nファイルアプリへのアクセスが可能で、Working Copyがクローンしたファイルにアクセス出来ることを確認しました。Typeのapp購入は不要そうです。\\\\r\\\\n\\\\r\\\\n## 気になったこと\\\\r\\\\n\\\\r\\\\nこの二つのappを使って、通勤中の作業をしばらく試してみようと思います。試しにmarkdownファイルをTypeで見ていたところ、改行コードの違いがdiffに出ていることに気が付きました。VSCodeでの改行コードをCRLFからLFにした方が良いかもしれません。色々試しながら調整していこうと思います。\\\\r\\\\n\\\"}\"}","{\"docRef\":\"vue\\\/vue_vuex_correctly_typed\",\"content\":\"{\\\"title\\\":\\\"NuxtJS + Typescriptで正しく型推論させる\\\",\\\"date\\\":\\\"2021-01-24\\\",\\\"category\\\":\\\"Vue\\\",\\\"tag\\\":[\\\"vue\\\",\\\"nuxtjs\\\",\\\"storybook\\\",\\\"vuex\\\",\\\"typed vuex\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nNuxtJSを使っていて「Typescriptなのに型推論が効いてなくてイマイチだなぁ」と思っていたのですが、設定が悪いだけでした。\\\\r\\\\n\\\\r\\\\n## コンポーネント\\\\r\\\\n\\\\r\\\\n実装を急ぐあまり、基本を理解していませんでした。そもそも`.vue`はjavasriptでしか書けないのかと思っていたのですが、ちゃんと[公式サイトに説明](https:\\\\\\\/\\\\\\\/typescript.nuxtjs.org\\\\\\\/ja\\\\\\\/cookbook\\\\\\\/components)がありました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n<script lang=\\\\\\\"ts\\\\\\\">\\\\r\\\\n  \\\\\\\/** TypeScript はここに記述します **\\\\\\\/\\\\r\\\\n<\\\\\\\/script>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nscriptのlangを設定していたり、していないものがあったのでtypescriptに統一しました。\\\\r\\\\n\\\\r\\\\n### Options API\\\\r\\\\n\\\\r\\\\nその後、ビルドは通りstorybookではエラーなく動いていたのですが`yarn dev`でNuxtJSのアプリを動かすと大量にエラーが出ることに気が付きました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nTS2339: Property 'duration' does not exist on type '{ minutes(): number; seconds(): number; }'\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n設定不十分な状態でtypescriptにした結果、型がうまく見つからずにエラーが表示されるようになった模様。これについてもちゃんと[公式サイトを読んで](https:\\\\\\\/\\\\\\\/typescript.nuxtjs.org\\\\\\\/ja\\\\\\\/cookbook\\\\\\\/components#options-api)いれば何ということはない話でした。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nimport Vue, { PropOptions } from 'vue'\\\\r\\\\n\\\\r\\\\ninterface User {\\\\r\\\\n  firstName: string\\\\r\\\\n  lastName: string\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nexport default Vue.extend({\\\\r\\\\n  name: 'YourComponent',\\\\r\\\\n\\\\r\\\\n  props: {\\\\r\\\\n    user: {\\\\r\\\\n      type: Object,\\\\r\\\\n      required: true\\\\r\\\\n    } as PropOptions<User>\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n  data () {\\\\r\\\\n    return {\\\\r\\\\n      message: 'This is a message'\\\\r\\\\n    }\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n  computed: {\\\\r\\\\n    fullName (): string {\\\\r\\\\n      return `${this.user.firstName} ${this.user.lastName}`\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n})\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n対応方法はいくつかあるようですが、既存の書き方のまま`Vue.extened{()}`で囲むだけでよいOptions API方式を採用するのがお手軽で良さそうに感じました。\\\\r\\\\n\\\\r\\\\n## Vuex with Typed Vuex\\\\r\\\\n\\\\r\\\\nVuex store自体はtypescriptで書けるのですが、component等から利用するときにAction、getter、mutationの型推論やインテリセンスが効きません。書き味は悪いけどそういうものかと思っていたのですが、改善策があるようなのでトライしてみます。\\\\r\\\\n\\\\r\\\\nTyped VuexのNuxt用モジュールを[公式サイトの手順](https:\\\\\\\/\\\\\\\/typed-vuex.roe.dev\\\\\\\/getting-started-nuxt)に従い導入しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add --dev nuxt-typed-vuex\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ nuxt.config.js 抜粋\\\\r\\\\n  \\\\\\\/*\\\\r\\\\n  ** Nuxt.js dev-modules\\\\r\\\\n  *\\\\\\\/\\\\r\\\\n  buildModules: [\\\\r\\\\n    '@nuxt\\\\\\\/typescript-build',\\\\r\\\\n    '@nuxtjs\\\\\\\/vuetify',\\\\r\\\\n    'nuxt-typed-vuex',\\\\r\\\\n  ],\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nそしてstoreへのアクセスに利用する`$accessor`の型定義ファイルを追加します。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ ~\\\\\\\/types\\\\\\\/index.d.ts\\\\r\\\\nimport { accessorType } from '~\\\\\\\/store'\\\\r\\\\n\\\\r\\\\ndeclare module 'vue\\\\\\\/types\\\\\\\/vue' {\\\\r\\\\n  interface Vue {\\\\r\\\\n    $accessor: typeof accessorType\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\ndeclare module '@nuxt\\\\\\\/types' {\\\\r\\\\n  interface NuxtAppOptions {\\\\r\\\\n    $accessor: typeof accessorType\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nその後は[実装サンプル](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/danielroe\\\\\\\/typed-vuex\\\\\\\/blob\\\\\\\/main\\\\\\\/examples\\\\\\\/nuxt\\\\\\\/store\\\\\\\/index.ts)や[参考記事](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/shindex\\\\\\\/items\\\\\\\/a90217b9e4c03c5b5215#vuex-%E3%81%AE-typescript-%E5%8C%96)などを見ながらstoreスクリプトをTyped Vuex仕様にしていきます。\\\\r\\\\n\\\\r\\\\nstore側が完了してしまえば、呼び出しているcomponent側の更新は非常に簡単です。getter\\\\\\\/mutation\\\\\\\/actionへのアクセスはthis.$accessorがイイ感じに行ってくれます。例えば`dispatch('アクション名')`としていた部分は`this.$accessor.{submodules}.アクション名()`とリテラルではなく直接呼出しになり、インテリセンスも効いています。素晴らしい！\\\\r\\\\n\\\\r\\\\n### Storybook with Typed Vuex\\\\r\\\\n\\\\r\\\\nこれでめでたしめでたし！と思いきや、StorybookでTyped Vuexの`$accessor`にアクセスしている部分の処理がエラーを出すようになってしまいました。StorybookはNuxtJSとは異なるプロジェクトとして起動するので、`nuxt-typed-vuex`によるaccessor自動インポートが効いていないからだと推測しました。\\\\r\\\\n\\\\r\\\\n> Nuxt Typed Vuex is made up of two packages:\\\\r\\\\n>\\\\r\\\\n> 1. typed-vuex - a typed store accessor with helper functions, with no Nuxt dependencies\\\\r\\\\n> 1. nuxt-typed-vuex - a Nuxt module that auto-injects this accessor throughout your project\\\\r\\\\n\\\\r\\\\n[Vue版のTyped Vuex setup](https:\\\\\\\/\\\\\\\/typed-vuex.roe.dev\\\\\\\/getting-started-vue#setup)と[StackOverflowのこの回答](https:\\\\\\\/\\\\\\\/stackoverflow.com\\\\\\\/a\\\\\\\/62610041)を参考に`preview.js`を更新したところ、Storybookでも`$accessor`を利用できるようになりました。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/\\\\\\\/ .storybook\\\\\\\/preview.js\\\\r\\\\nimport { addDecorator } from '@storybook\\\\\\\/vue'\\\\r\\\\nimport Vue from 'vue'\\\\r\\\\nimport Vuex from 'vuex'\\\\r\\\\n+import { useAccessor } from 'typed-vuex'\\\\r\\\\n\\\\r\\\\nimport Vuetify from 'vuetify'\\\\r\\\\nimport { VApp, VContent } from 'vuetify\\\\\\\/lib'\\\\r\\\\nimport colors from 'vuetify\\\\\\\/es5\\\\\\\/util\\\\\\\/colors'\\\\r\\\\nimport 'vuetify\\\\\\\/dist\\\\\\\/vuetify.min.css'\\\\r\\\\n+import * as rootStore from '~\\\\\\\/store\\\\\\\/index'\\\\r\\\\n+import * as todos from '~\\\\\\\/store\\\\\\\/todos'\\\\r\\\\n+import * as tasks from '~\\\\\\\/store\\\\\\\/tasks'\\\\r\\\\n\\\\r\\\\n+\\\\\\\/\\\\\\\/ setup Vuex with Typed Vuex\\\\r\\\\nVue.use(Vuex)\\\\r\\\\n+export const storePattern = {\\\\r\\\\n+  state: rootStore.state,\\\\r\\\\n+  getters: rootStore.getters,\\\\r\\\\n+  actions: rootStore.actions,\\\\r\\\\n+  mutations: rootStore.mutations,\\\\r\\\\n+  modules: {\\\\r\\\\n+    todos: {\\\\r\\\\n+      namespaced: true,\\\\r\\\\n+      state: {\\\\r\\\\n+        list: [\\\\r\\\\n+          { name: 'task1', done: false, running: false },\\\\r\\\\n+          { name: 'task2', done: false, running: false },\\\\r\\\\n+          { name: 'task3', done: false, running: true },\\\\r\\\\n+          { name: 'task4', done: false, running: false },\\\\r\\\\n+          { name: 'task5', done: false, running: false },\\\\r\\\\n+        ],\\\\r\\\\n+      },\\\\r\\\\n+      getters: todos.getters,\\\\r\\\\n+      actions: todos.actions,\\\\r\\\\n+      mutations: todos.mutations,\\\\r\\\\n+    },\\\\r\\\\n+    tasks,\\\\r\\\\n+  },\\\\r\\\\n+}\\\\r\\\\n+const store = new Vuex.Store(storePattern)\\\\r\\\\n+export const accessor = useAccessor(store, storePattern)\\\\r\\\\n+Vue.prototype.$accessor = accessor\\\\r\\\\n+\\\\r\\\\n+export default store\\\\r\\\\n+\\\\r\\\\n+\\\\\\\/\\\\\\\/ Setup vuetify\\\\r\\\\nconst vuetifyOptions = {}\\\\r\\\\n\\\\r\\\\nVue.use(Vuetify, {\\\\r\\\\n  iconfont: 'mdi',\\\\r\\\\n  customVariables: ['~\\\\\\\/assets\\\\\\\/variables.scss'],\\\\r\\\\n  theme: {\\\\r\\\\n    dark: true,\\\\r\\\\n    themes: {\\\\r\\\\n      light: {\\\\r\\\\n        primary: colors.purple,\\\\r\\\\n        secondary: colors.grey.darken1,\\\\r\\\\n        accent: colors.shades.black,\\\\r\\\\n        error: colors.red.accent3,\\\\r\\\\n      },\\\\r\\\\n      dark: {\\\\r\\\\n        primary: colors.blue.darken2,\\\\r\\\\n        accent: colors.grey.darken3,\\\\r\\\\n        secondary: colors.amber.darken3,\\\\r\\\\n        info: colors.teal.lighten1,\\\\r\\\\n        warning: colors.amber.base,\\\\r\\\\n        error: colors.deepOrange.accent4,\\\\r\\\\n        success: colors.green.accent3,\\\\r\\\\n      },\\\\r\\\\n    },\\\\r\\\\n  },\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\naddDecorator(() => ({\\\\r\\\\n  vuetify: new Vuetify(vuetifyOptions),\\\\r\\\\n  components: { VApp, VContent },\\\\r\\\\n  template: `<v-app><v-main><story\\\\\\\/><\\\\\\\/v-main><\\\\\\\/v-app>`,\\\\r\\\\n}))\\\\r\\\\n\\\\r\\\\nexport const parameters = {\\\\r\\\\n  actions: { argTypesRegex: '^on[A-Z].*' },\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nstory側ではstoreのモックを作成する代わりに、`preview.js`でexportしたstoreをそのまま利用できることに気が付きました。とっても便利！！\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n-import Vuex from 'vuex'\\\\r\\\\n+import store from '@\\\\\\\/.storybook\\\\\\\/preview'\\\\r\\\\nimport TodoList from '~\\\\\\\/components\\\\\\\/TodoList'\\\\r\\\\n\\\\r\\\\n-const store = new Vuex.Store({\\\\r\\\\n-  modules: {\\\\r\\\\n-    todos: {\\\\r\\\\n-      namespaced: true,\\\\r\\\\n-      state: {\\\\r\\\\n-        list: [\\\\r\\\\n-          { name: 'task1', done: false },\\\\r\\\\n-          { name: 'task2', done: true },\\\\r\\\\n-          { name: 'task3', done: true },\\\\r\\\\n-          { name: 'task4', done: true },\\\\r\\\\n-        ],\\\\r\\\\n-      },\\\\r\\\\n-      getters: {\\\\r\\\\n-        getTodoList: (state) => {\\\\r\\\\n-          return state.list\\\\r\\\\n-        },\\\\r\\\\n-      },\\\\r\\\\n-    },\\\\r\\\\n-  },\\\\r\\\\n-})\\\\r\\\\n\\\\r\\\\nconst Template = (args, { argTypes }) => ({\\\\r\\\\n  props: Object.keys(argTypes),\\\\r\\\\n  components: { TodoList },\\\\r\\\\n  template: '<todo-list \\\\\\\/>',\\\\r\\\\n  store,\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\nexport const todoList = Template.bind({})\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 所感\\\\r\\\\n\\\\r\\\\n色々な試行錯誤を通してVue\\\\\\\/Nuxtに関する理解が深まってきたように感じます。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Qiita - NuxtJS + Vuexでいい感じのTypescript環境をあまり頑張らないで構築する](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/shindex\\\\\\\/items\\\\\\\/a90217b9e4c03c5b5215)\\\\r\\\\n- [Nuxt Typescript](https:\\\\\\\/\\\\\\\/typescript.nuxtjs.org\\\\\\\/ja\\\\\\\/)\\\\r\\\\n- [Typed Vuex](https:\\\\\\\/\\\\\\\/typed-vuex.roe.dev\\\\\\\/)\\\\r\\\\n- [stack overflow - How can I make Vuex store work with Storybook?](https:\\\\\\\/\\\\\\\/stackoverflow.com\\\\\\\/questions\\\\\\\/56682493\\\\\\\/how-can-i-make-vuex-store-work-with-storybook)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"vue\\\/vue_storybook_get_started\",\"content\":\"{\\\"title\\\":\\\"NuxtJSにStorybookを導入する\\\",\\\"date\\\":\\\"2021-01-04\\\",\\\"category\\\":\\\"Vue\\\",\\\"tag\\\":[\\\"vue\\\",\\\"nuxtjs\\\",\\\"storybook\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nNuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。まずは NuxtJS(Vue.js)に慣れるためのサンプル Todo アプリを作ります。Storybook を導入して、コンポーネントカタログも併せて作ってみます。\\\\r\\\\n\\\\r\\\\n## 環境確認\\\\r\\\\n\\\\r\\\\n- エディタ: VSCode\\\\r\\\\n- nodejs: v12.16.0\\\\r\\\\n- yarn: 1.22.4\\\\r\\\\n\\\\r\\\\n## ワークログ\\\\r\\\\n\\\\r\\\\n### yarn のアップグレード\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn -v\\\\r\\\\n1.22.0\\\\r\\\\n\\\\r\\\\n> yarn policies set-version\\\\r\\\\nResolving latest to a url...\\\\r\\\\nDownloading https:\\\\\\\/\\\\\\\/github.com\\\\\\\/yarnpkg\\\\\\\/yarn\\\\\\\/releases\\\\\\\/download\\\\\\\/v1.22.4\\\\\\\/yarn-1.22.4.js...\\\\r\\\\nSaving it into C:\\\\\\\\Users\\\\\\\\takum\\\\\\\\.yarn\\\\\\\\releases\\\\\\\\yarn-1.22.4.js...\\\\r\\\\nUpdating C:\\\\\\\\Users\\\\\\\\takum\\\\\\\/.yarnrc...\\\\r\\\\nDone!\\\\r\\\\n\\\\r\\\\n> yarn -v\\\\r\\\\n1.22.4\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### NuxtJS プロジェクトの新規作成\\\\r\\\\n\\\\r\\\\n`yarn create nuxt-app nuxt-components-storybook`により`create-nuxt-app`モジュールが global に install され、プロジェクト生成が行われました。\\\\r\\\\n\\\\r\\\\nデフォルトの設定でlinting toolなどお好みで選択できます。何度かプロジェクトを作って試してみた結果、以下の設定に落ち着きました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn create nuxt-app nuxt-components-storybook\\\\r\\\\n\\\\r\\\\n> yarn create nuxt-app nuxt-components-storybook\\\\r\\\\nyarn create v1.22.4\\\\r\\\\n[1\\\\\\\/4] Resolving packages...\\\\r\\\\n[2\\\\\\\/4] Fetching packages...\\\\r\\\\n[3\\\\\\\/4] Linking dependencies...\\\\r\\\\n[4\\\\\\\/4] Building fresh packages...\\\\r\\\\n\\\\r\\\\nsuccess Installed \\\\\\\"create-nuxt-app@3.2.0\\\\\\\" with binaries:\\\\r\\\\n      - create-nuxt-app\\\\r\\\\n\\\\r\\\\ncreate-nuxt-app v3.2.0\\\\r\\\\n✨  Generating Nuxt.js project in nuxt-components-storybook\\\\r\\\\n? Project name: nuxt-components-storybook\\\\r\\\\n? Programming language: TypeScript\\\\r\\\\n? Package manager: Yarn\\\\r\\\\n? UI framework: Vuetify.js\\\\r\\\\n? Nuxt.js modules: (Press <space> to select, <a> to toggle all, <i> to invert selection)\\\\r\\\\n? Linting tools: Prettier\\\\r\\\\n? Testing framework: Jest\\\\r\\\\n? Rendering mode: Single Page App\\\\r\\\\n? Deployment target: Static (Static\\\\\\\/JAMStack hosting)\\\\r\\\\n? Development tools:\\\\r\\\\n\\\\r\\\\nyarn install v1.22.4\\\\r\\\\ninfo No lockfile found.\\\\r\\\\n\\\\r\\\\n🎉  Successfully created project nuxt-components-storybook\\\\r\\\\n\\\\r\\\\n  To get started:\\\\r\\\\n\\\\r\\\\n        cd nuxt-components-storybook\\\\r\\\\n        yarn dev\\\\r\\\\n\\\\r\\\\n  To build & start for production:\\\\r\\\\n\\\\r\\\\n        cd nuxt-components-storybook\\\\r\\\\n        yarn build\\\\r\\\\n        yarn start\\\\r\\\\n\\\\r\\\\n  To test:\\\\r\\\\n\\\\r\\\\n        cd nuxt-components-storybook\\\\r\\\\n        yarn test\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n  For TypeScript users.\\\\r\\\\n\\\\r\\\\n  See : https:\\\\\\\/\\\\\\\/typescript.nuxtjs.org\\\\\\\/cookbook\\\\\\\/components\\\\\\\/\\\\r\\\\nDone in 502.43s.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### 最初の動作確認\\\\r\\\\n\\\\r\\\\ninstall 完了時メッセージに従い`yarn dev`を実行すると、localhost:3000 でサイトが起動しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn dev\\\\r\\\\nyarn run v1.22.4\\\\r\\\\n$ nuxt-ts\\\\r\\\\n\\\\r\\\\n   ╭───────────────────────────────────────╮\\\\r\\\\n   │                                       │\\\\r\\\\n   │   Nuxt.js @ v2.14.1                   │\\\\r\\\\n   │                                       │\\\\r\\\\n   │   ▸ Environment: development          │\\\\r\\\\n   │   ▸ Rendering:   client-side          │\\\\r\\\\n   │   ▸ Target:      static               │\\\\r\\\\n   │                                       │\\\\r\\\\n   │   Listening: http:\\\\\\\/\\\\\\\/localhost:3000\\\\\\\/   │\\\\r\\\\n   │                                       │\\\\r\\\\n   ╰───────────────────────────────────────╯\\\\r\\\\n\\\\r\\\\ni Preparing project for development                 12:44:00\\\\r\\\\ni Initial build may take a while                    12:44:00\\\\r\\\\n√ Builder initialized                               12:44:00\\\\r\\\\n√ Nuxt files generated                              12:44:01\\\\r\\\\n\\\\r\\\\n√ Client\\\\r\\\\n  Compiled successfully in 20.95s\\\\r\\\\n\\\\r\\\\ni Waiting for file changes                          12:44:32\\\\r\\\\ni Memory usage: 258 MB (RSS: 355 MB)                12:44:32\\\\r\\\\ni Listening on: http:\\\\\\\/\\\\\\\/localhost:3000\\\\\\\/              12:44:32\\\\r\\\\nNo issues found.                                    12:44:32\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### Storybook の導入\\\\r\\\\n\\\\r\\\\nstorybook cliを利用することで、各フレームワーク\\\\\\\/ツール向けの初期設定ができるようです。`@storybook\\\\\\\/cli`をdevDependencies に追加、初期化コマンドを実行します。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nyarn add --dev @storybook\\\\\\\/cli\\\\r\\\\nyarn sb init --type vue\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nプロジェクト直下に`.storybook`フォルダと`stories`フォルダが作成され、`.storybook\\\\\\\/main.js`といくつかのサンプルストーリーも作成されました。project.json には storybook 起動用 script が追加されており、実行するとデフォルトブラウザが起動し、localhost:6006 で storybook のサイトが表示されました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nyarn storybook\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### vuetify用の設定を追加する\\\\r\\\\n\\\\r\\\\n[Nuxt + Vuetify の構成で Storybook を導入する](https:\\\\\\\/\\\\\\\/almond.milk200.cc\\\\\\\/blog\\\\\\\/2020\\\\\\\/06\\\\\\\/01\\\\\\\/storybook.html)の設定を参考にして、`preview.js`と`webpack.config.js`を調整しました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ .storybook\\\\\\\/webpack.config.js\\\\r\\\\nconst path = require('path')\\\\r\\\\nconst rootPath = path.resolve(__dirname, '..\\\\\\\/')\\\\r\\\\n\\\\r\\\\nmodule.exports = ({ config }) => {\\\\r\\\\n  config.module.rules.push({\\\\r\\\\n    test: \\\\\\\/\\\\\\\\.s(c|a)ss$\\\\\\\/,\\\\r\\\\n    use: [\\\\r\\\\n      'style-loader',\\\\r\\\\n      'css-loader',\\\\r\\\\n      {\\\\r\\\\n        loader: 'sass-loader',\\\\r\\\\n      },\\\\r\\\\n    ],\\\\r\\\\n  })\\\\r\\\\n\\\\r\\\\n  config.resolve.alias['~'] = rootPath\\\\r\\\\n  config.resolve.alias['@'] = rootPath\\\\r\\\\n\\\\r\\\\n  return config\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ .storybook\\\\\\\/preview.js\\\\r\\\\nimport { addDecorator } from '@storybook\\\\\\\/vue'\\\\r\\\\nimport Vue from 'vue'\\\\r\\\\nimport Vuex from 'vuex'\\\\r\\\\n\\\\r\\\\nimport Vuetify from 'vuetify'\\\\r\\\\nimport { VApp, VContent } from 'vuetify\\\\\\\/lib'\\\\r\\\\nimport colors from 'vuetify\\\\\\\/es5\\\\\\\/util\\\\\\\/colors'\\\\r\\\\nimport 'vuetify\\\\\\\/dist\\\\\\\/vuetify.min.css'\\\\r\\\\n\\\\r\\\\nVue.use(Vuex)\\\\r\\\\nconst vuetifyOptions = {}\\\\r\\\\n\\\\r\\\\nVue.use(Vuetify, {\\\\r\\\\n  iconfont: 'mdi',\\\\r\\\\n  customVariables: ['~\\\\\\\/assets\\\\\\\/variables.scss'],\\\\r\\\\n  theme: {\\\\r\\\\n    dark: true,\\\\r\\\\n    themes: {\\\\r\\\\n      light: {\\\\r\\\\n        primary: colors.purple,\\\\r\\\\n        secondary: colors.grey.darken1,\\\\r\\\\n        accent: colors.shades.black,\\\\r\\\\n        error: colors.red.accent3,\\\\r\\\\n      },\\\\r\\\\n      dark: {\\\\r\\\\n        primary: colors.blue.darken2,\\\\r\\\\n        accent: colors.grey.darken3,\\\\r\\\\n        secondary: colors.amber.darken3,\\\\r\\\\n        info: colors.teal.lighten1,\\\\r\\\\n        warning: colors.amber.base,\\\\r\\\\n        error: colors.deepOrange.accent4,\\\\r\\\\n        success: colors.green.accent3,\\\\r\\\\n      },\\\\r\\\\n    },\\\\r\\\\n  },\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\naddDecorator(() => ({\\\\r\\\\n  vuetify: new Vuetify(vuetifyOptions),\\\\r\\\\n  components: { VApp, VContent },\\\\r\\\\n  template: `<v-app><v-content><story\\\\\\\/><\\\\\\\/v-content><\\\\\\\/v-app>`,\\\\r\\\\n}))\\\\r\\\\n\\\\r\\\\nexport const parameters = {\\\\r\\\\n  actions: { argTypesRegex: '^on[A-Z].*' },\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`Logo.vue`と`WeatherCard.vue`（テスト用に[Nuxt + Vuetify の構成で Storybook を導入する](https:\\\\\\\/\\\\\\\/almond.milk200.cc\\\\\\\/blog\\\\\\\/2020\\\\\\\/06\\\\\\\/01\\\\\\\/storybook.html)のcomponentを借用）向けにストーリーを作成しました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ Logo.stories.js\\\\r\\\\nimport { storiesOf } from '@storybook\\\\\\\/vue'\\\\r\\\\nimport Logo from '@\\\\\\\/components\\\\\\\/Logo.vue'\\\\r\\\\n\\\\r\\\\nstoriesOf('Components\\\\\\\/Default', module).add(\\\\r\\\\n  'Logo',\\\\r\\\\n  () => ({\\\\r\\\\n    components: { Logo },\\\\r\\\\n    template: `\\\\r\\\\n    <logo \\\\\\\/>\\\\r\\\\n`,\\\\r\\\\n  }),\\\\r\\\\n  {\\\\r\\\\n    info: true,\\\\r\\\\n    notes: `\\\\r\\\\n        # Logo\\\\r\\\\n        Nuxt.js default logo\\\\r\\\\n      `,\\\\r\\\\n  },\\\\r\\\\n)\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ WeatherCard.stories.js\\\\r\\\\nimport WeatherCard from '..\\\\\\\/components\\\\\\\/WeatherCard.vue'\\\\r\\\\n\\\\r\\\\nexport default {\\\\r\\\\n  title: 'Components\\\\\\\/Vuetify',\\\\r\\\\n  component: WeatherCard,\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nconst Template = (args, { argTypes }) => ({\\\\r\\\\n  props: Object.keys(argTypes),\\\\r\\\\n  components: { WeatherCard },\\\\r\\\\n  template: '<weather-card :day-of-the-week-labels=\\\\\\\"dayOfTheWeekLabels\\\\\\\"\\\\\\\/>',\\\\r\\\\n})\\\\r\\\\n\\\\r\\\\nexport const WeatherCardComponent = Template.bind({})\\\\r\\\\nWeatherCardComponent.args = {\\\\r\\\\n  dayOfTheWeekLabels: ['SU', 'MO', 'TU', 'WED', 'TH', 'FR', 'SA'],\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`WeatherCard.vue`で利用している[Material Design Icon](https:\\\\\\\/\\\\\\\/material.io\\\\\\\/resources\\\\\\\/icons\\\\\\\/?style=baseline)が正しく表示されなかったので、`.storybook\\\\\\\/preview-head.html`を追加。\\\\r\\\\n\\\\r\\\\n``` html\\\\r\\\\n<!-- .storybook\\\\\\\/preview-head.html -->\\\\r\\\\n<link\\\\r\\\\n  href=\\\\\\\"https:\\\\\\\/\\\\\\\/fonts.googleapis.com\\\\\\\/css?family=Roboto:100,300,400,500,700,900&display=swap\\\\\\\"\\\\r\\\\n  rel=\\\\\\\"stylesheet\\\\\\\"\\\\r\\\\n\\\\\\\/>\\\\r\\\\n<link\\\\r\\\\n  href=\\\\\\\"https:\\\\\\\/\\\\\\\/cdn.jsdelivr.net\\\\\\\/npm\\\\\\\/@mdi\\\\\\\/font@3.x\\\\\\\/css\\\\\\\/materialdesignicons.min.css\\\\\\\"\\\\r\\\\n  rel=\\\\\\\"stylesheet\\\\\\\"\\\\r\\\\n\\\\\\\/>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 課題\\\\r\\\\n\\\\r\\\\n### lint\\\\\\\/formatについて\\\\r\\\\n\\\\r\\\\nこれまで Prettier をフォーマッター\\\\\\\/リンターとして使ってきたのですが、vue のおすすめフォーマット設定がよくわかりませんでした。eslint + prettierのようなのですが、VSCode で一番人気がある vue 用拡張機能[Vetur](https:\\\\\\\/\\\\\\\/marketplace.visualstudio.com\\\\\\\/items?itemName=octref.vetur)の標準フォーマッターはPrettier になっていて、eslintの推奨と競合するようになってしまいました。\\\\r\\\\n\\\\r\\\\n各configを調整して、eslintとprettierを共存させる設定について解説しているサイトを調べたりもしましたが、私自身はeslintへのこだわりが無いのでprettierにすべてお任せするようにしました。しばらくこのまま開発を進め、問題点が出てきたらそのとき考えようと思います。\\\\r\\\\n\\\\r\\\\n### vscodeのformatter設定について\\\\r\\\\n\\\\r\\\\nangularとvueのプロジェクトをVSCodeで開発するようになると、VSCodeのグローバル設定で全てをまかなうのは難しいように感じました。グローバルの設定は最低限の共通事項に留め、各種プロジェクトに必要な設定を個別に適用した方が良さそうです。\\\\r\\\\n\\\\r\\\\nなのでVSCodeの設定を、共通 \\\\\\\/ angular用 \\\\\\\/ vue用で分割する予定です。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Vue.js official](https:\\\\\\\/\\\\\\\/vuejs.org\\\\\\\/)\\\\r\\\\n- [awesome-vue - Github](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/vuejs\\\\\\\/awesome-vue)\\\\r\\\\n- [Vue CLI official](https:\\\\\\\/\\\\\\\/cli.vuejs.org\\\\\\\/)\\\\r\\\\n- [How to use Vue.js with Electron and Vuex](https:\\\\\\\/\\\\\\\/www.digitalocean.com\\\\\\\/community\\\\\\\/tutorials\\\\\\\/vuejs-vue-electron)\\\\r\\\\n- [Nuxt.js official](https:\\\\\\\/\\\\\\\/nuxtjs.org\\\\\\\/)\\\\r\\\\n- [ESLint と Prettier - NuxtJS](https:\\\\\\\/\\\\\\\/ja.nuxtjs.org\\\\\\\/guide\\\\\\\/development-tools\\\\\\\/#eslint-%E3%81%A8-prettier)\\\\r\\\\n- [An (almost) comprehensive guide on using Storybook with Nuxt.js](https:\\\\\\\/\\\\\\\/medium.com\\\\\\\/js-dojo\\\\\\\/a-guide-on-using-storybook-with-nuxt-js-1e0018ec51c9)\\\\r\\\\n- [Storybook for Vue](https:\\\\\\\/\\\\\\\/storybook.js.org\\\\\\\/docs\\\\\\\/guides\\\\\\\/guide-vue\\\\\\\/)\\\\r\\\\n- [Nuxt + Vuetify の構成で Storybook を導入する](https:\\\\\\\/\\\\\\\/almond.milk200.cc\\\\\\\/blog\\\\\\\/2020\\\\\\\/06\\\\\\\/01\\\\\\\/storybook.html)\\\\r\\\\n- [Story rendering - Storybook](https:\\\\\\\/\\\\\\\/storybook.js.org\\\\\\\/docs\\\\\\\/react\\\\\\\/configure\\\\\\\/story-rendering#adding-to-head)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"env\\\/tool-list\",\"content\":\"{\\\"title\\\":\\\"Windowsの環境セットアップ\\\",\\\"date\\\":\\\"2019-11-08\\\",\\\"category\\\":\\\"環境設定\\\",\\\"tag\\\":[\\\"setup\\\",\\\"tool\\\",\\\"install\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nWindowsの環境セットアップ手順についてまとめます。Scoopを利用できるものはセットアップを自動化し、そうでないものは個別にインストールしています。\\\\r\\\\n\\\\r\\\\n## scoopを用いた環境セットアップスクリプト\\\\r\\\\n\\\\r\\\\n**env-setup-common.ps1**\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n## plese run following command if error occured for running powershell script.\\\\r\\\\n## set-executionpolicy unrestricted -s cu\\\\r\\\\n\\\\r\\\\n# install scoop to \\\\\\\"c:\\\\\\\\Apps\\\\\\\\scoop\\\\\\\" folder\\\\r\\\\n$env:SCOOP='C:\\\\\\\\Apps\\\\\\\\scoop'\\\\r\\\\n[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')\\\\r\\\\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https:\\\\\\\/\\\\\\\/get.scoop.sh')\\\\r\\\\n\\\\r\\\\n# install git to add bucket\\\\r\\\\nscoop install git\\\\r\\\\n\\\\r\\\\n# add extras bucket\\\\r\\\\nscoop bucket add extras\\\\r\\\\n\\\\r\\\\n# utils\\\\r\\\\nscoop install 7zip keepass curl winmerge fiddler\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n**env-setup-dev.ps1**\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n# dev utils\\\\r\\\\nscoop install git fork\\\\r\\\\n\\\\r\\\\n# programming\\\\r\\\\nscoop install dotnet-sdk nodejs\\\\r\\\\n\\\\r\\\\n# editor\\\\r\\\\nscoop install vscode\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### 7zip\\\\r\\\\n\\\\r\\\\n圧縮・解凍ソフト。Scoopを利用してインストールできます。完了後に、`scoop\\\\\\\\apps\\\\\\\\7zip\\\\\\\\current\\\\\\\\7zFM.exe`のメニュ > `ツール` > `オプション` > `7-Zip` から `シェルコンテキストメニュに7zipを登録`のチェックを入れて、右クリックメニュから7zipを使えるようにします。\\\\r\\\\n\\\\r\\\\n### keepass\\\\r\\\\n\\\\r\\\\nパスワード管理ツール。\\\\r\\\\n\\\\r\\\\n### curl\\\\r\\\\n\\\\r\\\\nURLシンタックスを用いてファイル送受信を行うコマンドラインツール\\\\r\\\\n\\\\r\\\\n### git\\\\r\\\\n\\\\r\\\\nバージョン管理ツール\\\\r\\\\n\\\\r\\\\n### git-fork\\\\r\\\\n\\\\r\\\\nグラフィカルgitクライアント。一緒に仕事をしている人が超絶お勧めしているので試してみる予定。Scoopを利用してインストールできるか検討中。\\\\r\\\\n\\\\r\\\\n### WinMerge\\\\r\\\\n\\\\r\\\\n差分比較、マージツール。Scoopを利用してインストールできます。\\\\r\\\\n\\\\r\\\\n### fiddler\\\\r\\\\n\\\\r\\\\nHTTPトラフィック監視ツール。Scoopを利用してインストールできるか検討中。\\\\r\\\\n\\\\r\\\\n### Simple VHD Manager\\\\r\\\\n\\\\r\\\\nVHD（仮想ハードディスク）ファイルの管理ツール。Scoopを利用してインストールできるか検討中。公式bucketsにはapp manifestが存在しないため、自分で作る必要がある。\\\\r\\\\n\\\\r\\\\n### .NET Core\\\\r\\\\n\\\\r\\\\n開発環境。Scoopを利用してインストールできるか検討中。\\\\r\\\\n\\\\r\\\\n### Nodejs\\\\r\\\\n\\\\r\\\\n開発環境。Scoopを利用してインストールできるか検討中。LTS版をインストールする予定。\\\\r\\\\n\\\\r\\\\n### Visual Studio Code\\\\r\\\\n\\\\r\\\\n軽量コードエディター。Scoopを利用してインストールできるか検討中。\\\\r\\\\n\\\\r\\\\n### chrome\\\\r\\\\n\\\\r\\\\nブラウザ。Scoopを利用してインストールできるか検討中。公式bucketsにはapp manifestが存在しないため、自分で作る必要がある。\\\\r\\\\n\\\\r\\\\n## 個別にインストールするAppについて\\\\r\\\\n\\\\r\\\\n### Synkron\\\\r\\\\n\\\\r\\\\nフォルダ同期ツール\\\\r\\\\n\\\\r\\\\n### Visual Studio\\\\r\\\\n\\\\r\\\\n開発環境\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Example Setup Scripts](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/lukesampson\\\\\\\/scoop\\\\\\\/wiki\\\\\\\/Example-Setup-Scripts)\\\\r\\\\n- [Chrome.json](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/Ash258\\\\\\\/scoop-Ash258\\\\\\\/blob\\\\\\\/master\\\\\\\/bucket\\\\\\\/Chrome.json)\\\\r\\\\n- [SimpleVHDManager.json](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/Ash258\\\\\\\/scoop-Ash258\\\\\\\/blob\\\\\\\/master\\\\\\\/bucket\\\\\\\/SimpleVHDManager.json)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"csharp\\\/create-angular-spa-with-net6-project\",\"content\":\"{\\\"title\\\":\\\".NET6とAngular v13でSPAサイトを作る（VSプロジェクト作成）\\\",\\\"date\\\":\\\"2021-12-26\\\",\\\"category\\\":\\\"csharp\\\",\\\"tag\\\":[\\\"net6\\\",\\\"angular v13\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n本サイトは自作のwebサイト生成エンジンで生成されています。自作エンジンは2019年に.NET Core 2.1とAngular v7で開発しました。\\\\r\\\\n\\\\r\\\\nそれから時は流れ、2021年末時点でバックエンド側は.NET6に、フロントエンド側はAngular v13にそれぞれバージョンアップされています。\\\\r\\\\n\\\\r\\\\n進化の波に取り残されないように、最新バージョンのモジュールを使ってwebサイト生成エンジンを再開発してみようと思います。\\\\r\\\\n\\\\r\\\\nこの記事では、VSプロジェクト作成編ということで.NET6のASP.NET Core SPAプロジェクトと、Angularプロジェクトをそれぞれ作成していきます。Microsoft Docsに[チュートリアル記事](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-gb\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/tutorial-asp-net-core-with-angular?view=vs-2022)を見つけたので、それを参考にしつつ作業を進めていきます。\\\\r\\\\n\\\\r\\\\n## 開発準備\\\\r\\\\n\\\\r\\\\nまずは.NET 6を利用するために、Visual Studio2022をinstallします。フロントエンド側は、nodejsも含めて個別に必要なpackageを手動インストールするつもりだったので、ワークロードは`ASP.NETとWeb開発`のみを選択しました。\\\\r\\\\n\\\\r\\\\n新規プロジェクトを新しいAngular Templateから作成時に、globalにinstallしているAngular CLIがv9.1.12では古すぎるのかエラーが発生しました。\\\\r\\\\n\\\\r\\\\nなのでnodejsとAngular CLIをアップグレードしました。\\\\r\\\\n\\\\r\\\\n- nodejs: nodejs-lts: 14.16.1 -> 16.13.1\\\\r\\\\n  - scoopで管理しているので`scoop update *`コマンドにて更新\\\\r\\\\n- Angular CLI: 9.1.12 -> 12.2.14\\\\r\\\\n  - 最新はv13.1.2ですが、このバージョンだと[プロジェクト作成時にエラーが発生](https:\\\\\\\/\\\\\\\/developercommunity.visualstudio.com\\\\\\\/t\\\\\\\/standalone-typescript-angular-merge-confilct\\\\\\\/1611006)したため、まずはv12を使用\\\\r\\\\n\\\\r\\\\n## 新規ソリューションとフロントエンドプロジェクトの作成\\\\r\\\\n\\\\r\\\\nVS2022で`新しいプロジェクト`を選択し、`Standalone Angular Template`を使用してプロジェクトを作成しました。\\\\r\\\\n\\\\r\\\\n`追加情報`ウィンドウが表示されたので、`Add integration for Empty ASP.NET Web API Project`にチェックを入れました。\\\\r\\\\n\\\\r\\\\nプロジェクト生成処理が正常に終了すると、slnファイルとフロントエンドのAngularプロジェクトが生成されていました。見慣れない`{プロジェクト名}.esproj`というのが気になって調べたところ、VS2022から利用可能になった[新しいJavaScript\\\\\\\/TypeScript Projectのファイル](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-gb\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/javascript-in-vs-2022?view=vs-2022#project-templates)ということでした。\\\\r\\\\n\\\\r\\\\n## バックエンドプロジェクトの作成\\\\r\\\\n\\\\r\\\\n先に作成したソリューションに追加する形で、ASP.NET Core Web APIプロジェクトを作成しました。\\\\r\\\\n\\\\r\\\\nフレームワークには`.NET 6.0`を選択、承認は不要なので`なし`にしました。\\\\r\\\\n\\\\r\\\\nC# 9.0の新機能 [最上位レベルのステートメント](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/csharp\\\\\\\/whats-new\\\\\\\/csharp-9#top-level-statements)のおかげで、Program.csが驚くほどシンプル担っているのに驚きました。\\\\r\\\\n\\\\r\\\\nC# 10からglobal namespaceが使えるようになったとのことですが、生成されたASP.NET Core APIのコードは以前のままだったので、global namespaceに変更してみました。\\\\r\\\\n\\\\r\\\\nまた、esprojのnpmを使うように指示している部分をyarnを使うように変更しました。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n @@ -3,7 +3,7 @@\\\\r\\\\n    <ProjectGuid>bab8cfe4-58b1-4e20-acee-2a2596812eb4<\\\\\\\/ProjectGuid>\\\\r\\\\n  <\\\\\\\/PropertyGroup>\\\\r\\\\n  <PropertyGroup Condition=\\\\\\\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\\\\\\\">\\\\r\\\\n--    <StartupCommand>npm start<\\\\\\\/StartupCommand>\\\\r\\\\n++    <StartupCommand>yarn start<\\\\\\\/StartupCommand>\\\\r\\\\n    <JavaScriptTestFramework>Jasmine<\\\\\\\/JavaScriptTestFramework>\\\\r\\\\n  <\\\\\\\/PropertyGroup>\\\\r\\\\n  <ItemGroup>\\\\r\\\\n @@ -17,6 +17,6 @@\\\\r\\\\n    <\\\\\\\/Exec>\\\\r\\\\n    <Error Condition=\\\\\\\"'$(ErrorCode)' != '0'\\\\\\\" Text=\\\\\\\"Node.js is required to build and run this project. To continue, please install Node.js from https:\\\\\\\/\\\\\\\/nodejs.org\\\\\\\/, and then restart your command prompt or IDE.\\\\\\\" \\\\\\\/>\\\\r\\\\n    <Message Importance=\\\\\\\"high\\\\\\\" Text=\\\\\\\"Restoring dependencies using 'npm'. This may take several minutes...\\\\\\\" \\\\\\\/>\\\\r\\\\n--    <Exec WorkingDirectory=\\\\\\\"$(SpaRoot)\\\\\\\" Command=\\\\\\\"npm install\\\\\\\" \\\\\\\/>\\\\r\\\\n++    <Exec WorkingDirectory=\\\\\\\"$(SpaRoot)\\\\\\\" Command=\\\\\\\"yarn install\\\\\\\" \\\\\\\/>\\\\r\\\\n  <\\\\\\\/Target>\\\\r\\\\n<\\\\\\\/Project>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n[プロジェクトのプロパティ設定](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-gb\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/tutorial-asp-net-core-with-angular?view=vs-2022#set-the-project-properties)と[スタートアップ プロジェクトの設定](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-gb\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/tutorial-asp-net-core-with-angular?view=vs-2022#set-the-startup-project)は書かれている通りに実施しました。\\\\r\\\\n\\\\r\\\\n最初はフロントエンドプロジェクトのプロパティ設定（起動するdebuggerに`launch.json`を指定）の画面がうまく表示されず、３０分ほどハマりました。\\\\r\\\\n\\\\r\\\\nesprojファイルの先頭行が`<Project Sdk=\\\\\\\"Microsoft.VisualStudio.JavaScript.Sdk\\\\\\\/0.4.0-alpha\\\\\\\">`で始まっており、[nugetのサイト](https:\\\\\\\/\\\\\\\/www.nuget.org\\\\\\\/packages\\\\\\\/Microsoft.VisualStudio.JavaScript.SDK\\\\\\\/)を確認すると、最新バージョン2021-12-01頃`0.5.0-alpha`に更新されていました。VS2022 previewでは`0.4.0-alpha`を利用しており、リリースのタイミングで`0.5.0-alpha`へ更新されたのにテンプレートが生成するesprojのバージョンが古いためにうまく動かなかったようです。\\\\r\\\\n\\\\r\\\\nProject SDKのバージョンを以下のように`0.5.0-alpha`へ更新したところ、スクリプトファイルなどが正しくプロジェクトへincludeされた状態になり、プロパティもチュートリアルのように正しく表示されるようになりました。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n @@ -1,4 +1,4 @@\\\\r\\\\n-<Project Sdk=\\\\\\\"Microsoft.VisualStudio.JavaScript.Sdk\\\\\\\/0.4.0-alpha\\\\\\\">\\\\r\\\\n+<Project Sdk=\\\\\\\"Microsoft.VisualStudio.JavaScript.Sdk\\\\\\\/0.5.0-alpha\\\\\\\">\\\\r\\\\n  <PropertyGroup Label=\\\\\\\"Globals\\\\\\\">\\\\r\\\\n    <ProjectGuid>bab8cfe4-58b1-4e20-acee-2a2596812eb4<\\\\\\\/ProjectGuid>\\\\r\\\\n  <\\\\\\\/PropertyGroup>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n最後にバックエンド側`launchSettings.json`で指定しているApplicationURL(https)と、フロントエンド側`proxy.conf.js`のtarget APIサーバURLがポートまで一致するように設定したら、全ての設定が完了しました。\\\\r\\\\n\\\\r\\\\nVisual Studio F5のデバッグ実行で、フロントエンド側とバックエンド側が両方同時に実行され、Weather Forcastのデモデータが想定通り表示されました。\\\\r\\\\n\\\\r\\\\nproxy.conf.jsがポイントのようで、`angular.json`の`projects.{app name}.architect.serve.options.proxyConfig`にこのファイルが指定されていました。詳細は要調査ですが、HttpClient.getする際に、contextと一致するrequestのtarget apiサーバを指定しているようです。\\\\r\\\\n\\\\r\\\\n``` js\\\\r\\\\n\\\\\\\/\\\\\\\/ proxy.conf.js\\\\r\\\\nconst PROXY_CONFIG = [\\\\r\\\\n  {\\\\r\\\\n    context: [\\\\r\\\\n      \\\\\\\"\\\\\\\/weatherforecast\\\\\\\",\\\\r\\\\n    ],\\\\r\\\\n    target: \\\\\\\"https:\\\\\\\/\\\\\\\/localhost:7069\\\\\\\",\\\\r\\\\n    secure: false\\\\r\\\\n  }\\\\r\\\\n]\\\\r\\\\n\\\\r\\\\nmodule.exports = PROXY_CONFIG;\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n新しいAPIを実装したら、それを`proxy.conf.js`に追加すれば良さそうです。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [ASP.NET Core で Angular プロジェクト テンプレートを使用する](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/aspnet\\\\\\\/core\\\\\\\/client-side\\\\\\\/spa\\\\\\\/angular?view=aspnetcore-6.0&tabs=visual-studio)\\\\r\\\\n- [チュートリアル: Visual Studio での Angular を使用した ASP.NET Core アプリの作成](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/tutorial-asp-net-core-with-angular?view=vs-2022)\\\\r\\\\n- [dotnet new 用の .NET の既定のテンプレート](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/core\\\\\\\/tools\\\\\\\/dotnet-new-sdk-templates#angular-react)\\\\r\\\\n- [Visual Studio 2022 の JavaScript および TypeScript](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/visualstudio\\\\\\\/javascript\\\\\\\/javascript-in-vs-2022?view=vs-2022)\\\\r\\\\n- [最上位レベルのステートメント - Main メソッドを使用しないプログラム](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/csharp\\\\\\\/fundamentals\\\\\\\/program-structure\\\\\\\/top-level-statements#global-namespace)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"angular\\\/fluent-ui-web-components-with-angular\",\"content\":\"{\\\"title\\\":\\\"AngularプロジェクトへのFluent UI導入検討\\\",\\\"date\\\":\\\"2022-01-07\\\",\\\"category\\\":\\\"csharp\\\",\\\"tag\\\":[\\\"fluent ui\\\",\\\"angular\\\"],\\\"body\\\":\\\"これまでずっとデザインシステムに[Angular Material](https:\\\\\\\/\\\\\\\/material.angular.io\\\\\\\/)を使ってきたのですが、今回は新しいものということで、最近MS OfficeやTeamsで見かける[Fluent UIのAngularでも使えるWeb Component](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-us\\\\\\\/fluent-ui\\\\\\\/web-components\\\\\\\/integrations\\\\\\\/angular)の導入を検討しました。\\\\r\\\\n\\\\r\\\\n結論としては、まだまだ未成熟で私の力では実践投入できなそうだったので導入を断念しました。開発の進捗状況を見つつ、仕上がってきたら導入を再検討したいです。\\\\r\\\\n\\\\r\\\\n### 検討時に行った作業\\\\r\\\\n\\\\r\\\\n元々UI Fabricと呼ばれていたころはReact向けライブラリがメインだった感があり、今も一番充実しているのはFluent UI Reactのようです。[公式Github](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/microsoft\\\\\\\/fluentui)によると、Office系で使われている`Fluent UI React`、Teamsで使われている`Fluent UI React Northstar`、Edgeで使われている`Fluent UI Web Component`の3種類があるようです。このうちAngularで利用できるのは`Fluent UI Web Component`です。\\\\r\\\\n\\\\r\\\\n|   | React | React Northstar | Web Components |\\\\r\\\\n|---| ----- | --------------- | -------------- |\\\\r\\\\n| **Overview**    | Mature, refreshing with new concepts from react-northstar. | Newer, has concepts we're iterating on. | Web Component implementation of Fluent UI. |\\\\r\\\\n| **Used By**     | Office| Teams | Edge |\\\\r\\\\n\\\\r\\\\n説明に従い、3つのモジュール(`@fluentui\\\\\\\/web-components`、`@microsoft\\\\\\\/fast-element`、`lodash-es`)をインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add @fluentui\\\\\\\/web-components @microsoft\\\\\\\/fast-element lodash-es\\\\r\\\\nyarn add v1.22.15\\\\r\\\\n[1\\\\\\\/4] Resolving packages...\\\\r\\\\n[2\\\\\\\/4] Fetching packages...\\\\r\\\\n...\\\\r\\\\n[3\\\\\\\/4] Linking dependencies...\\\\r\\\\n[4\\\\\\\/4] Building fresh packages...\\\\r\\\\nsuccess Saved lockfile.\\\\r\\\\nsuccess Saved 8 new dependencies.\\\\r\\\\ninfo Direct dependencies\\\\r\\\\n├─ @fluentui\\\\\\\/web-components@2.2.0\\\\r\\\\n├─ @microsoft\\\\\\\/fast-element@1.6.2\\\\r\\\\n└─ lodash-es@4.17.21\\\\r\\\\ninfo All dependencies\\\\r\\\\n├─ @fluentui\\\\\\\/web-components@2.2.0\\\\r\\\\n├─ @microsoft\\\\\\\/fast-colors@5.1.4\\\\r\\\\n├─ @microsoft\\\\\\\/fast-element@1.6.2\\\\r\\\\n├─ @microsoft\\\\\\\/fast-foundation@2.29.0\\\\r\\\\n├─ @microsoft\\\\\\\/fast-web-utilities@5.0.2\\\\r\\\\n├─ exenv-es6@1.0.0\\\\r\\\\n├─ lodash-es@4.17.21\\\\r\\\\n└─ tabbable@5.2.1\\\\r\\\\nDone in 40.64s.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nその後も説明に従いmain.tsに以下の一行を追加したところ、build errorが発生するようになってしまいました。\\\\r\\\\n`provideFluentDesignSystem().register(fluentDesignSystemProvider());`\\\\r\\\\n\\\\r\\\\n[FAST designのissue](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/microsoft\\\\\\\/fast\\\\\\\/issues\\\\\\\/5198)によると、typescriptのversionが4.3.5以上だとこのエラーが発生するとのこと。暫定の回避手段は`skipLibCheck: true`を`tsconfig.json`に追加することでした。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/* To learn more about this file see: https:\\\\\\\/\\\\\\\/angular.io\\\\\\\/config\\\\\\\/tsconfig. *\\\\\\\/\\\\r\\\\n{\\\\r\\\\n  \\\\\\\"compileOnSave\\\\\\\": false,\\\\r\\\\n  \\\\\\\"compilerOptions\\\\\\\": {\\\\r\\\\n    \\\\\\\"baseUrl\\\\\\\": \\\\\\\".\\\\\\\/\\\\\\\",\\\\r\\\\n    \\\\\\\"outDir\\\\\\\": \\\\\\\".\\\\\\\/dist\\\\\\\/out-tsc\\\\\\\",\\\\r\\\\n    \\\\\\\"forceConsistentCasingInFileNames\\\\\\\": true,\\\\r\\\\n    \\\\\\\"strict\\\\\\\": true,\\\\r\\\\n    \\\\\\\"noImplicitOverride\\\\\\\": true,\\\\r\\\\n    \\\\\\\"noPropertyAccessFromIndexSignature\\\\\\\": true,\\\\r\\\\n    \\\\\\\"noImplicitReturns\\\\\\\": true,\\\\r\\\\n    \\\\\\\"noFallthroughCasesInSwitch\\\\\\\": true,\\\\r\\\\n    \\\\\\\"sourceMap\\\\\\\": true,\\\\r\\\\n    \\\\\\\"declaration\\\\\\\": false,\\\\r\\\\n    \\\\\\\"downlevelIteration\\\\\\\": true,\\\\r\\\\n    \\\\\\\"experimentalDecorators\\\\\\\": true,\\\\r\\\\n    \\\\\\\"moduleResolution\\\\\\\": \\\\\\\"node\\\\\\\",\\\\r\\\\n    \\\\\\\"importHelpers\\\\\\\": true,\\\\r\\\\n    \\\\\\\"target\\\\\\\": \\\\\\\"es2017\\\\\\\",\\\\r\\\\n    \\\\\\\"module\\\\\\\": \\\\\\\"es2020\\\\\\\",\\\\r\\\\n    \\\\\\\"lib\\\\\\\": [\\\\\\\"es2020\\\\\\\", \\\\\\\"dom\\\\\\\"],\\\\r\\\\n+    \\\\\\\"skipLibCheck\\\\\\\": true\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"angularCompilerOptions\\\\\\\": {\\\\r\\\\n    \\\\\\\"enableI18nLegacyMessageIdFormat\\\\\\\": false,\\\\r\\\\n    \\\\\\\"strictInjectionParameters\\\\\\\": true,\\\\r\\\\n    \\\\\\\"strictInputAccessModifiers\\\\\\\": true,\\\\r\\\\n    \\\\\\\"strictTemplates\\\\\\\": true\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nこれでdebugが実行できるようになり、Fluent UIのスタイルが適用されるようになります。ただし背景色やテキスト色は自身で設定する必要があるようです。\\\\r\\\\n\\\\r\\\\n``` css\\\\r\\\\nbody {\\\\r\\\\n  background: var(--fill-color);\\\\r\\\\n  color: var(--neutral-foreground-rest);\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Use Fluent UI Web Components with Angular](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-us\\\\\\\/fluent-ui\\\\\\\/web-components\\\\\\\/integrations\\\\\\\/angular)\\\\r\\\\n- [FAST color explorer](https:\\\\\\\/\\\\\\\/color.fast.design\\\\\\\/)\\\\r\\\\n- [Using FAST to Rebrand an Existing Website](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/microsoft\\\\\\\/fast\\\\\\\/tree\\\\\\\/master\\\\\\\/examples\\\\\\\/site-rebrand-tutorial)\\\"}\"}","{\"docRef\":\"angular\\\/angular_prerender\",\"content\":\"{\\\"title\\\":\\\"Angularのプリレンダリングについて\\\",\\\"date\\\":\\\"2020-02-15\\\",\\\"category\\\":\\\"Angular\\\",\\\"tag\\\":[\\\"prerender\\\"],\\\"body\\\":\\\"[angular-prerender](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/chrisguttandin\\\\\\\/angular-prerender)という気になるツールを見かけたので、使ったらどうなるのか試してみます。\\\\r\\\\n\\\\r\\\\n## 環境の準備\\\\r\\\\n\\\\r\\\\n### nodejs\\\\r\\\\n\\\\r\\\\nLTS版のnodeを利用します。これまではWindows installerでインストールしていましたが、今回kらscoopを使うようにしました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop install nodejs-lts\\\\r\\\\nInstalling 'nodejs-lts' (12.16.0) [64bit]\\\\r\\\\nnode-v12.16.0-win-x64.7z (10.2 MB) [=============================] 100%\\\\r\\\\nChecking hash of node-v12.16.0-win-x64.7z ... ok.\\\\r\\\\nExtracting node-v12.16.0-win-x64.7z ... done.\\\\r\\\\nLinking C:\\\\\\\\Apps\\\\\\\\scoop\\\\\\\\apps\\\\\\\\nodejs-lts\\\\\\\\current => C:\\\\\\\\Apps\\\\\\\\scoop\\\\\\\\apps\\\\\\\\nodejs-lts\\\\\\\\12.16.0\\\\r\\\\nPersisting bin\\\\r\\\\nPersisting cache\\\\r\\\\nRunning post-install script...\\\\r\\\\n'nodejs-lts' (12.16.0) was installed successfully!\\\\r\\\\n\\\\r\\\\n> node -v\\\\r\\\\nv12.16.0\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nwindowsのアンインストールでは`%AppData%\\\\\\\/npm`と`%AppData%\\\\\\\/npm-cache`が削除されず残ってしまうことがありました。見つけたら手動で削除します。\\\\r\\\\n\\\\r\\\\n### package manager\\\\r\\\\n\\\\r\\\\n2020年2月の調査でもnpmよりyarnの方がパフォーマンスが良いという記事が多いので、package managerにはnpmではなくyarnを使用します。scoopを使ってインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop install yarn\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### Angular CLI\\\\r\\\\n\\\\r\\\\nAngularのバージョンは9を利用することにします。これまではAngular7を使っていて、今回初めて9のプロジェクトを作るので、Angular CLIの更新から始めます。\\\\r\\\\n\\\\r\\\\nyarn globalインストールでは、versionがうまく表示されないエラーがあるようなので、npmでグローバルインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> npm uninstall -g angular-cli\\\\r\\\\n> npm cache verify\\\\r\\\\n> npm install -g @angular\\\\\\\/cli@latest\\\\r\\\\n> ng version\\\\r\\\\n\\\\r\\\\n     _                      _                 ____ _     ___\\\\r\\\\n    \\\\\\\/ \\\\\\\\   _ __   __ _ _   _| | __ _ _ __     \\\\\\\/ ___| |   |_ _|\\\\r\\\\n   \\\\\\\/ △ \\\\\\\\ | '_ \\\\\\\\ \\\\\\\/ _` | | | | |\\\\\\\/ _` | '__|   | |   | |    | |\\\\r\\\\n  \\\\\\\/ ___ \\\\\\\\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\\\\r\\\\n \\\\\\\/_\\\\\\\/   \\\\\\\\_\\\\\\\\_| |_|\\\\\\\\__, |\\\\\\\\__,_|_|\\\\\\\\__,_|_|       \\\\\\\\____|_____|___|\\\\r\\\\n                |___\\\\\\\/\\\\r\\\\n\\\\r\\\\nAngular CLI: 9.0.2\\\\r\\\\nNode: 12.16.0\\\\r\\\\nOS: win32 x64\\\\r\\\\n\\\\r\\\\nAngular:\\\\r\\\\n...\\\\r\\\\nIvy Workspace:\\\\r\\\\n\\\\r\\\\nPackage                      Version\\\\r\\\\n------------------------------------------------------\\\\r\\\\n@angular-devkit\\\\\\\/architect    0.900.2\\\\r\\\\n@angular-devkit\\\\\\\/core         9.0.2\\\\r\\\\n@angular-devkit\\\\\\\/schematics   9.0.2\\\\r\\\\n@schematics\\\\\\\/angular          9.0.2\\\\r\\\\n@schematics\\\\\\\/update           0.900.2\\\\r\\\\nrxjs                         6.5.3\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## プロジェクトの作成\\\\r\\\\n\\\\r\\\\nangular prerender公式サイトの手順通りに進めます。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> ng config -g cli.packageManager yarn\\\\r\\\\n> ng new universe --routing\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n初回実行時にpackageの解決まで行われるので、事前にAngular CLIが利用するpackage managerをyarnに変更してから、新規にAngular9 appを作成しました。\\\\r\\\\n\\\\r\\\\n## universal(server) moduleの作成\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> cd universe\\\\r\\\\n> ng generate universal --client-project universe\\\\r\\\\nCREATE src\\\\\\\/main.server.ts (298 bytes)\\\\r\\\\nCREATE src\\\\\\\/app\\\\\\\/app.server.module.ts (318 bytes)\\\\r\\\\nCREATE tsconfig.server.json (308 bytes)\\\\r\\\\nUPDATE package.json (1327 bytes)\\\\r\\\\nUPDATE angular.json (4357 bytes)\\\\r\\\\nUPDATE src\\\\\\\/main.ts (432 bytes)\\\\r\\\\nUPDATE src\\\\\\\/app\\\\\\\/app.module.ts (438 bytes)\\\\r\\\\n√ Packages installed successfully.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## angular-prerenderの導入とprerender処理\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add angular-prerender --dev\\\\r\\\\n> ng build\\\\r\\\\n> ng run universe:server\\\\r\\\\n> npx angular-prerender\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n処理が正常に終了し、`dist\\\\\\\\universe\\\\\\\\browser\\\\\\\\index.html`にapp.component.htmlの内容が追記されていることを確認しました。\\\\r\\\\n\\\\r\\\\n## 次にやること\\\\r\\\\n\\\\r\\\\nrouteを増やして、どのようにhtmlが追記されるのかを確認します。\\\\r\\\\n\\\\r\\\\n## 作業録\\\\r\\\\n\\\\r\\\\nステップ毎の変更点を<https:\\\\\\\/\\\\\\\/github.com\\\\\\\/takumura\\\\\\\/angular-express-prerender\\\\\\\/commits\\\\\\\/master>から確認できます。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Angular Update Guide](https:\\\\\\\/\\\\\\\/update.angular.io\\\\\\\/)\\\\r\\\\n- [Updating to Angular version 9](https:\\\\\\\/\\\\\\\/angular.io\\\\\\\/guide\\\\\\\/updating-to-version-9)\\\\r\\\\n- [Angularの環境構築（Angular CLIで構築）](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/Yamamoto0525\\\\\\\/items\\\\\\\/65d5a0b36eb4dbd8079b)\\\"}\"}","{\"docRef\":\"env\\\/use-scoop\",\"content\":\"{\\\"title\\\":\\\"scoopでWindowsアプリを管理する\\\",\\\"date\\\":\\\"2019-11-01\\\",\\\"category\\\":\\\"環境設定\\\",\\\"tag\\\":[\\\"tool\\\",\\\"scoop\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nscoopを利用して、開発環境の自動セットアップ、および最新版への定期的なアップデートなどの管理を上手に行えるのか試してみます。\\\\r\\\\n\\\\r\\\\n## インストール\\\\r\\\\n\\\\r\\\\nまず初めに[公式サイト](https:\\\\\\\/\\\\\\\/scoop.sh\\\\\\\/)と[GitHub リポジトリ](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/lukesampson\\\\\\\/scoop)を確認しました。インストールはPowerShellスクリプトで行うと書いてあるので、その通りに実行しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https:\\\\\\\/\\\\\\\/get.scoop.sh')\\\\r\\\\nInitializing...\\\\r\\\\nDownloading scoop...\\\\r\\\\nExtracting...\\\\r\\\\nCreating shim...\\\\r\\\\nDownloading main bucket...\\\\r\\\\nExtracting...\\\\r\\\\nAdding ~\\\\\\\\scoop\\\\\\\\shims to your path.\\\\r\\\\n'lastupdate' has been set to '2019-11-01T17:22:42.8161465+09:00'\\\\r\\\\nScoop was installed successfully!\\\\r\\\\nType 'scoop help' for instructions.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nログインしているアカウントのユーザフォルダ以下に`scoop`フォルダが作成されました。scoopで管理されるAppはこのフォルダ以下に配置されるようです。\\\\r\\\\n\\\\r\\\\n## Bucket の設定\\\\r\\\\n\\\\r\\\\nデフォルトではmain backetが利用可能です。`bucket add`コマンドにより、bucketを追加することができます。追加可能な bucketは`scoop\\\\\\\\apps\\\\\\\\scoop\\\\\\\\current\\\\\\\\buckets.json`で設定されており、`bucket known`コマンドで見る事もできます。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop bucket known\\\\r\\\\nmain\\\\r\\\\nextras\\\\r\\\\nnightlies\\\\r\\\\nnirsoft\\\\r\\\\nphp\\\\r\\\\nnerd-fonts\\\\r\\\\nnonportable\\\\r\\\\njava\\\\r\\\\ngames\\\\r\\\\njetbrains\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n以前から利用しているAppがextrasにありそうだったので、追加しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop bucket add extras\\\\r\\\\nChecking repo... ok\\\\r\\\\nThe extras bucket was added successfully.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\ngitがインストールされていないとbucketの追加に失敗します。その場合はgitを先にインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nscoop install git\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## よく使うであろうコマンド\\\\r\\\\n\\\\r\\\\n### scoop search\\\\r\\\\n\\\\r\\\\n指定したAppがBucket(collections of apps)にあるか検索する。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop search nodejs\\\\r\\\\n'main' bucket:\\\\r\\\\n    nodejs-lts (12.13.0)\\\\r\\\\n    nodejs (13.1.0)\\\\r\\\\n\\\\r\\\\n> scoop search keepass\\\\r\\\\n'extras' bucket:\\\\r\\\\n    keepass-plugin-keeagent (0.10.1)\\\\r\\\\n    keepass-plugin-keeanywhere (1.5.1)\\\\r\\\\n    keepass-plugin-keepassnatmsg (2.0.6)\\\\r\\\\n    keepass-plugin-keepassrpc (1.9.0)\\\\r\\\\n    keepass-plugin-keetraytotp (0.99-Beta)\\\\r\\\\n    keepass-plugin-sequencer (0.1.1)\\\\r\\\\n    keepass-plugin-yafd (1.2.2.0)\\\\r\\\\n    keepass (2.43)\\\\r\\\\n    keepassxc (2.5.0)\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### scoop install\\\\r\\\\n\\\\r\\\\n指定したAppをインストールする。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop install 7zip\\\\r\\\\nUpdating Scoop...\\\\r\\\\nUpdating 'main' bucket...\\\\r\\\\nChecking repo... ok\\\\r\\\\nThe main bucket was added successfully.\\\\r\\\\nScoop was updated successfully!\\\\r\\\\nInstalling '7zip' (19.00) [64bit]\\\\r\\\\n7z1900-x64.msi (1.7 MB) [===============================================================================================] 100%\\\\r\\\\nChecking hash of 7z1900-x64.msi ... ok.\\\\r\\\\nExtracting 7z1900-x64.msi ... done.\\\\r\\\\nLinking ~\\\\\\\\scoop\\\\\\\\apps\\\\\\\\7zip\\\\\\\\current => ~\\\\\\\\scoop\\\\\\\\apps\\\\\\\\7zip\\\\\\\\19.00\\\\r\\\\nCreating shim for '7z'.\\\\r\\\\nCreating shortcut for 7-Zip (7zFM.exe)\\\\r\\\\n'7zip' (19.00) was installed successfully!\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## scoop update\\\\r\\\\n\\\\r\\\\n`scoop udpate`コマンドでscoop自体とインストール可能なAppの情報（app manifest）を更新できます。セミコロンで続けて`scoop update *`とすることで、インストール済みのすべてのAppに対して、バージョンアップのチェックおよびAppの更新ができます。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop update; scoop update *\\\\r\\\\nUpdating Scoop...\\\\r\\\\nUpdating 'extras' bucket...\\\\r\\\\n * 4366eadd vscodium: Update to version 1.40.0                           2 hours ago\\\\r\\\\n * 3ade6589 vscodium-portable: Update to version 1.40.0                  2 hours ago\\\\r\\\\n * 88e85c64 vivaldi: Update to version 2.9.1705.41                       2 hours ago\\\\r\\\\nUpdating 'main' bucket...\\\\r\\\\n * 124c0c6a ffmpeg-nightly: Update to version 20191108-e700038           2 hours ago\\\\r\\\\n * 20998cde annie: Update to version 0.9.6                               2 hours ago\\\\r\\\\n * 41fcafae terraform-provider-ibm: Update to version 0.19.0             3 hours ago\\\\r\\\\n * 94629c47 jx: Update to version 2.0.971                                3 hours ago\\\\r\\\\n * b017d181 faas-cli: Update to version 0.10.3                           3 hours ago\\\\r\\\\nScoop was updated successfully!\\\\r\\\\nLatest versions for all apps are installed! For more information try 'scoop status'\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## アンインストール\\\\r\\\\n\\\\r\\\\n追加でインストールするAp は`C:\\\\\\\\Apps`以下にまとめるルールにしていたので、scoopをインストールし直すことにします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> scoop uninstall scoop\\\\r\\\\nWARN  This will uninstall Scoop and all the programs that have been installed with Scoop!\\\\r\\\\nAre you sure? (yN): y\\\\r\\\\nUninstalling '7zip'\\\\r\\\\nRemoving shim for '7z'.\\\\r\\\\nWARN  Couldn't remove ~\\\\\\\\scoop\\\\\\\\apps\\\\\\\\7zip: 項目 C:\\\\\\\\Users\\\\\\\\takum\\\\\\\\scoop\\\\\\\\apps\\\\\\\\7zip\\\\\\\\19.00\\\\\\\\7-zip.dll を削除できません: パス '7-zip.dll' へのアクセスが拒否されました。.Exception\\\\r\\\\nUninstalling 'winmerge'\\\\r\\\\nRemoving shim for 'WinMergeU'.\\\\r\\\\nCouldn't remove ~\\\\\\\\scoop\\\\\\\\apps: 項目 C:\\\\\\\\Users\\\\\\\\takum\\\\\\\\scoop\\\\\\\\apps\\\\\\\\7zip\\\\\\\\19.00\\\\\\\\7-zip.dll を削除できません: パス '7-zip.dll'\\\\r\\\\nへのアクセスが拒否されました。\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n7zipインストール後にエクスプローラ統合の設定をしたために`7-zip.dll`が削除できなくなっていました。設定を解除して再起動後、アンインストールをやり直します。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nscoop uninstall scoop\\\\r\\\\nWARN  This will uninstall Scoop and all the programs that have been installed with Scoop!\\\\r\\\\nAre you sure? (yN): y\\\\r\\\\nUninstalling '7zip'\\\\r\\\\nWARN  Shim for '7z' is missing. Skipping.\\\\r\\\\nRemoving ~\\\\\\\\scoop\\\\\\\\shims from your path.\\\\r\\\\nScoop has been uninstalled.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n今度は正常にアンインストール処理が完走しました。\\\\r\\\\n\\\\r\\\\n## カスタムディレクトリに scoop をインストール\\\\r\\\\n\\\\r\\\\n公式wikiの[Installing Scoop to Custom Directory](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/lukesampson\\\\\\\/scoop\\\\\\\/wiki\\\\\\\/Quick-Start#installing-scoop-to-custom-directory)を参考にして、`C:\\\\\\\\Apps\\\\\\\\scoop`以下にscoopをインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n$env:SCOOP='C:\\\\\\\\Apps\\\\\\\\scoop'\\\\r\\\\n[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')\\\\r\\\\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https:\\\\\\\/\\\\\\\/get.scoop.sh')\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## App Manifest について\\\\r\\\\n\\\\r\\\\n公式が提供していないApp Manifestは自分で作ることも可能です。詳細な方法は[Creating an app manifest](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/lukesampson\\\\\\\/scoop\\\\\\\/wiki\\\\\\\/Creating-an-app-manifest)に書かれています。\\\\r\\\\n\\\\r\\\\n## 作業時に参照した情報\\\\r\\\\n\\\\r\\\\n[scoop wiki - GitHub](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/lukesampson\\\\\\\/scoop\\\\\\\/wiki)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"blazor\\\/build-first-blazor-webassembly-app\",\"content\":\"{\\\"title\\\":\\\"Blazor WebAssemblyアプリを作成する\\\",\\\"date\\\":\\\"2020-05-05\\\",\\\"category\\\":\\\"Blazor\\\",\\\"tag\\\":[\\\"overview\\\",\\\"webassembly\\\",\\\"demo\\\"],\\\"body\\\":\\\"NET5でproduction readyになる予定のBlazor WebAssemblyの情報収集と、空のアプリ作成を作成してみる。\\\\r\\\\n\\\\r\\\\n## 情報収集\\\\r\\\\n\\\\r\\\\nMS Docsにある[チュートリアル - 最初の Blazor アプリをビルドする](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/aspnet\\\\\\\/core\\\\\\\/tutorials\\\\\\\/build-your-first-blazor-app?view=aspnetcore-3.1)を試してみる事にします。\\\\r\\\\n\\\\r\\\\n注意書きには\\\\\\\".NET Core 3.1ではプレビュー段階である\\\\\\\"と書いてあるので、NET5になったら手順等改めて振り返る必要がありそうです。\\\\r\\\\n\\\\r\\\\n```plaintext\\\\r\\\\nプレビュー段階の Blazor WebAssembly\\\\r\\\\n\\\\\\\" Blazor サーバー\\\\\\\" は ASP.NET Core 3.0 でサポートされています。 \\\\\\\" Blazor WebAssembly\\\\\\\" は、ASP.NET Core 3.1 のプレビュー段階です。\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nまた[ASP.NET Core Blazor の概要](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/aspnet\\\\\\\/core\\\\\\\/blazor\\\\\\\/get-started?view=aspnetcore-3.1&tabs=visual-studio)には、\\\\r\\\\n\\\\r\\\\n```plaintext\\\\r\\\\nBlazor WebAssembly エクスペリエンス (Visual Studio 16.6 Preview 2 以降) については、 [Blazor WebAssembly アプリ] テンプレートを選択します。\\\\r\\\\n````\\\\r\\\\n\\\\r\\\\nと記載されているので、Visual Studioで開発を行う場合は16.6以降が必要なようです。\\\\r\\\\n\\\\r\\\\n今日(2020-05-05)時点の最新は16.5.4だったので、Visual Studio 2019 Previewをインストールして開発に使用します。\\\\r\\\\n\\\\r\\\\nまた、以下のコマンドを実行して、テンプレートをインストールします。実行前にプロジェクトを作成してもBlazorサーバテンプレートしか表示されず、Blazor WebAssemblyプロジェクトを開始できませんでした。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> dotnet new -i Microsoft.AspNetCore.Components.WebAssembly.Templates::3.2.0-preview5.20216.8\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n実行後の利用可能なテンプレートは以下の通り。\\\\r\\\\n\\\\r\\\\n```plaintext\\\\r\\\\nTemplates                                         Short Name               Language          Tags\\\\r\\\\n----------------------------------------------------------------------------------------------------------------------------------\\\\r\\\\nConsole Application                               console                  [C#], F#, VB      Common\\\\\\\/Console\\\\r\\\\nClass library                                     classlib                 [C#], F#, VB      Common\\\\\\\/Library\\\\r\\\\nWPF Application                                   wpf                      [C#]              Common\\\\\\\/WPF\\\\r\\\\nWPF Class library                                 wpflib                   [C#]              Common\\\\\\\/WPF\\\\r\\\\nWPF Custom Control Library                        wpfcustomcontrollib      [C#]              Common\\\\\\\/WPF\\\\r\\\\nWPF User Control Library                          wpfusercontrollib        [C#]              Common\\\\\\\/WPF\\\\r\\\\nWindows Forms (WinForms) Application              winforms                 [C#]              Common\\\\\\\/WinForms\\\\r\\\\nWindows Forms (WinForms) Class library            winformslib              [C#]              Common\\\\\\\/WinForms\\\\r\\\\nWorker Service                                    worker                   [C#]              Common\\\\\\\/Worker\\\\\\\/Web\\\\r\\\\nUnit Test Project                                 mstest                   [C#], F#, VB      Test\\\\\\\/MSTest\\\\r\\\\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test\\\\\\\/NUnit\\\\r\\\\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test\\\\\\\/NUnit\\\\r\\\\nxUnit Test Project                                xunit                    [C#], F#, VB      Test\\\\\\\/xUnit\\\\r\\\\nRazor Component                                   razorcomponent           [C#]              Web\\\\\\\/ASP.NET\\\\r\\\\nRazor Page                                        page                     [C#]              Web\\\\\\\/ASP.NET\\\\r\\\\nMVC ViewImports                                   viewimports              [C#]              Web\\\\\\\/ASP.NET\\\\r\\\\nMVC ViewStart                                     viewstart                [C#]              Web\\\\\\\/ASP.NET\\\\r\\\\nBlazor Server App                                 blazorserver             [C#]              Web\\\\\\\/Blazor\\\\r\\\\nBlazor WebAssembly App                            blazorwasm               [C#]              Web\\\\\\\/Blazor\\\\\\\/WebAssembly\\\\r\\\\nASP.NET Core Empty                                web                      [C#], F#          Web\\\\\\\/Empty\\\\r\\\\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web\\\\\\\/MVC\\\\r\\\\nASP.NET Core Web App                              webapp                   [C#]              Web\\\\\\\/MVC\\\\\\\/Razor Pages\\\\r\\\\nASP.NET Core with Angular                         angular                  [C#]              Web\\\\\\\/MVC\\\\\\\/SPA\\\\r\\\\nASP.NET Core with React.js                        react                    [C#]              Web\\\\\\\/MVC\\\\\\\/SPA\\\\r\\\\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web\\\\\\\/MVC\\\\\\\/SPA\\\\r\\\\nRazor Class Library                               razorclasslib            [C#]              Web\\\\\\\/Razor\\\\\\\/Library\\\\\\\/Razor Class Library\\\\r\\\\nASP.NET Core Web API                              webapi                   [C#], F#          Web\\\\\\\/WebAPI\\\\r\\\\nASP.NET Core gRPC Service                         grpc                     [C#]              Web\\\\\\\/gRPC\\\\r\\\\ndotnet gitignore file                             gitignore                                  Config\\\\r\\\\nglobal.json file                                  globaljson                                 Config\\\\r\\\\nNuGet Config                                      nugetconfig                                Config\\\\r\\\\nDotnet local tool manifest file                   tool-manifest                              Config\\\\r\\\\nWeb Config                                        webconfig                                  Config\\\\r\\\\nSolution File                                     sln                                        Solution\\\\r\\\\nProtocol Buffer File                              proto                                      Web\\\\\\\/gRPC\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`Blazor WebAssembly App`テンプレートを選択すると、`ASP.NET Core hosted`と`Progressive Web Application`のチェックボックスが表示されました。\\\\r\\\\n\\\\r\\\\n`ASP.NET Core hosted`については[ASP.NET Core Blazor のホスティング モデル](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/aspnet\\\\\\\/core\\\\\\\/blazor\\\\\\\/hosting-models?view=aspnetcore-3.1)に詳細が書かれており、チェックするとBlazorサーバと同様にサーバ側で処理が行われるようになるので、チェックしないことにしました。\\\\r\\\\n\\\\r\\\\n`Progressive Web Application`については[ASP.NET Core Blazor WebAssembly を使用してプログレッシブ Web アプリケーションをビルドする](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/aspnet\\\\\\\/core\\\\\\\/blazor\\\\\\\/progressive-web-app?view=aspnetcore-3.1&tabs=visual-studio)に記載があり、チェックすることで何も損しなさそうなので、チェックをしてプロジェクトを作成しました。\\\\r\\\\n\\\\r\\\\nプロジェクト作成後、`F5`キーで実行すると、問題なくBlazor WebAssemblyアプリが起動しました。Chrome DevToolsでネットワークリソースを確認したところ、6.5MBと噂通り巨大なアプリサイズです（これでも少なくなったらしいですが）。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n68 requests, 6.5MB transferred, 18.0MB resources, Finish: 3.51s, DOMContentLoaded: 282ms, Load:291ms\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n2度目のページ取得ではだいぶ軽くなります。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n11 requests, 171kB transferred 508kB resources, Finish:1.63s, DOMContentLoaded: 359ms, Load:361ms\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nその後、todoページの作成まで一通り写経して、Blazorの基礎の基礎を理解しました。スタイルを一切変えていないので、見た目は少しヘンテコリンです。\\\\r\\\\n\\\\r\\\\nデフォルトテンプレートはbootstrap4のcssで装飾されています。公式のFluent Design実装はまだなく、[open issue](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/dotnet\\\\\\\/aspnetcore\\\\\\\/issues\\\\\\\/11229)で議論されているようです。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Awesome Blazor](https:\\\\\\\/\\\\\\\/awesomeopensource.com\\\\\\\/project\\\\\\\/AdrienTorris\\\\\\\/awesome-blazor)\\\"}\"}","{\"docRef\":\"angular\\\/angular-show-gist\",\"content\":\"{\\\"title\\\":\\\"Angularでgistを表示する\\\",\\\"date\\\":\\\"2019-11-14\\\",\\\"category\\\":\\\"Angular\\\",\\\"tag\\\":[\\\"gist\\\",\\\"embed\\\",\\\"postscribe\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n[Angularで動的にHTMLタグをコンポーネントに埋め込む](doc\\\\\\\/angular\\\\\\\/angular-embed-html-tag)<!--rehype:class=internal-link-->により、htmlを埋め込むことができたが、その中にscriptタグが含まれていた場合、表示させただけではscriptが実行されません。JQueryでいうところの`$()`に相当する、画面描画後にscriptを実行する処理が必要になります。\\\\r\\\\n\\\\r\\\\n本tech-log内で、gistのembedを表示するのに本課題を対応する必要があり、解決方法を調査しました。\\\\r\\\\n\\\\r\\\\n## PostScribeを利用する\\\\r\\\\n\\\\r\\\\n非同期にscriptを実行し、結果をDOMに書き込む[PostScribe](https:\\\\\\\/\\\\\\\/krux.github.io\\\\\\\/postscribe\\\\\\\/)というライブラリを利用することで、gistのembedを実現しました。\\\\r\\\\n\\\\r\\\\n**Markdownファイル(抜粋)**\\\\r\\\\n\\\\r\\\\n```html\\\\r\\\\ngistの表示デモ。class=\\\\\\\"gist\\\\\\\"のdivでgistのembedスクリプトを囲います\\\\r\\\\n<div class=\\\\\\\"gist\\\\\\\">\\\\r\\\\n  <script src=\\\\\\\"https:\\\\\\\/\\\\\\\/gist.github.com\\\\\\\/takumura\\\\\\\/bbff68078afb2d0846773965d1678c7c.js\\\\\\\"><\\\\\\\/script>\\\\r\\\\n<\\\\\\\/div>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n**document.component.ts（抜粋）**\\\\r\\\\n\\\\r\\\\n```ts\\\\r\\\\nimport {\\\\r\\\\n  AfterViewInit,\\\\r\\\\n  ChangeDetectorRef,\\\\r\\\\n  Component,\\\\r\\\\n  ElementRef,\\\\r\\\\n  OnDestroy,\\\\r\\\\n  OnInit,\\\\r\\\\n  ViewChild,\\\\r\\\\n} from '@angular\\\\\\\/core';\\\\r\\\\nimport postscribe from 'postscribe';\\\\r\\\\n\\\\r\\\\n@Component({\\\\r\\\\n  selector: \\\\\\\"app-document\\\\\\\",\\\\r\\\\n  templateUrl: \\\\\\\".\\\\\\\/document.component.html\\\\\\\",\\\\r\\\\n  styleUrls: [\\\\\\\".\\\\\\\/document.component.scss\\\\\\\", \\\\\\\".\\\\\\\/vs2015.css\\\\\\\"],\\\\r\\\\n  animations: [defaultRouteAnimation],\\\\r\\\\n})\\\\r\\\\nexport class DocumentComponent implements OnInit, OnDestroy, AfterViewInit {\\\\r\\\\n  docInfo: DocumentInfo | null;\\\\r\\\\n  isOpen: boolean = true;\\\\r\\\\n  tocList: TocItem[] | null;\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ template html中の<div #mdContent>を参照するオブジェクトを定義\\\\r\\\\n  @ViewChild(\\\\\\\"mdContent\\\\\\\")\\\\r\\\\n  mdRef: ElementRef<HTMLElement>;\\\\r\\\\n\\\\r\\\\n  private fragment: string;\\\\r\\\\n  private previousPath: string;\\\\r\\\\n  private onDestroy = new Subject();\\\\r\\\\n  private routeChangeSubject = new Subject();\\\\r\\\\n\\\\r\\\\n  constructor(\\\\r\\\\n    private markdownService: MarkdownService,\\\\r\\\\n    private location: Location,\\\\r\\\\n    private route: ActivatedRoute,\\\\r\\\\n    private loadingBarService: LoadingBarService,\\\\r\\\\n    private changeDetector: ChangeDetectorRef,\\\\r\\\\n  ) {}\\\\r\\\\n\\\\r\\\\n  ngOnInit() {\\\\r\\\\n    ...\\\\r\\\\n    this.route.url.pipe(takeUntil(this.onDestroy)).subscribe(params => {\\\\r\\\\n      const docRef = params.map(x => x.path).join(\\\\\\\"\\\\\\\/\\\\\\\");\\\\r\\\\n      if (docRef !== this.previousPath) {\\\\r\\\\n        this.docInfo = null;\\\\r\\\\n        this.isOpen = false;\\\\r\\\\n        this.getMarkdownDocInfo(docRef);\\\\r\\\\n      } else {\\\\r\\\\n        this.loadingBarService.hide();\\\\r\\\\n      }\\\\r\\\\n      this.previousPath = docRef;\\\\r\\\\n    });\\\\r\\\\n  }\\\\r\\\\n  ...\\\\r\\\\n  private getMarkdownDocInfo(docRef: string) {\\\\r\\\\n    const path = this.location.normalize('assets\\\\\\\/json\\\\\\\/' + docRef + '.json');\\\\r\\\\n\\\\r\\\\n    this.markdownService\\\\r\\\\n      .getDocument(path)\\\\r\\\\n      .pipe(takeUntil(this.onDestroy))\\\\r\\\\n      .subscribe(\\\\r\\\\n        doc => {\\\\r\\\\n          this.docInfo = doc;\\\\r\\\\n\\\\r\\\\n          \\\\\\\/\\\\\\\/ detect change to update virtual DOM\\\\r\\\\n          \\\\\\\/\\\\\\\/ and allow to access mdContentRef\\\\r\\\\n          this.cdRef.detectChanges();\\\\r\\\\n          this.mdContentRef.nativeElement.innerHTML = this.docInfo.bodyHtml;\\\\r\\\\n\\\\r\\\\n          this.showGist();\\\\r\\\\n          this.generateToc();\\\\r\\\\n          this.routeChangeSubject.next();\\\\r\\\\n        },\\\\r\\\\n        err => console.error('MarkdownService', err),\\\\r\\\\n      );\\\\r\\\\n  }\\\\r\\\\n\\\\r\\\\n  private showGist() {\\\\r\\\\n    const gists = this.mdContentRef.nativeElement.querySelectorAll('div.gist');\\\\r\\\\n    gists.forEach(gist => {\\\\r\\\\n      postscribe(gist, gist.innerHTML);\\\\r\\\\n    });\\\\r\\\\n  }\\\\r\\\\n  ...\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`this.mdContentRef.nativeElement.innerHTML = this.docInfo.bodyHtml;`でhtmlをDOMに反映させた後で、`showGist()`関数を呼んでいます。\\\\r\\\\n\\\\r\\\\n`showGist`関数では、`this.mdContentRef.nativeElement.querySelectorAll('div.gist')`で`gist`クラスを持つ`div`タグをリストアップし、発見したすべての`div`に対して`div.innerHTML`、すなわちembedのscriptを実行しています。\\\\r\\\\n\\\\r\\\\n```ts\\\\r\\\\npostscribe(\\\\r\\\\n  gist,           \\\\\\\/\\\\\\\/ div.gistのtag。このdivの中にscript実行結果が書き込まれる。\\\\r\\\\n  gist.innerHTML  \\\\\\\/\\\\\\\/ div.innerHTML = gistのembed script\\\\r\\\\n);\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [postscribe - Github](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/krux\\\\\\\/postscribe)\\\\r\\\\n- [VSCode: Settings Syncで環境設定を共有する](doc\\\\\\\/env\\\\\\\/vscode-settings-sync)<!--rehype:class=internal-link-->\\\\r\\\\n\\\"}\"}","{\"docRef\":\"vue\\\/vue_electron_secure_app\",\"content\":\"{\\\"title\\\":\\\"NuxtJS + Electronアプリで、セキュアなプロセス間通信を構成する\\\",\\\"date\\\":\\\"2021-05-10\\\",\\\"category\\\":\\\"Vue\\\",\\\"tag\\\":[\\\"vue\\\",\\\"nuxtjs\\\",\\\"electron\\\",\\\"electron-store\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nelectronアプリでは脆弱性対応のため、ローカルファイルシステムやOSの処理をNuxtJS側（レンダラープロセス）では行わず、メインプロセス側で実行することが推奨されています。\\\\r\\\\n\\\\r\\\\nメインプロセスとレンダラープロセス間の通信方法はelectronのバージョンアップと共に頻繁に変更されているようなので、現時点(electron v11)での安全な方法について調べ、実装していきます。\\\\r\\\\n\\\\r\\\\n## 環境確認\\\\r\\\\n\\\\r\\\\n- エディタ: VSCode\\\\r\\\\n- nodejs: v12.16.0\\\\r\\\\n- yarn: 1.22.4\\\\r\\\\n- electron: 11.1.1\\\\r\\\\n\\\\r\\\\n## 情報収集\\\\r\\\\n\\\\r\\\\n色々なやり方があるようで、書きつつ試しつつかなり試行錯誤しました。\\\\r\\\\n\\\\r\\\\nまず初めにこの記事を読みました。\\\\r\\\\n\\\\r\\\\n- [Electron（v.12.0.0 現在）の IPC 通信入門 - よりセキュアな方法への変遷](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/hibara\\\\\\\/items\\\\\\\/c59fb6924610fc22a9db)\\\\r\\\\n- [Electronのセキュリティについて大きく誤認していたこと](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/sprout2000\\\\\\\/items\\\\\\\/2b65f7d02e825549804b)\\\\r\\\\n\\\\r\\\\nどうやら「renderer側でnodejsのコードを走らせない」「main側ではpreload.tsの中でrenderer側から呼び出せる処理をexposeする」のが大事なようです。\\\\r\\\\n\\\\r\\\\n当初は[vuex-electron-persisted-state](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/chenjietao\\\\\\\/vuex-electron-persisted-state)を使えばいいのかなと思ったのですが、mainとrendererの処理が分離できない感じだったので、このモジュールの中で使用している[electron-store](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/sindresorhus\\\\\\\/electron-store)を使って自分で実装することにしました。\\\\r\\\\n\\\\r\\\\n## electron-storeを使った実装トライアル\\\\r\\\\n\\\\r\\\\nまずはインストールします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add electron-store\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nそしてmain.tsから更新していきます。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/\\\\\\\/ main.ts\\\\r\\\\nimport nuxtConfig from '..\\\\\\\/renderer\\\\\\\/nuxt.config'\\\\r\\\\nconst http = require('http')\\\\r\\\\nconst path = require('path')\\\\r\\\\nconst { Nuxt, Builder } = require('nuxt')\\\\r\\\\n- const electron = require('electron')\\\\r\\\\n+ const { app, BrowserWindow, ipcMain } = require('electron')\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ @ts-ignore\\\\r\\\\nnuxtConfig.rootDir = path.resolve('src\\\\\\\/renderer')\\\\r\\\\n\\\\\\\/\\\\\\\/ @ts-ignore\\\\r\\\\nconst isDev = nuxtConfig.dev\\\\r\\\\nlet _NUXT_URL_ = ''\\\\r\\\\n\\\\r\\\\nconst nuxt = new Nuxt(nuxtConfig)\\\\r\\\\n+ const storeFilePathString = path.join(app.getPath('documents'), '.\\\\\\\/electron-app')\\\\r\\\\n+\\\\r\\\\nif (isDev) {\\\\r\\\\n  nuxt.ready().then((n: { render: any }) => {\\\\r\\\\n    const builder = new Builder(n)\\\\r\\\\n    const server = http.createServer(n.render)\\\\r\\\\n    builder.build().catch((err: any) => {\\\\r\\\\n      console.error(err)\\\\r\\\\n      process.exit(1)\\\\r\\\\n    })\\\\r\\\\n    server.listen()\\\\r\\\\n    _NUXT_URL_ = `http:\\\\\\\/\\\\\\\/localhost:${server.address().port}`\\\\r\\\\n    console.log(`Nuxt working on ${_NUXT_URL_}`)\\\\r\\\\n-\\\\r\\\\n-     createElectronApp()\\\\r\\\\n  })\\\\r\\\\n} else {\\\\r\\\\n  _NUXT_URL_ = 'file:\\\\\\\/\\\\\\\/' + path.resolve(__dirname, '..\\\\\\\/..\\\\\\\/dist\\\\\\\/nuxt-build\\\\\\\/index.html')\\\\r\\\\n-   createElectronApp()\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n+ createElectronApp()\\\\r\\\\n+\\\\r\\\\nfunction createElectronApp() {\\\\r\\\\n+  \\\\\\\/\\\\\\\/ Keep a global reference of the window object, if you don't, the window will\\\\r\\\\n+  \\\\\\\/\\\\\\\/ be closed automatically when the JavaScript object is garbage collected.\\\\r\\\\n  let win: any = null\\\\r\\\\n-  const app = electron.app\\\\r\\\\n+\\\\r\\\\n  const newWin = () => {\\\\r\\\\n-     win = new electron.BrowserWindow({\\\\r\\\\n+     win = new BrowserWindow({\\\\r\\\\n      width: 1400,\\\\r\\\\n      height: 1000,\\\\r\\\\n      webPreferences: {\\\\r\\\\n-        nodeIntegration: false,\\\\r\\\\n-        contextIsolation: false,\\\\r\\\\n+        contextIsolation: true,\\\\r\\\\n        preload: path.resolve(path.join(__dirname, 'preload.js')),\\\\r\\\\n-        webSecurity: false,\\\\r\\\\n      },\\\\r\\\\n    })\\\\r\\\\n\\\\r\\\\n    win.on('closed', () => (win = null))\\\\r\\\\n    if (isDev) {\\\\r\\\\n      const { default: installExtension, VUEJS_DEVTOOLS } = require('electron-devtools-installer')\\\\r\\\\n      installExtension(VUEJS_DEVTOOLS.id)\\\\r\\\\n        .then((name: any) => {\\\\r\\\\n          console.log(`Added Extension:  ${name}`)\\\\r\\\\n          win.webContents.openDevTools()\\\\r\\\\n        })\\\\r\\\\n        .catch((err: any) => console.log('An error occurred: ', err))\\\\r\\\\n      const pollServer = () => {\\\\r\\\\n        http\\\\r\\\\n          .get(_NUXT_URL_, (res: any) => {\\\\r\\\\n            if (res.statusCode === 200) {\\\\r\\\\n              win.loadURL(_NUXT_URL_)\\\\r\\\\n            } else {\\\\r\\\\n              console.log('restart poolServer')\\\\r\\\\n              setTimeout(pollServer, 300)\\\\r\\\\n            }\\\\r\\\\n          })\\\\r\\\\n          .on('error', pollServer)\\\\r\\\\n      }\\\\r\\\\n      pollServer()\\\\r\\\\n    } else {\\\\r\\\\n      return win.loadURL(_NUXT_URL_)\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n\\\\r\\\\n+  \\\\\\\/\\\\\\\/ setup electron-store for persisted state\\\\r\\\\n+  const Store = require('electron-store')\\\\r\\\\n+  const store = new Store({ cwd: storeFilePathString })\\\\r\\\\n+  ipcMain.handle('GET_STORE_VALUE', (_: any, key: any) => {\\\\r\\\\n+    const result = store.get(key)\\\\r\\\\n+    return result\\\\r\\\\n+  })\\\\r\\\\n+  ipcMain.on('SYNC_STORE', (_: any, args: any) => {\\\\r\\\\n+    store.set('data', args)\\\\r\\\\n+  })\\\\r\\\\n+\\\\r\\\\n+  \\\\\\\/\\\\\\\/ This method will be called when Electron has finished\\\\r\\\\n+  \\\\\\\/\\\\\\\/ initialization and is ready to create browser windows.\\\\r\\\\n+  \\\\\\\/\\\\\\\/ Some APIs can only be used after this event occurs.\\\\r\\\\n  app.on('ready', newWin)\\\\r\\\\n-  app.on('window-all-closed', () => app.quit())\\\\r\\\\n+\\\\r\\\\n+  app.on('window-all-closed', () => {\\\\r\\\\n+    \\\\\\\/\\\\\\\/ On macOS it is common for applications and their menu bar\\\\r\\\\n+    \\\\\\\/\\\\\\\/ to stay active until the user quits explicitly with Cmd + Q\\\\r\\\\n+    if (process.platform !== 'darwin') {\\\\r\\\\n+      app.quit()\\\\r\\\\n+    }\\\\r\\\\n+  })\\\\r\\\\n+\\\\r\\\\n  app.on('activate', () => win === null && newWin())\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nポイントはこの部分。\\\\r\\\\n\\\\r\\\\n- ipcMain.handle('GET_STORE_VALUE', ...)は、renderer側から初期stateを取得する際に呼ばれ、store全体を返します。keyには`data`が入ります。\\\\r\\\\n- ipcMain.on('SYNC_STORE', ...)は、rendererのstoreを`store.set()`でファイルに書き出しています。argsには最新の状態のstore全体が入ります。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n  \\\\\\\/\\\\\\\/ setup electron-store for persisted state\\\\r\\\\n  const Store = require('electron-store')\\\\r\\\\n  const store = new Store({ cwd: storeFilePathString })\\\\r\\\\n  ipcMain.handle('GET_STORE_VALUE', (_: any, key: any) => {\\\\r\\\\n    const result = store.get(key)\\\\r\\\\n    return result\\\\r\\\\n  })\\\\r\\\\n  ipcMain.on('SYNC_STORE', (_: any, args: any) => {\\\\r\\\\n    store.set('data', args)\\\\r\\\\n  })\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nrenderer側から処理が呼び出せるようにpreload.tsに処理を追加します。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ preload.ts\\\\r\\\\nconst { contextBridge, ipcRenderer } = require('electron')\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ Expose protected methods that allow the renderer process to use\\\\r\\\\n\\\\\\\/\\\\\\\/ the ipcRenderer without exposing the entire object\\\\r\\\\ncontextBridge.exposeInMainWorld('api', {\\\\r\\\\n  getInitialState: () => ipcRenderer.invoke('GET_STORE_VALUE', 'data'),\\\\r\\\\n  syncStore: (state: string) => ipcRenderer.send('SYNC_STORE', state),\\\\r\\\\n})\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nrenderer側では`fecth()`と`mounted()`のライフサイクルフックを追加して、main側とstateデータのやり取りを行います。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/\\\\\\\/ TodoList.vue\\\\r\\\\n<template>\\\\r\\\\n  <v-container>\\\\r\\\\n    <v-list>\\\\r\\\\n      <v-list-item v-for=\\\\\\\"todoData in getTodoList\\\\\\\" :key=\\\\\\\"todoData.name\\\\\\\">\\\\r\\\\n        <v-list-item-content class=\\\\\\\"px-2\\\\\\\">\\\\r\\\\n          <todo-data :todo=\\\\\\\"todoData\\\\\\\" \\\\\\\/>\\\\r\\\\n        <\\\\\\\/v-list-item-content>\\\\r\\\\n      <\\\\\\\/v-list-item>\\\\r\\\\n    <\\\\\\\/v-list>\\\\r\\\\n  <\\\\\\\/v-container>\\\\r\\\\n<\\\\\\\/template>\\\\r\\\\n<script lang=\\\\\\\"ts\\\\\\\">\\\\r\\\\nimport Vue from 'vue'\\\\r\\\\nimport TodoData from '.\\\\\\\/TodoData.vue'\\\\r\\\\n+ import { accessorType } from '~\\\\\\\/store'\\\\r\\\\nexport default Vue.extend({\\\\r\\\\n  components: {\\\\r\\\\n    TodoData,\\\\r\\\\n  },\\\\r\\\\n+  async fetch() {\\\\r\\\\n+    if (window.api) {\\\\r\\\\n+      const state: typeof accessorType = await window.api.getInitialState()\\\\r\\\\n+      if (state) {\\\\r\\\\n+        this.$store.replaceState(state)\\\\r\\\\n+      }\\\\r\\\\n+    }\\\\r\\\\n+  },\\\\r\\\\n+  data() {\\\\r\\\\n+    return {\\\\r\\\\n+      unsubscribe() {},\\\\r\\\\n+    }\\\\r\\\\n+  },\\\\r\\\\n  computed: {\\\\r\\\\n    getTodoList() {\\\\r\\\\n      return this.$accessor.todos.getTodoList\\\\r\\\\n    },\\\\r\\\\n  },\\\\r\\\\n+  mounted() {\\\\r\\\\n+    this.unsubscribe = this.$store.subscribe((mutation, state) => {\\\\r\\\\n+      if (mutation.type === 'todos\\\\\\\/add' || mutation.type === 'todos\\\\\\\/remove') {\\\\r\\\\n+        if (window.api) window.api.syncStore(state)\\\\r\\\\n+      }\\\\r\\\\n+    })\\\\r\\\\n+  },\\\\r\\\\n+  beforeDestroy() {\\\\r\\\\n+    this.unsubscribe()\\\\r\\\\n+  },\\\\r\\\\n})\\\\r\\\\n<\\\\\\\/script>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nthis.$store.subscribeで作成したsubscriptionをunsubscribeするための記述が色々トリッキーでした。インテリセンスに頼って書いたため、正直完璧には理解できませんでした。\\\\r\\\\n\\\\r\\\\nさらに、contextBridgeでexposeした`getInitialState`と`syncStore`は`window.api`以下に注入されるのですが、このままでは型がanyのため存在しないと怒られてしまいます。\\\\r\\\\n\\\\r\\\\nエラーを抑制するために、型定義ファイルを追加しました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ types\\\\\\\/global.d.ts\\\\r\\\\nimport { accessorType } from '~\\\\\\\/store'\\\\r\\\\n\\\\r\\\\ndeclare global {\\\\r\\\\n  interface Window {\\\\r\\\\n    api: Sandbox\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nexport interface Sandbox {\\\\r\\\\n  getInitialState: () => Promise<typeof accessorType>\\\\r\\\\n  syncStore: (state: string) => void\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nこれで実装は完了です。`todos\\\\\\\/add`または`todos\\\\\\\/remove`のmutationが行われるとconfig.jsonファイルが`[ユーザのドキュメントフォルダ]\\\\\\\\electron-app`以下に作成されました（削除を実装してなかったのでaddしか試していませんが。。。）\\\\r\\\\n\\\\r\\\\nそしてTodo画面を再度開いた時には、前回作成したタスクが読み込まれてタスク一覧に表示されます。\\\\r\\\\n\\\\r\\\\n## electronのdebug実行\\\\r\\\\n\\\\r\\\\nなかなか実装がうまくいかず試行錯誤する中で、electron appをdebugする方法を少し学びました。今のところmain側とrenderer側を同時にdebugすることができず、それぞれ別の方法でdebug実行しました。\\\\r\\\\n\\\\r\\\\n### renderer側のdebug\\\\r\\\\n\\\\r\\\\nrenderer側のdebugに関して特に難しいことはありません。electron appをdevelopment modeで実行し、vue.js devtoolsを使ってchromeと同じ感覚でjavascriptのdebugができます。\\\\r\\\\n\\\\r\\\\n### main側のdebug\\\\r\\\\n\\\\r\\\\n.vscode\\\\\\\\launch.jsonを用意することで、vscodeからdebug実行が可能です。注意点として、renderer側はbuild済みのモジュールが使われるようなので、事前に`nuxt-ts generate`しておく必要があります。そうしないとrenderer側が古い状態で尚且つrenderer側のコードがdebugできないため、状況が全く掴めずハマります。（ハマりました）\\\\r\\\\n\\\\r\\\\n``` json\\\\r\\\\n{\\\\r\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"0.2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"configurations\\\\\\\": [\\\\r\\\\n    {\\\\r\\\\n      \\\\\\\"name\\\\\\\": \\\\\\\"Debug Main Process\\\\\\\",\\\\r\\\\n      \\\\\\\"type\\\\\\\": \\\\\\\"node\\\\\\\",\\\\r\\\\n      \\\\\\\"request\\\\\\\": \\\\\\\"launch\\\\\\\",\\\\r\\\\n      \\\\\\\"cwd\\\\\\\": \\\\\\\"${workspaceFolder}\\\\\\\",\\\\r\\\\n      \\\\\\\"runtimeExecutable\\\\\\\": \\\\\\\"${workspaceFolder}\\\\\\\/node_modules\\\\\\\/.bin\\\\\\\/electron\\\\\\\",\\\\r\\\\n      \\\\\\\"windows\\\\\\\": {\\\\r\\\\n        \\\\\\\"runtimeExecutable\\\\\\\": \\\\\\\"${workspaceFolder}\\\\\\\/node_modules\\\\\\\/.bin\\\\\\\/electron.cmd\\\\\\\"\\\\r\\\\n      },\\\\r\\\\n      \\\\\\\"args\\\\\\\": [\\\\\\\".\\\\\\\"],\\\\r\\\\n      \\\\\\\"outputCapture\\\\\\\": \\\\\\\"std\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n  ]\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Nuxt × TypeScript × Electron × SQLiteを動かしてみた2](https:\\\\\\\/\\\\\\\/blog.mamansoft.net\\\\\\\/2019\\\\\\\/12\\\\\\\/29\\\\\\\/nuxt-typescript-electron-sqlite-project2\\\\\\\/)\\\\r\\\\n- [secure-electron-store - Github](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/reZach\\\\\\\/secure-electron-store)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"nodejs\\\/update-node-modules\",\"content\":\"{\\\"title\\\":\\\"node_modulesを更新する\\\",\\\"date\\\":\\\"2020-02-09\\\",\\\"category\\\":\\\"Nodejs\\\",\\\"tag\\\":[\\\"npm\\\",\\\"dependabot\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nGithubで管理している Node.jsアプリケーションで、依存packageのバージョンにセキュリティリスクがある場合に、Dependabotが警告してくれました。この警告を解消する手順を確認します。\\\\r\\\\n\\\\r\\\\n## 警告の内容を確認\\\\r\\\\n\\\\r\\\\ntech-logのリポジトリで、2020-02-09 時点で9件のSecurity Alertsがレポートされていました。\\\\r\\\\n\\\\r\\\\n<img src=\\\\\\\"assets\\\\\\\/images\\\\\\\/update-node-modules\\\\\\\/update-node-modules-1.png\\\\\\\" alt=\\\\\\\"security alerts\\\\\\\" title=\\\\\\\"security alerts\\\\\\\">\\\\r\\\\n\\\\r\\\\nいずれもpackage.lock.jsonに対しての変更が提案されており、間接的に依存している参照の更新が必要です。\\\\r\\\\n\\\\r\\\\n## npm auditを確認\\\\r\\\\n\\\\r\\\\nnpmにも監査のコマンドがあったことを思い出し、状況を確認してみました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> npm audit\\\\r\\\\n...\\\\r\\\\nfound 625 vulnerabilities (2 low, 7 moderate, 615 high, 1 critical) in 42979 scanned packages\\\\r\\\\n  run `npm audit fix` to fix 624 of them.\\\\r\\\\n  1 vulnerability requires semver-major dependency updates.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n625件。。。今後の課題にしようと思います。\\\\r\\\\n\\\\r\\\\n## 個々のPRをnpm ciして確認\\\\r\\\\n\\\\r\\\\n`npm ci`コマンドにより、pacakge.lock.json を元にnode_modulesを再構築してくれるようでした。なので「個々のPRに対してローカルリポジトリ上で`npm ci`し、appの挙動に問題がなければmasterへmergeする」という方法を試しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> npm ci\\\\r\\\\nnpm WARN prepare removing existing node_modules\\\\\\\/ before installation\\\\r\\\\n...\\\\r\\\\nadded 1199 packages in 135.974s\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n作業開始時にnode_modulesは削除されると公式サイトに書いてありましたが、実行時にも警告が表示されました。\\\\r\\\\n\\\\r\\\\nvulnerabilitiesも着実に減少しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\ntar 適用時 = found 623 vulnerabilities (2 low, 7 moderate, 613 high, 1 critical) in 42979 scanned packages\\\\r\\\\nfstream 適用時 = found 622 vulnerabilities (2 low, 7 moderate, 612 high, 1 critical) in 42979 scanned packages\\\\r\\\\njs-yaml 適用時 = found 617 vulnerabilities (2 low, 4 moderate, 610 high, 1 critical) in 42979 scanned packages\\\\r\\\\nhandlebars 適用時 = found 616 vulnerabilities (2 low, 6 moderate, 608 high) in 42978 scanned packages\\\\r\\\\nlodash 適用時 = found 588 vulnerabilities (2 low, 7 moderate, 578 high, 1 critical) in 42979 scanned packages\\\\r\\\\nlodash.mergewith 適用時 = found 574 vulnerabilities (2 low, 3 moderate, 569 high) in 42978 scanned packages\\\\r\\\\nmixin-deep 適用時 = found 387 vulnerabilities (2 low, 3 moderate, 382 high) in 42978 scanned packages\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nまだまだ多くの更新が残っていますが、以前気軽に`npm update`したら意図せずangularのバージョンが上がって酷い目にあったので、残りはAngularのアップグレード後に確認しようと思います。。\\\\r\\\\n\\\\r\\\\n## 作業時に参照した情報\\\\r\\\\n\\\\r\\\\n- [Configuring automated security updates](https:\\\\\\\/\\\\\\\/help.github.com\\\\\\\/ja\\\\\\\/github\\\\\\\/managing-security-vulnerabilities\\\\\\\/configuring-automated-security-updates)\\\\r\\\\n- [npm-ci](https:\\\\\\\/\\\\\\\/docs.npmjs.com\\\\\\\/cli\\\\\\\/ci.html)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"env\\\/git-ssh-configuration\",\"content\":\"{\\\"title\\\":\\\"Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える\\\",\\\"date\\\":\\\"2022-07-23\\\",\\\"category\\\":\\\"環境設定\\\",\\\"tag\\\":[\\\"git\\\",\\\"vscode\\\",\\\"openssh\\\",\\\"windows10\\\",\\\"windows 11\\\"],\\\"body\\\":\\\"## 経緯\\\\r\\\\n\\\\r\\\\n- これまではSourceTreeを利用してGithub, Bitbucketのリモートリポジトリを操作していました\\\\r\\\\n- 接続にはsshを利用し、SourceTreeに付属のPuttyおよびPageantで鍵の運用をしていました\\\\r\\\\n- [angular-cli-ghpagesを利用する](doc\\\\\\\/angular\\\\\\\/angular-setup-ghpages)<!--rehype:class=internal-link-->の作業で、origin\\\\\\\/gh-pagesにpushする処理でエラーが発生\\\\r\\\\n- VSCodeをPutty(Pageant)を連携する方法を調べたが見つからず、ssh clientの利用方法を見直す必要がありました\\\\r\\\\n\\\\r\\\\n## 環境\\\\r\\\\n\\\\r\\\\n- Windows 10 May 2019 Update(バージョン1903)\\\\r\\\\n- SourceTree 3.1.3\\\\r\\\\n\\\\r\\\\n## 実施した手順\\\\r\\\\n\\\\r\\\\nまず初めに、VSCodeからssh接続でremoteにpushする方法について、google検索で情報収集しました。Puttyを利用している記事はヒットせず、openssh clientの設定を行う記事が大半でした。\\\\r\\\\n\\\\r\\\\n開発環境はWindows 10 May 2019 Update(バージョン1903)が適用済みで、特に設定不要でssh clientが利用可能になっていました。なのでこれを利用することにします。\\\\r\\\\n\\\\r\\\\n途中までSourceTreeで作業をしていたので、鍵の作成や公開鍵のgithubへの登録は完了済みでした。なのでssh clientに秘密鍵を登録して使えるようにします。\\\\r\\\\n\\\\r\\\\n### OpenSSH Authentication Agentサービスの設定変更\\\\r\\\\n\\\\r\\\\nOpenSSH Authentication Agentサービスは無効状態でした。サービスを起動し、設定を自動起動に変更しました。\\\\r\\\\n\\\\r\\\\n### ppkファイルからOpenSSH形式の秘密鍵を生成\\\\r\\\\n\\\\r\\\\nPutty(Pageant)が利用している秘密鍵(.ppk)はOpenSSHと互換性のない独自形式です。ssh clientで利用するためにはOpenSSH形式に変換してあげる必要があります。\\\\r\\\\n\\\\r\\\\n1. SourceTreeのメニューから`SSH キーの生成\\\\\\\/インポート`を選択\\\\\\\\\\\\r\\\\n    <img src=\\\\\\\"assets\\\\\\\/images\\\\\\\/git-ssh-configuration\\\\\\\/git-ssh-configuration-1.png\\\\\\\" alt=\\\\\\\"puttygen.exe\\\\\\\" title=\\\\\\\"puttygen.exe\\\\\\\">\\\\r\\\\n\\\\r\\\\n2. Loadボタンを押して、githubの秘密鍵(.ppk)を読み込み、メニュの`Conversions` > `Export OpenSSH key`を選択。OpenSSh形式の秘密鍵: `id_rsa`を生成\\\\r\\\\n3. 作成した`id_ras`ファイルを`c:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\.ssh`フォルダに配置\\\\r\\\\n\\\\r\\\\n1.で実行されるツール(puttygen.exe)は、私の環境では`c:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\AppData\\\\\\\\Local\\\\\\\\SourceTree\\\\\\\\app-3.1.3\\\\\\\\tools\\\\\\\\putty\\\\\\\\puttygen.exe`にありました。\\\\r\\\\n\\\\r\\\\n`c:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\.ssh`も存在していましたが、中身は空でした。\\\\r\\\\n\\\\r\\\\n### ssh-agentに秘密鍵を登録\\\\r\\\\n\\\\r\\\\n以下のコマンドを実行します。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> cd c:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\.ssh\\\\r\\\\n> ssh-add id_rsa\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nパスフレーズを聞かれるので、正しく入力すると登録が完了しました。\\\\r\\\\n\\\\r\\\\nこれで、gitコマンドを使ってリモートリポジトリを操作できるようになりました。\\\\r\\\\n\\\\r\\\\n## SourceTreeの併用について\\\\r\\\\n\\\\r\\\\nこれまで通りSourceTreeも併用していきたいので、鍵の管理フォルダを`c:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\.ssh`に変更しました。\\\\r\\\\n\\\\r\\\\nそして、これまで鍵長2048でキーを作成していることに気が付いたので、鍵長4096のキーにすべて置き換えることにしました。\\\\r\\\\n\\\\r\\\\nBitbucket用、Github用に別々のキーを作成して管理していましたが、今回はAzure DevOpsを含めた3つのgitリポジトリへのアクセスを、共通した1つの鍵で管理することにしました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n.ssh> dir\\\\r\\\\n\\\\r\\\\nMode                LastWriteTime         Length Name\\\\r\\\\n----                -------------         ------ ----\\\\r\\\\n-a----       2019\\\\\\\/08\\\\\\\/15     14:11           3311 id_rsa\\\\r\\\\n-a----       2019\\\\\\\/08\\\\\\\/15     14:10           2719 id_rsa.ppk\\\\r\\\\n-a----       2019\\\\\\\/08\\\\\\\/15     15:13            739 id_rsa.pub\\\\r\\\\n-a----       2019\\\\\\\/08\\\\\\\/15     15:49           4377 known_hosts\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 環境変数の追加\\\\r\\\\n\\\\r\\\\n後日、Windows 11でgit for windowsをscoopを使ってインストール後にOpenSSH Agentの設定を行ったのですが、登録したはずのパスフレーズがうまく利用されない問題が発生しました。gitコマンドでremoteへアクセス時に毎回再入力ダイアログが表示されます。\\\\r\\\\n\\\\r\\\\n`コントロールパネル` > `ユーザアカウント` > `環境変数の変更`から、ユーザ環境変数`GIT_SSH`を追加して解決しました。\\\\r\\\\n\\\\r\\\\n- variable: GIT_SSH\\\\r\\\\n- value: C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\OpenSSH\\\\\\\\ssh.exe\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n## 作業時に参照した情報\\\\r\\\\n\\\\r\\\\n- [PuTTYを卒業してWindows 10標準のssh client（ベータ）に切り替えた](http:\\\\\\\/\\\\\\\/www.freia.jp\\\\\\\/taka\\\\\\\/blog\\\\\\\/windows-native-ssh-client\\\\\\\/index.html)\\\\r\\\\n- [Use SSH key authentication](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-us\\\\\\\/azure\\\\\\\/devops\\\\\\\/repos\\\\\\\/git\\\\\\\/use-ssh-keys-to-authenticate?view=azure-devops)\\\\r\\\\n- [Why git can't remember my passphrase under Windows - stackoverflow](https:\\\\\\\/\\\\\\\/stackoverflow.com\\\\\\\/questions\\\\\\\/370030\\\\\\\/why-git-cant-remember-my-passphrase-under-windows)\\\"}\"}","{\"docRef\":\"csharp\\\/create-angular-spa-with-net6-backend\",\"content\":\"{\\\"title\\\":\\\".NET6とAngular v13でSPAサイトを作る（バックエンド）\\\",\\\"date\\\":\\\"2022-01-06\\\",\\\"category\\\":\\\"csharp\\\",\\\"tag\\\":[\\\"net6\\\",\\\"angular v13\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n本サイトは自作のwebサイト生成エンジンで生成されています。自作エンジンは2019年に.NET Core 2.1とAngular v7で開発しました。\\\\r\\\\n\\\\r\\\\nそれから時は流れ、2021年末時点でバックエンド側は.NET6に、フロントエンド側はAngular v13にそれぞれバージョンアップされています。\\\\r\\\\n\\\\r\\\\n進化の波に取り残されないように、最新バージョンのモジュールを使ってwebサイト生成エンジンを再開発してみようと思います。\\\\r\\\\n\\\\r\\\\nこの記事では、バックエンド編ということで.NET6のASP.NET Core SPAプロジェクト側のBackground Serviceと、Markdownを記事ファイルをJsonへ変換する機構を実装していきます。\\\\r\\\\n\\\\r\\\\n## Backend Service\\\\r\\\\n\\\\r\\\\n旧webサイト生成エンジンでは、[この記事](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-gb\\\\\\\/dotnet\\\\\\\/architecture\\\\\\\/microservices\\\\\\\/multi-container-microservice-net-applications\\\\\\\/background-tasks-with-ihostedservice)を参考に、MarkdownファイルをJsonに変換するBackgroundServiceをASP.NET Coreのプロセスに登録していました。\\\\r\\\\n\\\\r\\\\n[この記事](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/en-us\\\\\\\/aspnet\\\\\\\/core\\\\\\\/migration\\\\\\\/50-to-60-samples?view=aspnetcore-6.0#add-services)を見るに、ASP.NET Core アプリの新しい .NET 6 最小ホスティング モデル(minimal hosting model)でも、登録方法の書き方が変わっただけで同じようにBackground Serviceを登録できそうです。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/\\\\\\\/ Program.cs\\\\r\\\\n\\\\r\\\\n @@ -1,3 +1,5 @@\\\\r\\\\n+using Net6MarkdownWebEngine.Backend.Services;\\\\r\\\\n+\\\\r\\\\nvar builder = WebApplication.CreateBuilder(args);\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ Add services to the container.\\\\r\\\\n\\\\r\\\\n @@ -7,6 +9,27 @@ builder.Services.AddControllers();\\\\r\\\\nbuilder.Services.AddEndpointsApiExplorer();\\\\r\\\\nbuilder.Services.AddSwaggerGen();\\\\r\\\\n\\\\r\\\\n+\\\\\\\/\\\\\\\/ \\\\\\\/\\\\\\\/ Add md2json converter service\\\\r\\\\n+\\\\\\\/\\\\\\\/builder.Services.AddSingleton<IService, MarkdownConverterService>();\\\\r\\\\n+\\\\r\\\\n+\\\\\\\/\\\\\\\/ Add Documents Watch Service\\\\r\\\\n+var contetRootPath = builder.Environment.ContentRootPath;\\\\r\\\\n+var isDevelopment = builder.Environment.IsDevelopment();\\\\r\\\\n+builder.Services.Configure<DocumentsWatchServiceOptions> (options =>\\\\r\\\\n+{\\\\r\\\\n+    \\\\\\\/\\\\\\\/ TODO: review correct input\\\\\\\/output directory path\\\\r\\\\n+    options.InputDirectry = Path.Combine(contetRootPath, \\\\\\\"..\\\\\\\/AngularStandalone\\\\\\\/src\\\\\\\/assets\\\\\\\/docs\\\\\\\");\\\\r\\\\n+    if (isDevelopment)\\\\r\\\\n+    {\\\\r\\\\n+        options.OutputDirectry = Path.Combine(contetRootPath, \\\\\\\"..\\\\\\\/AngularStandalone\\\\\\\/src\\\\\\\/assets\\\\\\\/json\\\\\\\");\\\\r\\\\n+    }\\\\r\\\\n+    else\\\\r\\\\n+    {\\\\r\\\\n+        options.OutputDirectry = Path.Combine(contetRootPath, \\\\\\\"..\\\\\\\/AngularStandalone\\\\\\\/dist\\\\\\\/assets\\\\\\\/+json\\\\\\\");\\\\r\\\\n+    }\\\\r\\\\n+});\\\\r\\\\n+builder.Services.AddSingleton<Microsoft.Extensions.Hosting.IHostedService, DocumentsWatchService>();\\\\r\\\\n\\\\r\\\\nvar app = builder.Build();\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ Configure the HTTP request pipeline.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## Markdown to Json Converter\\\\r\\\\n\\\\r\\\\nコンソールアプリケーションのプログラムも、.NET 6からはシンプルな最上位レベルのステートメントのテンプレートで生成されていました。\\\\r\\\\n\\\\r\\\\nですが、シンプルな形式でのうまい記述方法が見いだせなかったので、以前と同様にクラスを宣言する書き方で実装しました。この部分は将来への宿題です。\\\\r\\\\n\\\\r\\\\nせっかくのリライトなので、以前の実装で気になっていた部分について書き直してみました。\\\\r\\\\n\\\\r\\\\n- 再帰してフォルダとファイルを探索する際、folder構成が深い場合に速度低下が発生していた。再帰を使わずに対象ファイルをリストアップするように変更。\\\\r\\\\n- ファイルの読み込み\\\\\\\/書き込みは並列処理可能なので、.NET 6で追加されたParallel.ForEachAsycを利用した非同期並列処理を実装\\\\r\\\\n- JSON serializer\\\\\\\/deserializerをJson.NETからDynaJsonに変更\\\\r\\\\n  - [DynaJsonではJSONデータをRFCに則り厳密にparseする](https:\\\\\\\/\\\\\\\/dev.to\\\\\\\/fujieda\\\\\\\/how-to-make-json-parser-strict-4a85)とのことで、escape characterの差分が現れました。フロントエンド側での表示に影響が出る懸念あり（後で要確認）\\\\r\\\\n\\\\r\\\\nパフォーマンスの測定も時間ができたら試してみたいと思います。\\\\r\\\\n\\\\r\\\\n### Exponential backoff on StreamWriter.WriteAsync\\\\r\\\\n\\\\r\\\\n以前のバージョンから気になっていたことなのですが、Markdownファイルの読み込み時に以下のエラーが発生することが度々ありました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nSystem.IO.IOException: The process cannot access the file 'xxxx.md' because it is being used by another process.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nVSCodeがファイルの保存時にPrettierのコードフォーマットでファイルを保持するためと思われます。リトライの機構を組み込まなければと思いつつ放置していたので今回対応することにしました。\\\\r\\\\n\\\\r\\\\n調べてみると[Polly](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/App-vNext\\\\\\\/Polly)というライブラリがすごく充実していて便利そうだったので試してみました。\\\\r\\\\n\\\\r\\\\n``` cs\\\\r\\\\nprivate AsyncRetryPolicy GetRetryPolicy()\\\\r\\\\n{\\\\r\\\\n    return Policy.Handle<IOException>()\\\\r\\\\n        .WaitAndRetryAsync(4,\\\\r\\\\n            sleepDurationProvider: retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),\\\\r\\\\n            onRetry: (exception, retryCount) =>\\\\r\\\\n            {\\\\r\\\\n                logger.LogInformation($\\\\\\\"catch IOException, retrying... ({retryCount})\\\\\\\");\\\\r\\\\n            }\\\\r\\\\n        );\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nprivate async ValueTask<string> ReadToEndFileAsync(string filePath)\\\\r\\\\n{\\\\r\\\\n    logger.LogTrace($\\\\\\\"read file: {filePath}\\\\\\\");\\\\r\\\\n    var result = string.Empty;\\\\r\\\\n\\\\r\\\\n    result = await GetRetryPolicy().ExecuteAsync(async () =>\\\\r\\\\n    {\\\\r\\\\n        using var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read, fileStreamBufferSize, FileOptions.Asynchronous);\\\\r\\\\n        using var streamReader = new StreamReader(fileStream, Encoding.UTF8);\\\\r\\\\n        return await streamReader.ReadToEndAsync();\\\\r\\\\n    });\\\\r\\\\n    return result;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nprivate async ValueTask WriteJsonFileAsync(string jsonText, string jsonFilePath)\\\\r\\\\n{\\\\r\\\\n    logger.LogTrace($\\\\\\\"write file: {jsonFilePath}\\\\\\\");\\\\r\\\\n    var targetFolder = Path.GetDirectoryName(jsonFilePath) ?? \\\\\\\"\\\\\\\";\\\\r\\\\n    if (!Directory.Exists(targetFolder)) Directory.CreateDirectory(targetFolder);\\\\r\\\\n\\\\r\\\\n    await GetRetryPolicy().ExecuteAsync(async () =>\\\\r\\\\n    {\\\\r\\\\n        using var fileStream = new FileStream(jsonFilePath, FileMode.Create, FileAccess.Write, FileShare.Write, fileStreamBufferSize, FileOptions.Asynchronous);\\\\r\\\\n        using var streamWriter = new StreamWriter(fileStream);\\\\r\\\\n        await streamWriter.WriteAsync(jsonText);\\\\r\\\\n    });\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n上記のようにPollyの`Policy`を作成し、Policy.ExecuteAsyncすることで、非同期taskに対して定義したpolicyの通りにリトライしてくれます。Retry回数は4回、待機時間はExponential Back-offのロジックにしてみました。[Polly.Contrib.WaitAndRetry](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/Polly-Contrib\\\\\\\/Polly.Contrib.WaitAndRetry)という追加ライブラリには[Backoff.ExponentialBackoff](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/Polly-Contrib\\\\\\\/Polly.Contrib.WaitAndRetry#wait-and-retry-with-exponential-back-off)が用意されていて、Enterprise Appにはこちらを使うのが良さそうでした。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n# 実行ログ\\\\r\\\\ninfo: Net6MarkdownWebEngine.Backend.Services.DocumentsWatchService[0]\\\\r\\\\n      Watch documents updated after 07\\\\\\\/31\\\\\\\/2022 18:01:58\\\\r\\\\ninfo: Net6MarkdownWebEngine.Backend.Services.DocumentsWatchService[0]\\\\r\\\\n      File change detected. Start md2json conversion for updated file(s).\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      target source directory: C:\\\\\\\\Repos\\\\\\\\net6-markdown-web-engine\\\\\\\\AspNetCoreWebApi\\\\\\\\Docs\\\\\\\/md\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      target destination directory: C:\\\\\\\\Repos\\\\\\\\net6-markdown-web-engine\\\\\\\\AspNetCoreWebApi\\\\\\\\Docs\\\\\\\/json\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      No target files found to delete\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      1 target files found to check updates\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      catch IOException, retrying... (00:00:02)\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      No target files found to add\\\\r\\\\ninfo: Net6MarkdownWebEngine.Converter.MarkdownConverterService[0]\\\\r\\\\n      generate index.json to index directory: C:\\\\\\\\Repos\\\\\\\\net6-markdown-web-engine\\\\\\\\AspNetCoreWebApi\\\\\\\\..\\\\\\\/AngularStandalone\\\\\\\/src\\\\\\\/assets\\\\r\\\\ninfo: Net6MarkdownWebEngine.Backend.Services.DocumentsWatchService[0]\\\\r\\\\n      Watch documents updated after 07\\\\\\\/31\\\\\\\/2022 18:02:01\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [IHostedService と BackgroundService クラスを使ってマイクロサービスのバックグラウンド タスクを実装する](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/architecture\\\\\\\/microservices\\\\\\\/multi-container-microservice-net-applications\\\\\\\/background-tasks-with-ihostedservice)\\\\r\\\\n- [.NET の Worker サービス](https:\\\\\\\/\\\\\\\/docs.microsoft.com\\\\\\\/ja-jp\\\\\\\/dotnet\\\\\\\/core\\\\\\\/extensions\\\\\\\/workers)\\\\r\\\\n- [Parallel Foreach async in C#](https:\\\\\\\/\\\\\\\/medium.com\\\\\\\/@alex.puiu\\\\\\\/parallel-foreach-async-in-c-36756f8ebe62)\\\\r\\\\n- [Parallel.ForEachAsync in .NET 6](https:\\\\\\\/\\\\\\\/www.hanselman.com\\\\\\\/blog\\\\\\\/parallelforeachasync-in-net-6)\\\\r\\\\n- [C#でParallelの処理速度比較(for, foreach, AsParallel(), AsParallel().ForAll(), Parallel.ForEach())](https:\\\\\\\/\\\\\\\/dasuma20.hatenablog.com\\\\\\\/entry\\\\\\\/cs\\\\\\\/parallel-of-speed)\\\\r\\\\n- [Retry: Exponential backoff - Polly](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/App-vNext\\\\\\\/Polly\\\\\\\/wiki\\\\\\\/Retry#exponential-backoff)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"todo\",\"content\":\"{\\\"title\\\":\\\"Todo リスト\\\",\\\"date\\\":\\\"2022-09-23\\\",\\\"category\\\":\\\"none\\\",\\\"toc\\\":\\\"none\\\",\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n## 記事ストック\\\\r\\\\n\\\\r\\\\n- [x] [angular-cli-ghpages](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-schule\\\\\\\/angular-cli-ghpages)のセットアップ\\\\r\\\\n  - Angular v13以降の設定の仕方について追記する\\\\r\\\\n- [ ] 開発マシンの構成を標準化\\\\r\\\\n- [ ] Windows 11のセットアップ\\\\r\\\\n- [ ] .NET 6 + Angular v14でTech Logを書き換えて得た知識をまとめる\\\\r\\\\n- [ ] 過去記事の移行\\\\r\\\\n- [ ] gistの管理について\\\\r\\\\n- [ ] Visual Studio Code の設定\\\\r\\\\n- [ ] Visual Studio の設定\\\\r\\\\n- [ ] VSCode の git アクセス設定\\\\r\\\\n- [ ] コード規約について\\\\r\\\\n  - [ ] C#\\\\r\\\\n  - [ ] Typescript\\\\r\\\\n  - [ ] Angular\\\\r\\\\n\\\"}\"}","{\"docRef\":\"angular\\\/create-angular-spa-with-net6-frontend\",\"content\":\"{\\\"title\\\":\\\".NET6とAngular v13でSPAサイトを作る（フロントエンド）\\\",\\\"date\\\":\\\"2022-01-07\\\",\\\"category\\\":\\\"csharp\\\",\\\"tag\\\":[\\\"net6\\\",\\\"angular v13\\\"],\\\"body\\\":\\\"本サイトは自作のwebサイト生成エンジンで生成されています。自作エンジンは2019年に.NET Core 2.1とAngular v7で開発しました。\\\\r\\\\n\\\\r\\\\nそれから時は流れ、2021年末時点でバックエンド側は.NET6に、フロントエンド側はAngular v13にそれぞれバージョンアップされています。\\\\r\\\\n\\\\r\\\\n進化の波に取り残されないように、最新バージョンのモジュールを使ってwebサイト生成エンジンを再開発してみようと思います。\\\\r\\\\n\\\\r\\\\nこの記事では、フロントエンド編ということでAngularのSPAサイトをを実装していきます。\\\\r\\\\n\\\\r\\\\n## 開発準備\\\\r\\\\n\\\\r\\\\nVSプロジェクト作成時、最新のAngular v13ではエラーが発生したので、一時的にAngular v12を利用していました。本格的にサイト実装を始める前に、まずはv13へバージョンアップします。\\\\r\\\\n\\\\r\\\\nangularのバージョンアップといえば`ng update`を使うべきだと思うのですが、VSが作成したテンプレートが非常に質素で通常のサイトとは異なっていました。変更点を探るため、v13のcliで`ng new`した内容と比較してみます。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> npm uninstall -g @angular\\\\\\\/cli\\\\r\\\\n> npm install -g @angular\\\\\\\/cli\\\\r\\\\n> ng version\\\\r\\\\nadded 183 packages, and audited 184 packages in 33s\\\\r\\\\n\\\\r\\\\n22 packages are looking for funding\\\\r\\\\n  run `npm fund` for details\\\\r\\\\n\\\\r\\\\nfound 0 vulnerabilities\\\\r\\\\nPS C:\\\\\\\\WINDOWS\\\\\\\\system32> ng version\\\\r\\\\n\\\\r\\\\n     _                      _                 ____ _     ___\\\\r\\\\n    \\\\\\\/ \\\\\\\\   _ __   __ _ _   _| | __ _ _ __     \\\\\\\/ ___| |   |_ _|\\\\r\\\\n   \\\\\\\/ △ \\\\\\\\ | '_ \\\\\\\\ \\\\\\\/ _` | | | | |\\\\\\\/ _` | '__|   | |   | |    | |\\\\r\\\\n  \\\\\\\/ ___ \\\\\\\\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\\\\r\\\\n \\\\\\\/_\\\\\\\/   \\\\\\\\_\\\\\\\\_| |_|\\\\\\\\__, |\\\\\\\\__,_|_|\\\\\\\\__,_|_|       \\\\\\\\____|_____|___|\\\\r\\\\n                |___\\\\\\\/\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nAngular CLI: 13.1.2\\\\r\\\\nNode: 16.13.1\\\\r\\\\nPackage Manager: yarn 1.22.15\\\\r\\\\nOS: win32 x64\\\\r\\\\n\\\\r\\\\nAngular:\\\\r\\\\n...\\\\r\\\\n\\\\r\\\\nPackage                      Version\\\\r\\\\n------------------------------------------------------\\\\r\\\\n@angular-devkit\\\\\\\/architect    0.1301.2 (cli-only)\\\\r\\\\n@angular-devkit\\\\\\\/core         13.1.2 (cli-only)\\\\r\\\\n@angular-devkit\\\\\\\/schematics   13.1.2 (cli-only)\\\\r\\\\n@schematics\\\\\\\/angular          13.1.2 (cli-only)\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> ng new net6-markdown-web-engine\\\\r\\\\n? Would you like to add Angular routing? Yes\\\\r\\\\n? Which stylesheet format would you like to use? SCSS   [ https:\\\\\\\/\\\\\\\/sass-lang.com\\\\\\\/documentation\\\\\\\/syntax#scss\\\\r\\\\n ]\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/angular.json (3315 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/package.json (1088 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/README.md (1067 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/tsconfig.json (863 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.editorconfig (274 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.gitignore (620 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.browserslistrc (600 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/karma.conf.js (1441 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/tsconfig.app.json (287 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/tsconfig.spec.json (333 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.vscode\\\\\\\/extensions.json (130 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.vscode\\\\\\\/launch.json (474 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/.vscode\\\\\\\/tasks.json (938 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/favicon.ico (948 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/index.html (307 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/main.ts (372 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/polyfills.ts (2338 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/styles.sass (80 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/test.ts (745 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/assets\\\\\\\/.gitkeep (0 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/environments\\\\\\\/environment.prod.ts (51 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/environments\\\\\\\/environment.ts (658 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app-routing.module.ts (245 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app.module.ts (393 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app.component.html (23364 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app.component.spec.ts (1127 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app.component.ts (229 bytes)\\\\r\\\\nCREATE net6-markdown-web-engine\\\\\\\/src\\\\\\\/app\\\\\\\/app.component.sass (0 bytes)\\\\r\\\\n\\\\\\\/ Installing packages (yarn)...\\\\r\\\\n√ Packages installed successfully.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n比較したところ、apiのproxy(VSテンプレート独自の変更点)以外の際はほとんどありませんでした。IE11が正式にサポート対象から外れたようで、polifills.ts等からIE11の記述が消えているくらいで、angular.jsonもほぼほぼ同じ。移行はとても簡単そうです。せっかくなので、サーバサイドapiを使うページは名前を変えて残した状態でv12とv13のソースをマージしました。\\\\r\\\\n\\\\r\\\\n## linterのセットアップ\\\\r\\\\n\\\\r\\\\nTSlintからESLintへのマイグレーションは[AngularのRoadmapでCompleted Q4 2020](https:\\\\\\\/\\\\\\\/angular.io\\\\\\\/guide\\\\\\\/roadmap#migrate-to-eslint)となっており、`ng new`したコード中からlintの設定がなくなったようです。\\\\r\\\\n\\\\r\\\\nググったところ[angular-eslint](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-eslint\\\\\\\/angular-eslint)を利用する記事が多く目についたので、今回はこれを試してみます。1コマンドで作業は完了です。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> ng add @angular-eslint\\\\\\\/schematics\\\\r\\\\nℹ Using package manager: yarn\\\\r\\\\n✔ Found compatible package version: @angular-eslint\\\\\\\/schematics@13.0.1.\\\\r\\\\n✔ Package information loaded.\\\\r\\\\n\\\\r\\\\nThe package @angular-eslint\\\\\\\/schematics@13.0.1 will be installed and executed.\\\\r\\\\nWould you like to proceed? Yes\\\\r\\\\n✔ Package successfully installed.\\\\r\\\\n\\\\r\\\\n    All @angular-eslint dependencies have been successfully installed 🎉\\\\r\\\\n\\\\r\\\\n    Please see https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-eslint\\\\\\\/angular-eslint for how to add ESLint configuration to your project.\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n    We detected that you have a single project in your workspace and no existing linter wired up, so we are configuring ESLint for you automatically.\\\\r\\\\n\\\\r\\\\n    Please see https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-eslint\\\\\\\/angular-eslint for more information.\\\\r\\\\n\\\\r\\\\nCREATE .eslintrc.json (984 bytes)\\\\r\\\\nUPDATE package.json (1662 bytes)\\\\r\\\\nUPDATE angular.json (3692 bytes)\\\\r\\\\n✔ Packages installed successfully.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## Angular Materialの設定\\\\r\\\\n\\\\r\\\\nデザインシステムにAngular Materialを設定します。当初はFluent UI web componentsを試そうと思ったのですが、Angular Materialを前回利用したときに、やり残していた課題があったので今回再チャレンジします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> ng add @angular\\\\\\\/material\\\\r\\\\nℹ Using package manager: yarn\\\\r\\\\n✔ Found compatible package version: @angular\\\\\\\/material@13.1.3.\\\\r\\\\n✔ Package information loaded.\\\\r\\\\n\\\\r\\\\nThe package @angular\\\\\\\/material@13.1.3 will be installed and executed.\\\\r\\\\nWould you like to proceed? Yes\\\\r\\\\n✔ Package successfully installed.\\\\r\\\\n? Choose a prebuilt theme name, or \\\\\\\"custom\\\\\\\" for a custom theme: Indigo\\\\\\\/Pink        [ Preview: https:\\\\\\\/\\\\\\\/material.angular.io?theme=indigo-pink ]\\\\r\\\\n? Set up global Angular Material typography styles? No\\\\r\\\\n? Set up browser animations for Angular Material? Yes\\\\r\\\\nUPDATE package.json (1727 bytes)\\\\r\\\\n✔ Packages installed successfully.\\\\r\\\\nUPDATE src\\\\\\\/app\\\\\\\/app.module.ts (737 bytes)\\\\r\\\\nUPDATE angular.json (3982 bytes)\\\\r\\\\nUPDATE src\\\\\\\/index.html (613 bytes)\\\\r\\\\nUPDATE src\\\\\\\/styles.scss (182 bytes)\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## nav componentの追加\\\\r\\\\n\\\\r\\\\n以前のバージョンで利用していたNav Componentをほぼそのまま移行することができました。\\\\r\\\\n\\\\r\\\\n以前のバージョンではAngular.ioの実装から、レイアウトのbreakpoint設定を拝借していたのですが、`handset`を利用していると画面のwidthを変えたときに変なところでサイドバーが出るので、この実装を変更することにしました。\\\\r\\\\n\\\\r\\\\n[AngularMaterialのレイアウト設定](https:\\\\\\\/\\\\\\\/material.angular.io\\\\\\\/cdk\\\\\\\/layout\\\\\\\/overview#predefined-breakpoints)によると、handsetのルールは`(max-width: 599.98px) and (orientation: portrait), (max-width: 959.98px) and (orientation: landscape)`でした。orientationの関係でmax-widthが600-960の間でもisHandSetがtrueになる瞬間があるのだと思います。\\\\r\\\\n\\\\r\\\\n`XSmall`と`Small`のときはサイドバーを表示しないように変更したらイイ感じになりました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nisSmall$: Observable<boolean> = this.breakpointObserver\\\\r\\\\n    .observe([Breakpoints.XSmall, Breakpoints.Small])\\\\r\\\\n    .pipe(map((result) => result.matches));\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## loading bar componentの追加\\\\r\\\\n\\\\r\\\\nこちらも以前のバージョンで実装したcomponentをほぼそのまま移行できました。勉強不足でasync pipeを使わずにstateをローカル変数に持ち直して表示\\\\\\\/非表示の制御をしていた部分を、シンプルに書き直す修正だけ行いました。\\\\r\\\\n\\\\r\\\\n## NGRXの導入\\\\r\\\\n\\\\r\\\\nmarkdownからコンバートしたjsonファイルを`ngrx store`に読み込んだら、どのcomponetからでも好きに呼び出せてイイ感じにならないかな？という発想から、今回はNGRXを利用してみることにします。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> ng add @ngrx\\\\\\\/store@latest\\\\r\\\\nℹ Using package manager: yarn\\\\r\\\\n✔ Package information loaded.\\\\r\\\\n\\\\r\\\\nThe package @ngrx\\\\\\\/store@latest will be installed and executed.\\\\r\\\\nWould you like to proceed? Yes\\\\r\\\\n✔ Package successfully installed.\\\\r\\\\n\\\\r\\\\n    The NgRx ESLint Plugin is installed and configured with the recommended config.\\\\r\\\\n\\\\r\\\\n    If you want to change the configuration, please see https:\\\\\\\/\\\\\\\/github.com\\\\\\\/timdeschryver\\\\\\\/eslint-plugin-ngrx\\\\\\\/#eslint-plugin-ngrx.\\\\r\\\\n\\\\r\\\\nUPDATE src\\\\\\\/app\\\\\\\/app.module.ts (1090 bytes)\\\\r\\\\nUPDATE package.json (1793 bytes)\\\\r\\\\nUPDATE .eslintrc.json (1098 bytes)\\\\r\\\\n✔ Packages installed successfully.\\\\r\\\\n✔ Packages installed successfully.\\\\r\\\\n``\\\\r\\\\n\\\\r\\\\n公式のガイドに[ESLint NgRx Plugin](https:\\\\\\\/\\\\\\\/ngrx.io\\\\\\\/guide\\\\\\\/eslint-plugin)が載っていたので導入してみます。\\\\r\\\\n``` powershell\\\\r\\\\n> ng add eslint-plugin-ngrx\\\\r\\\\nSkipping installation: Package already installed\\\\r\\\\n? Which config would you like to use? recommended (all the recommended rules configured with the recommended severity) [https:\\\\\\\/\\\\\\\/github.com\\\\\\\/timdeschryver\\\\\\\/eslint-plugin-ngrx\\\\\\\/blob\\\\\\\/main\\\\\\\/src\\\\\\\/configs\\\\\\\/recommended.ts]\\\\r\\\\n\\\\r\\\\n      The NgRx ESLint Plugin is installed and configured with the 'recommended' config.\\\\r\\\\n\\\\r\\\\n      If you want to change the configuration, please see https:\\\\\\\/\\\\\\\/github.com\\\\\\\/timdeschryver\\\\\\\/eslint-plugin-ngrx\\\\\\\/#eslint-plugin-ngrx.\\\\r\\\\n\\\\r\\\\nUPDATE .eslintrc.json (1098 bytes)\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## markdownのhtml変換処理\\\\r\\\\n\\\\r\\\\n以前からmarkdown⇒htmlへの変換処理はクライアント(angular)側で行っていました。\\\\r\\\\n\\\\r\\\\n- バックエンド側でfrontmatter付きmarkdownをmarkdown記法のままjsonに変換\\\\r\\\\n    - 変換元mdファイルと1対1対応するjsonファイル\\\\r\\\\n    - すべてのjsonファイルをまとめたindex.json\\\\r\\\\n- 検索画面ではindex.jsonを利用してサーチを実施\\\\r\\\\n- 個々のドキュメントページはurlから対象のjsonファイルを取得\\\\r\\\\n- clientはmarkdown部分をjsonから抜き出して、[unified(remark, rehype)](https:\\\\\\\/\\\\\\\/unifiedjs.com\\\\\\\/)を利用してhtmlに変換\\\\r\\\\n\\\\r\\\\n### jsonファイル読み込み処理の変更点\\\\r\\\\n\\\\r\\\\n前半のjsonファイルの読み込み部分について、index.jsonを直接importする記述に変更しました\\\\r\\\\n\\\\r\\\\n- ngrxのactionでindex.jsonを読み込み、個々のドキュメントも探すようにしたので個々のドキュメントファイルをfetchする必要がなくなった\\\\r\\\\n- debug実行時、index.jsonに変更が発生すると自動でreloadが掛かるので、markdownの更新が画面に自動反映されるようになった。（嬉しい副産物）\\\\r\\\\n\\\\r\\\\n### unifiedのプラグインチェック\\\\r\\\\n\\\\r\\\\n後半のunifiedによる変換処理について、remarkのmarkdownパーサーエンジンが[micromark](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/micromark\\\\\\\/micromark)に置き換わるという大きな変更が起きていたようです。その影響で、以前使っていたプラグインが使えなくなるといった影響が出ていました。この機会に使用するプラグインの厳選を行いました。\\\\r\\\\n\\\\r\\\\n- remark-parse\\\\r\\\\n    - 標準plugin。markdownをmdast(syntax tree)に変換\\\\r\\\\n- [remark-attr](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/arobase-che\\\\\\\/remark-attr)\\\\r\\\\n    - markdownに記述したattributeを変換後のhtmlに付与。cssクラスをセットする等の用途で使用していたが、micromarkの移行により利用不可になった。\\\\r\\\\n    - https:\\\\\\\/\\\\\\\/github.com\\\\\\\/arobase-che\\\\\\\/remark-attr\\\\\\\/issues\\\\\\\/22\\\\r\\\\n- remark-rehype\\\\r\\\\n    - 標準plugin。mdastをhastに変換\\\\r\\\\n- rehype-raw\\\\r\\\\n    - 標準plugin: markdown内のhtmlタグをsyntax treeのnodeに含める\\\\r\\\\n- rehype-slug\\\\r\\\\n    - 標準plugin。Hタグにidを付与\\\\r\\\\n- rehype-autolink-headings\\\\r\\\\n    - 標準plugin。Hタグへのlinkを作成\\\\r\\\\n- rehype-External-Links\\\\r\\\\n    - 今回新たに採用。標準plugin。外部サイトへのリンクを制御。target=\\\\\\\"_blank\\\\\\\"を付与するのに使用\\\\r\\\\n- rehype-attrs\\\\r\\\\n    - remarkAttrの代わりに採用。markdownに記述したattributeを変換後のhtmlに付与。cssクラスをセットする等の用途で使用\\\\r\\\\n- rehype-highlight\\\\r\\\\n    - \\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\nconst processor = unified()\\\\r\\\\n      .use(remarkParse)\\\\r\\\\n      \\\\\\\/\\\\\\\/ .use(remarkAttr)\\\\r\\\\n      .use(remarkRehype, {allowDangerousHtml: true})\\\\r\\\\n      .use(rehypeRaw)\\\\r\\\\n      .use(rehypeSlug)\\\\r\\\\n      .use(rehypeAutolinkHeadings)\\\\r\\\\n      .use(rehypeExternalLinks, {target: '_blank', rel: ['noopener']})\\\\r\\\\n      .use(rehypeAttrs, { properties: 'attr' }) \\\\\\\/\\\\\\\/ \\\\r\\\\n      \\\\\\\/\\\\\\\/ .use(highlight)\\\\r\\\\n      .use(rehypeStringify); \\\\\\\/\\\\\\\/ 標準plugin: hastをhtmlに変換\\\\r\\\\n    const html = String(processor.processSync(document.content.body));\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 後で調べる\\\\r\\\\n\\\\r\\\\n- prettierの[bracket line](https:\\\\\\\/\\\\\\\/prettier.io\\\\\\\/docs\\\\\\\/en\\\\\\\/options.html#bracket-line)をtrueにする\\\\r\\\\n- loading barのshow\\\\\\\/hideにアニメーションを付ける\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [How to upgrade Angular CLI to the latest version](https:\\\\\\\/\\\\\\\/stackoverflow.com\\\\\\\/questions\\\\\\\/43931986\\\\\\\/how-to-upgrade-angular-cli-to-the-latest-version)\\\\r\\\\n- [angular-eslint](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-eslint\\\\\\\/angular-eslint)\\\\r\\\\n- [Tasks in Visual Studio Code - Compound tasks](https:\\\\\\\/\\\\\\\/code.visualstudio.com\\\\\\\/docs\\\\\\\/editor\\\\\\\/tasks#_compound-tasks)\\\\r\\\\n- [Getting Started with Angular Material](https:\\\\\\\/\\\\\\\/material.angular.io\\\\\\\/guide\\\\\\\/getting-started)\\\\r\\\\n- [Remark plugins list](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/remarkjs\\\\\\\/remark\\\\\\\/blob\\\\\\\/main\\\\\\\/doc\\\\\\\/plugins.md)\\\\r\\\\n- [Rehype plugins list](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/rehypejs\\\\\\\/rehype\\\\\\\/blob\\\\\\\/main\\\\\\\/doc\\\\\\\/plugins.md)\\\"}\"}","{\"docRef\":\"angular\\\/angular-embed-html-tag\",\"content\":\"{\\\"title\\\":\\\"Angularで動的にHTMLタグをコンポーネントに埋め込む\\\",\\\"date\\\":\\\"2019-11-14\\\",\\\"category\\\":\\\"Angular\\\",\\\"tag\\\":[\\\"html\\\",\\\"embed\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nAngularでは、データバインドを利用したテキストの埋め込み時にセキュリティ上の考慮がなされています。具体的には、scriptやhtmlは自動的にエスケープ処理され、原則的にはhtmlタグを埋め込めないようになっています。\\\\r\\\\n\\\\r\\\\nAngularで、markdownから生成したhtmlをタグとして画面に挿入する方法を調査しました。\\\\r\\\\n\\\\r\\\\n## 注意点\\\\r\\\\n\\\\r\\\\n開発者は、**有害なhtmlデータ**がこれらの処理を通してユーザに送信されないよう、十分に考慮する必要があります。\\\\r\\\\n\\\\r\\\\n## SafeHtml型のhtmlデータを[innerHTML]にバインドする\\\\r\\\\n\\\\r\\\\n実装例を以下に示します。\\\\r\\\\n\\\\r\\\\n**MarkdownService**\\\\r\\\\n\\\\r\\\\n```ts\\\\r\\\\nexport class MarkdownService {\\\\r\\\\n  constructor(\\\\r\\\\n    private http: HttpClient,\\\\r\\\\n    private sanitizer: DomSanitizer,\\\\r\\\\n    @Inject(\\\\\\\"BASE_URL\\\\\\\") private baseUrl: string,\\\\r\\\\n  ) {}\\\\r\\\\n\\\\r\\\\n  getDocument(path: string): Observable<DocumentInfo> {\\\\r\\\\n    let docInfo: DocumentInfo;\\\\r\\\\n    const processor = unified()\\\\r\\\\n      .use(markdown, { commonmark: true })\\\\r\\\\n      .use(remarkAttr)\\\\r\\\\n      .use(remarkRehype, { allowDangerousHTML: true })\\\\r\\\\n      .use(raw)\\\\r\\\\n      .use(slug)\\\\r\\\\n      .use(autoLinkHeadings)\\\\r\\\\n      .use(highlight)\\\\r\\\\n      .use(html);\\\\r\\\\n\\\\r\\\\n    return this.http.get<DocumentInfo>(this.baseUrl + path).pipe(\\\\r\\\\n      map(result => {\\\\r\\\\n        \\\\\\\/\\\\\\\/ this.baseUrl + pathにアクセスすると、docInfo型のデータがjsonで取得できる。それをそのまま代入。\\\\r\\\\n        docInfo = result;\\\\r\\\\n\\\\r\\\\n        \\\\\\\/\\\\\\\/ set default toc\\\\r\\\\n        if (!docInfo.toc) {\\\\r\\\\n          docInfo.toc = \\\\\\\"h2,h3\\\\\\\";\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        \\\\\\\/\\\\\\\/ docInfo.bodyはmarkdown形式のデータ。processor.processSync処理でhtmlに変換される\\\\r\\\\n        docInfo.bodyHtml = processor.processSync(docInfo.body).contents;\\\\r\\\\n\\\\r\\\\n        \\\\\\\/\\\\\\\/ bypassSecurityTrustHtmlはhtmlデータをSafeHTMLという特別な型に変換する\\\\r\\\\n        docInfo.safeBody = this.sanitizer.bypassSecurityTrustHtml(docInfo.bodyHtml);\\\\r\\\\n        return docInfo;\\\\r\\\\n      }),\\\\r\\\\n    );\\\\r\\\\n  }\\\\r\\\\n  ...\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n**document.component.html(抜粋)**\\\\r\\\\n\\\\r\\\\n```html\\\\r\\\\n<div fxFlex class=\\\\\\\"doc-body\\\\\\\" [innerHTML]=\\\\\\\"docInfo?.bodyHtml\\\\\\\" appRouteTransformer>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nまたは\\\\r\\\\n\\\\r\\\\n```html\\\\r\\\\n<div fxFlex class=\\\\\\\"doc-body\\\\\\\" [innerHTML]=\\\\\\\"docInfo?.safeBody\\\\\\\" appRouteTransformer>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n通常のhtmlデータ(docInfo.bodyHtml)をinnerHTMLにバインドした場合、idやスタイルなどの属性は自動的に取り除かれてしまいます。またブラウザのコンソール上に**安全でないhtmlデータがバインドされた**という警告が表示されます。\\\\r\\\\n\\\\r\\\\nDomSanitizer.bypassSecurityTrustHtmlを利用すると、htmlデータはSafeHTML型に変換され、Angularはこのデータを無害なhtmlデータとして取り扱います。つまりすべてそのままの状態でバインドされます。\\\\r\\\\n\\\\r\\\\n## ElementRef.nativeElementにバインドする\\\\r\\\\n\\\\r\\\\n実装例を以下に示します。\\\\r\\\\n\\\\r\\\\n**document.component.html(抜粋)**\\\\r\\\\n\\\\r\\\\n```html\\\\r\\\\n<div fxLayout=\\\\\\\"column\\\\\\\" class=\\\\\\\"doc-container\\\\\\\" [@openClose]=\\\\\\\"isOpen ? 'open' : 'closed'\\\\\\\">\\\\r\\\\n  <!-- <p *ngIf=\\\\\\\"!docInfo\\\\\\\">loading...<\\\\\\\/p> -->\\\\r\\\\n  <ng-container *ngIf=\\\\\\\"docInfo && docInfo?.toc === 'none'\\\\\\\">\\\\r\\\\n    ...\\\\r\\\\n  <\\\\\\\/ng-container>\\\\r\\\\n  <ng-container *ngIf=\\\\\\\"docInfo && docInfo?.toc !== 'none'\\\\\\\">\\\\r\\\\n    <div fxLayout=\\\\\\\"row\\\\\\\">\\\\r\\\\n      <div fxFlex=\\\\\\\"1 1 85%\\\\\\\" fxFlex.lt-md=\\\\\\\"1 1 100%\\\\\\\">\\\\r\\\\n        <div fxLayout=\\\\\\\"column\\\\\\\">\\\\r\\\\n          ...\\\\r\\\\n          <!-- <div fxFlex class=\\\\\\\"doc-body\\\\\\\" [innerHTML]=\\\\\\\"docInfo?.safeBody\\\\\\\" appRouteTransformer><\\\\\\\/div> -->\\\\r\\\\n          <div #mdContent fxFlex class=\\\\\\\"doc-body\\\\\\\" appRouteTransformer><\\\\\\\/div>\\\\r\\\\n        <\\\\\\\/div>\\\\r\\\\n      <\\\\\\\/div>\\\\r\\\\n      <div fxFlex=\\\\\\\"1 1 15%\\\\\\\" fxHide.lt-md>\\\\r\\\\n        <app-document-toc [tocList]=\\\\\\\"tocList\\\\\\\" appRouteTransformer><\\\\\\\/app-document-toc>\\\\r\\\\n      <\\\\\\\/div>\\\\r\\\\n    <\\\\\\\/div>\\\\r\\\\n  <\\\\\\\/ng-container>\\\\r\\\\n<\\\\\\\/div>\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n**document.component.ts**\\\\r\\\\n\\\\r\\\\n```ts\\\\r\\\\nimport {\\\\r\\\\n  AfterViewInit,\\\\r\\\\n  ChangeDetectorRef,\\\\r\\\\n  Component,\\\\r\\\\n  ElementRef,\\\\r\\\\n  OnDestroy,\\\\r\\\\n  OnInit,\\\\r\\\\n  ViewChild,\\\\r\\\\n} from '@angular\\\\\\\/core';\\\\r\\\\n\\\\r\\\\n@Component({\\\\r\\\\n  selector: \\\\\\\"app-document\\\\\\\",\\\\r\\\\n  templateUrl: \\\\\\\".\\\\\\\/document.component.html\\\\\\\",\\\\r\\\\n  styleUrls: [\\\\\\\".\\\\\\\/document.component.scss\\\\\\\", \\\\\\\".\\\\\\\/vs2015.css\\\\\\\"],\\\\r\\\\n  animations: [defaultRouteAnimation],\\\\r\\\\n})\\\\r\\\\nexport class DocumentComponent implements OnInit, OnDestroy, AfterViewInit {\\\\r\\\\n  docInfo: DocumentInfo | null;\\\\r\\\\n  isOpen: boolean = true;\\\\r\\\\n  tocList: TocItem[] | null;\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ template html中の<div #mdContent>を参照するオブジェクトを定義\\\\r\\\\n  @ViewChild(\\\\\\\"mdContent\\\\\\\")\\\\r\\\\n  mdRef: ElementRef<HTMLElement>;\\\\r\\\\n\\\\r\\\\n  private fragment: string;\\\\r\\\\n  private previousPath: string;\\\\r\\\\n  private onDestroy = new Subject();\\\\r\\\\n  private routeChangeSubject = new Subject();\\\\r\\\\n\\\\r\\\\n  constructor(\\\\r\\\\n    private markdownService: MarkdownService,\\\\r\\\\n    private location: Location,\\\\r\\\\n    private route: ActivatedRoute,\\\\r\\\\n    private loadingBarService: LoadingBarService,\\\\r\\\\n    private changeDetector: ChangeDetectorRef,\\\\r\\\\n  ) {}\\\\r\\\\n\\\\r\\\\n  ngOnInit() {\\\\r\\\\n    ...\\\\r\\\\n    this.route.url.pipe(takeUntil(this.onDestroy)).subscribe(params => {\\\\r\\\\n      const docRef = params.map(x => x.path).join(\\\\\\\"\\\\\\\/\\\\\\\");\\\\r\\\\n      if (docRef !== this.previousPath) {\\\\r\\\\n        this.docInfo = null;\\\\r\\\\n        this.isOpen = false;\\\\r\\\\n        this.getMarkdownDocInfo(docRef);\\\\r\\\\n      } else {\\\\r\\\\n        this.loadingBarService.hide();\\\\r\\\\n      }\\\\r\\\\n      this.previousPath = docRef;\\\\r\\\\n    });\\\\r\\\\n  }\\\\r\\\\n  ...\\\\r\\\\n  private getMarkdownDocInfo(docRef: string) {\\\\r\\\\n    const path = this.location.normalize(\\\\\\\"assets\\\\\\\/json\\\\\\\/\\\\\\\" + docRef + \\\\\\\".json\\\\\\\");\\\\r\\\\n\\\\r\\\\n    this.markdownService\\\\r\\\\n      .getDocument(path)\\\\r\\\\n      .pipe(takeUntil(this.onDestroy))\\\\r\\\\n      .subscribe(\\\\r\\\\n        doc => {\\\\r\\\\n          this.docInfo = doc;\\\\r\\\\n\\\\r\\\\n          \\\\\\\/\\\\\\\/ 初期画面は<ng-container *ngIf=\\\\\\\"docInfo>の条件設定により\\\\r\\\\n          \\\\\\\/\\\\\\\/ #mdContentを持つelementがまだ画面にない。\\\\r\\\\n          \\\\\\\/\\\\\\\/\\\\r\\\\n          \\\\\\\/\\\\\\\/ this.docInfoをセットした後に、ChangeDetectorRef.detectChanges()することで\\\\r\\\\n          \\\\\\\/\\\\\\\/ 仮想DOMの内容が更新され、<ng-container *ngIf=\\\\\\\"docInfo>内のelementに\\\\r\\\\n          \\\\\\\/\\\\\\\/ アクセスすることができるようになる。\\\\r\\\\n          this.changeDetector.detectChanges();\\\\r\\\\n\\\\r\\\\n          \\\\\\\/\\\\\\\/ mdRef(#mdContentを持つdiv)のnativeElementにアクセスすることで\\\\r\\\\n          \\\\\\\/\\\\\\\/ JQueryやjavascriptで過去に行っていたような、htmlタグの操作が可能になる。\\\\r\\\\n          this.mdRef.nativeElement.innerHTML = doc.bodyHtml;\\\\r\\\\n        },\\\\r\\\\n        err => console.error(\\\\\\\"MarkdownService\\\\\\\", err),\\\\r\\\\n      );\\\\r\\\\n  }\\\\r\\\\n  ...\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`nativeElement`に対する処理はjavascriptで直接実施されるので、safeHTML型にする必要はなく、サニタイズを考慮せずにhtmlをそのままバインドできます（出来てしまいます）。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [セキュリティ - angular.jp](https:\\\\\\\/\\\\\\\/angular.jp\\\\\\\/guide\\\\\\\/security#bypass-security-apis)\\\\r\\\\n- [ElementRef - angular.jp](https:\\\\\\\/\\\\\\\/angular.jp\\\\\\\/api\\\\\\\/core\\\\\\\/ElementRef)\\\\r\\\\n- [\\\\\\\\[Angular\\\\\\\\]変数のバインドで、htmlタグを埋め込む](https:\\\\\\\/\\\\\\\/akamist.com\\\\\\\/blog\\\\\\\/archives\\\\\\\/2223)\\\\r\\\\n- [AngularでビューにHTML文書を「バインド」するには？（Property Binding）](https:\\\\\\\/\\\\\\\/www.atmarkit.co.jp\\\\\\\/ait\\\\\\\/articles\\\\\\\/1702\\\\\\\/13\\\\\\\/news127.html)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"vue\\\/vue_electron_get_started\",\"content\":\"{\\\"title\\\":\\\"NuxtJS + Electronのアプリ開発環境を構築する\\\",\\\"date\\\":\\\"2021-05-07\\\",\\\"category\\\":\\\"Vue\\\",\\\"tag\\\":[\\\"vue\\\",\\\"nuxtjs\\\",\\\"electron\\\"],\\\"body\\\":\\\"NuxtJS + Electron を使って、デスクトップで動くオレオレ Todo アプリを作ってみたくなりました。Vueに少し慣れてきたので、次にElectronとVueの組み合わせについて学んでいきます。\\\\r\\\\n\\\\r\\\\n## 環境確認\\\\r\\\\n\\\\r\\\\n- エディタ: VSCode\\\\r\\\\n- nodejs: v12.16.0\\\\r\\\\n- yarn: 1.22.4\\\\r\\\\n\\\\r\\\\n## ワークログ\\\\r\\\\n\\\\r\\\\nボイラープレート的なプロジェクトで、[electron-nuxt](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/michalzaq12\\\\\\\/electron-nuxt)と[nuxtron](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/saltyshiomix\\\\\\\/nuxtron)というのを見つけましたが、今回は勉強も兼ねて一から構築してみることにしました。\\\\r\\\\n\\\\r\\\\n### NuxtJS プロジェクトの新規作成\\\\r\\\\n\\\\r\\\\n前回同様、`yarn create nuxt-app`コマンドにてプロジェクトを生成します。ただし今回はLinting tools全部盛りで試してみます。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn create nuxt-app nuxt-electron-example\\\\r\\\\nyarn create v1.22.4\\\\r\\\\n[2\\\\\\\/4] Fetching packages...\\\\r\\\\n[3\\\\\\\/4] Linking dependencies...\\\\r\\\\n[4\\\\\\\/4] Building fresh packages...\\\\r\\\\n\\\\r\\\\nwarning Your current version of Yarn is out of date. The latest version is \\\\\\\"1.22.5\\\\\\\", while you're on \\\\\\\"1.22.4\\\\\\\".\\\\r\\\\nsuccess Installed \\\\\\\"create-nuxt-app@3.4.0\\\\\\\" with binaries:\\\\r\\\\n      - create-nuxt-app\\\\r\\\\n\\\\r\\\\ncreate-nuxt-app v3.4.0\\\\r\\\\n✨  Generating Nuxt.js project in nuxt-electron-example\\\\r\\\\n? Project name: nuxt-electron-example\\\\r\\\\n? Programming language: TypeScript\\\\r\\\\n? Package manager: Yarn\\\\r\\\\n? UI framework: Vuetify.js\\\\r\\\\n? Nuxt.js modules: (Press <space> to select, <a> to toggle all, <i> to invert selection)\\\\r\\\\n? Linting tools: ESLint, Prettier, Lint staged files, StyleLint, Commitlint\\\\r\\\\n? Testing framework: Jest\\\\r\\\\n? Rendering mode: Single Page App\\\\r\\\\n? Deployment target: Static (Static\\\\\\\/JAMStack hosting)\\\\r\\\\n? Development tools: (Press <space> to select, <a> to toggle all, <i> to invert selection)\\\\r\\\\n? Continuous integration: None\\\\r\\\\n? Version control system: Git\\\\r\\\\n\\\\r\\\\nyarn install v1.22.4\\\\r\\\\ninfo No lockfile found.\\\\r\\\\n\\\\r\\\\nyarn run v1.22.4\\\\r\\\\n$ eslint --ext .js,.vue --ignore-path .gitignore . --fix\\\\r\\\\nDone in 28.71s.\\\\r\\\\n\\\\r\\\\nyarn run v1.22.4\\\\r\\\\n$ stylelint **\\\\\\\/*.{vue,css} --ignore-path .gitignore --fix\\\\r\\\\nDone in 8.22s.\\\\r\\\\n\\\\r\\\\n�🎉  Successfully created project nuxt-electron-example\\\\r\\\\n\\\\r\\\\n  To get started:\\\\r\\\\n\\\\r\\\\n        cd nuxt-electron-example\\\\r\\\\n        yarn dev\\\\r\\\\n\\\\r\\\\n  To build & start for production:\\\\r\\\\n\\\\r\\\\n        cd nuxt-electron-example\\\\r\\\\n        yarn build\\\\r\\\\n        yarn start\\\\r\\\\n\\\\r\\\\n  To test:\\\\r\\\\n\\\\r\\\\n        cd nuxt-electron-example\\\\r\\\\n        yarn test\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n  For TypeScript users.\\\\r\\\\n\\\\r\\\\n  See : https:\\\\\\\/\\\\\\\/typescript.nuxtjs.org\\\\\\\/cookbook\\\\\\\/components\\\\\\\/\\\\r\\\\nDone in 8116.40s.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nビルド完了後に`yarn dev`で動作確認をしたところ問題なく実行できました。\\\\r\\\\n\\\\r\\\\n### NuxtJSのソースをsrc\\\\\\\\renderer以下に移動\\\\r\\\\n\\\\r\\\\n[この記事](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/282Haniwa\\\\\\\/items\\\\\\\/a3b0a7d3c622ad82ac8d#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E6%88%90%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B)を参考に、フォルダ構成を変更しました。\\\\r\\\\n\\\\r\\\\nNuxtJSに必要なconfigファイルは`.babelrc`、`nuxt.config.js`、`tsconfig.json`の3つで、それ以外はトップフォルダのまま移動不要でした。ただしファイル場所が変わったためpackage.jsonのscripts記述は更新が必要でした。\\\\r\\\\n\\\\r\\\\n``` json\\\\r\\\\n\\\\\\\/\\\\\\\/ package.json 抜粋\\\\r\\\\n{\\\\r\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"nuxt-electron-example\\\\\\\",\\\\r\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"1.0.0\\\\\\\",\\\\r\\\\n  \\\\\\\"private\\\\\\\": true,\\\\r\\\\n  \\\\\\\"scripts\\\\\\\": {\\\\r\\\\n    \\\\\\\"dev:renderer\\\\\\\": \\\\\\\"nuxt-ts src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n    \\\\\\\"build:renderer\\\\\\\": \\\\\\\"nuxt-ts build src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n    \\\\\\\"generate:renderer\\\\\\\": \\\\\\\"nuxt-ts generate src\\\\\\\/renderer\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  ...\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### Electronの導入\\\\r\\\\n\\\\r\\\\n必要なモジュールをyarnコマンドで追加しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add --dev electron electron-builder electron-devtools-installer\\\\r\\\\n> yarn add --dev cross-env\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n- [electron](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/electron\\\\\\\/electron#readme) = Electron本体\\\\r\\\\n- [electron-builder](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/electron-userland\\\\\\\/electron-builder#readme) = Electronのpackage & buildツール\\\\r\\\\n- [electron-devtools-installer](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/MarshallOfSound\\\\\\\/electron-devtools-installer) = Electron用のDevTool拡張機能インストーラー\\\\r\\\\n- [cross-env](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/kentcdodds\\\\\\\/cross-env#readme) = node script実行時の環境変数を設定するツール\\\\r\\\\n\\\\r\\\\n次にElectronのメイン処理を行う`index.ts`を`src\\\\\\\/main`以下に作成しました。\\\\r\\\\n\\\\r\\\\n後でわかったことなのですが、`process.env.NODE_ENV === 'development'`の場合、electron実行時に`nuxt.ready()`で非同期処理の完了を待たないと、vuexのstoreが使用できない（webpack処理が完了していないのかstoreのjsが一切見当たらない状態でした）問題がありました。また`process.env.NODE_ENV === 'development'`の場合、`nuxt.ready()`で非同期処理の完了を待ってしまうといつまでもwindowが表示されませんでした。\\\\r\\\\n\\\\r\\\\n試行錯誤した結果、以下のような実装になりました\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n\\\\\\\/\\\\\\\/ index.ts\\\\r\\\\nimport nuxtConfig from '..\\\\\\\/renderer\\\\\\\/nuxt.config'\\\\r\\\\nconst http = require('http')\\\\r\\\\nconst path = require('path')\\\\r\\\\nconst { Nuxt, Builder } = require('nuxt')\\\\r\\\\nconst electron = require('electron')\\\\r\\\\n\\\\r\\\\n\\\\\\\/\\\\\\\/ @ts-ignore\\\\r\\\\nnuxtConfig.rootDir = path.resolve('src\\\\\\\/renderer')\\\\r\\\\n\\\\\\\/\\\\\\\/ @ts-ignore\\\\r\\\\nconst isDev = nuxtConfig.dev\\\\r\\\\nlet _NUXT_URL_ = ''\\\\r\\\\n\\\\r\\\\nconst nuxt = new Nuxt(nuxtConfig)\\\\r\\\\nif (isDev) {\\\\r\\\\n  nuxt.ready().then((n: { render: any }) => {\\\\r\\\\n    const builder = new Builder(n)\\\\r\\\\n    const server = http.createServer(n.render)\\\\r\\\\n\\\\r\\\\n    builder.build().catch((err: any) => {\\\\r\\\\n      console.error(err)\\\\r\\\\n      process.exit(1)\\\\r\\\\n    })\\\\r\\\\n    server.listen()\\\\r\\\\n    _NUXT_URL_ = `http:\\\\\\\/\\\\\\\/localhost:${server.address().port}`\\\\r\\\\n    console.log(`Nuxt working on ${_NUXT_URL_}`)\\\\r\\\\n\\\\r\\\\n    createElectronApp()\\\\r\\\\n  })\\\\r\\\\n} else {\\\\r\\\\n  _NUXT_URL_ = 'file:\\\\\\\/\\\\\\\/' + path.resolve(__dirname, '..\\\\\\\/..\\\\\\\/dist\\\\\\\/nuxt-build\\\\\\\/index.html')\\\\r\\\\n  createElectronApp()\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nfunction createElectronApp() {\\\\r\\\\n  let win: any = null\\\\r\\\\n  const app = electron.app\\\\r\\\\n  const newWin = () => {\\\\r\\\\n    win = new electron.BrowserWindow({\\\\r\\\\n      width: 1400,\\\\r\\\\n      height: 1000,\\\\r\\\\n      webPreferences: {\\\\r\\\\n        nodeIntegration: false,\\\\r\\\\n        contextIsolation: false,\\\\r\\\\n        preload: path.resolve(path.join(__dirname, 'preload.js')),\\\\r\\\\n        webSecurity: false,\\\\r\\\\n      },\\\\r\\\\n    })\\\\r\\\\n\\\\r\\\\n    win.on('closed', () => (win = null))\\\\r\\\\n\\\\r\\\\n    if (isDev) {\\\\r\\\\n      const { default: installExtension, VUEJS_DEVTOOLS } = require('electron-devtools-installer')\\\\r\\\\n\\\\r\\\\n      installExtension(VUEJS_DEVTOOLS.id)\\\\r\\\\n        .then((name: any) => {\\\\r\\\\n          console.log(`Added Extension:  ${name}`)\\\\r\\\\n          win.webContents.openDevTools()\\\\r\\\\n        })\\\\r\\\\n        .catch((err: any) => console.log('An error occurred: ', err))\\\\r\\\\n\\\\r\\\\n      const pollServer = () => {\\\\r\\\\n        http\\\\r\\\\n          .get(_NUXT_URL_, (res: any) => {\\\\r\\\\n            if (res.statusCode === 200) {\\\\r\\\\n              win.loadURL(_NUXT_URL_)\\\\r\\\\n            } else {\\\\r\\\\n              console.log('restart poolServer')\\\\r\\\\n              setTimeout(pollServer, 300)\\\\r\\\\n            }\\\\r\\\\n          })\\\\r\\\\n          .on('error', pollServer)\\\\r\\\\n      }\\\\r\\\\n\\\\r\\\\n      pollServer()\\\\r\\\\n    } else {\\\\r\\\\n      return win.loadURL(_NUXT_URL_)\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n\\\\r\\\\n  app.on('ready', newWin)\\\\r\\\\n  app.on('window-all-closed', () => app.quit())\\\\r\\\\n  app.on('activate', () => win === null && newWin())\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n記述中いくつかのエラーが発生したため、`.eslintrc.js`を修正しました。\\\\r\\\\n\\\\r\\\\n1. windows環境特有の改行に関するエラー: [このissue](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/prettier\\\\\\\/eslint-plugin-prettier\\\\\\\/issues\\\\\\\/211)を参照\\\\r\\\\n1. `console`の利用不可エラー: [no-console](https:\\\\\\\/\\\\\\\/eslint.org\\\\\\\/docs\\\\\\\/rules\\\\\\\/no-console)エラーを無視するように変更\\\\r\\\\n1. 一行の長さを120文字に変更。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n\\\\\\\/\\\\\\\/ .eslintrc.js\\\\r\\\\nmodule.exports = {\\\\r\\\\n  root: true,\\\\r\\\\n  env: {\\\\r\\\\n    browser: true,\\\\r\\\\n    node: true,\\\\r\\\\n  },\\\\r\\\\n  extends: [\\\\r\\\\n    '@nuxtjs\\\\\\\/eslint-config-typescript',\\\\r\\\\n    'prettier',\\\\r\\\\n    'prettier\\\\\\\/vue',\\\\r\\\\n    'plugin:prettier\\\\\\\/recommended',\\\\r\\\\n    'plugin:nuxt\\\\\\\/recommended',\\\\r\\\\n  ],\\\\r\\\\n  plugins: ['prettier'],\\\\r\\\\n  \\\\\\\/\\\\\\\/ add your custom rules here\\\\r\\\\n-  rules: {},\\\\r\\\\n+  rules: {\\\\r\\\\n+    'no-console': 'off',\\\\r\\\\n+    'prettier\\\\\\\/prettier': ['error', { endOfLine: 'auto', printWidth: 120 }],\\\\r\\\\n+  },\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nelectronのwindow起動時に`preload.ts`を指定しているので、`index.ts`と同じフォルダに空のファイル配置しました。\\\\r\\\\n\\\\r\\\\n``` ts\\\\r\\\\n  win = new electron.BrowserWindow({\\\\r\\\\n    width: 1400,\\\\r\\\\n    height: 1000,\\\\r\\\\n    webPreferences: {\\\\r\\\\n      nodeIntegration: false,\\\\r\\\\n      contextIsolation: false,\\\\r\\\\n      preload: path.resolve(path.join(__dirname, 'preload.js')),\\\\r\\\\n      webSecurity: false,\\\\r\\\\n    },\\\\r\\\\n  })\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n`nuxt.config.js`も併せて修正が必要でした。\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\nimport colors from 'vuetify\\\\\\\/es5\\\\\\\/util\\\\\\\/colors'\\\\r\\\\n\\\\r\\\\n+ const isProduction = process.env.NODE_ENV === 'production'\\\\r\\\\n+ const isDev = process.env.NODE_ENV === 'development'\\\\r\\\\n+\\\\r\\\\nexport default {\\\\r\\\\n  \\\\\\\/\\\\\\\/ Disable server-side rendering (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/ssr-mode)\\\\r\\\\n  ssr: false,\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Target (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-target)\\\\r\\\\n  target: 'static',\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Global page headers (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-head)\\\\r\\\\n  head: {\\\\r\\\\n    titleTemplate: '%s - nuxt-electron-example',\\\\r\\\\n    title: 'nuxt-electron-example',\\\\r\\\\n    meta: [\\\\r\\\\n      { charset: 'utf-8' },\\\\r\\\\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\\\\r\\\\n      { hid: 'description', name: 'description', content: '' },\\\\r\\\\n    ],\\\\r\\\\n    link: [{ rel: 'icon', type: 'image\\\\\\\/x-icon', href: '\\\\\\\/favicon.ico' }],\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Global CSS (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-css)\\\\r\\\\n  css: [],\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Plugins to run before rendering page (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-plugins)\\\\r\\\\n  plugins: [],\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Auto import components (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-components)\\\\r\\\\n  components: true,\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Modules for dev and build (recommended) (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-modules)\\\\r\\\\n  buildModules: [\\\\r\\\\n    \\\\\\\/\\\\\\\/ https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/typescript\\\\r\\\\n    '@nuxt\\\\\\\/typescript-build',\\\\r\\\\n    \\\\\\\/\\\\\\\/ https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/stylelint\\\\r\\\\n    '@nuxtjs\\\\\\\/stylelint-module',\\\\r\\\\n    \\\\\\\/\\\\\\\/ https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/vuetify\\\\r\\\\n    '@nuxtjs\\\\\\\/vuetify',\\\\r\\\\n  ],\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Modules (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-modules)\\\\r\\\\n  modules: [],\\\\r\\\\n\\\\r\\\\n  \\\\\\\/\\\\\\\/ Vuetify module configuration (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-vuetify)\\\\r\\\\n  vuetify: {\\\\r\\\\n    customVariables: ['~\\\\\\\/assets\\\\\\\/variables.scss'],\\\\r\\\\n    theme: {\\\\r\\\\n      dark: true,\\\\r\\\\n      themes: {\\\\r\\\\n        dark: {\\\\r\\\\n          primary: colors.blue.darken2,\\\\r\\\\n          accent: colors.grey.darken3,\\\\r\\\\n          secondary: colors.amber.darken3,\\\\r\\\\n          info: colors.teal.lighten1,\\\\r\\\\n          warning: colors.amber.base,\\\\r\\\\n          error: colors.deepOrange.accent4,\\\\r\\\\n          success: colors.green.accent3,\\\\r\\\\n        },\\\\r\\\\n      },\\\\r\\\\n    },\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n+  dev: isDev,\\\\r\\\\n+  router: {\\\\r\\\\n+\\\\r\\\\n+    mode: 'hash',\\\\r\\\\n+  },\\\\r\\\\n  \\\\\\\/\\\\\\\/ Build Configuration (https:\\\\\\\/\\\\\\\/go.nuxtjs.dev\\\\\\\/config-build)\\\\r\\\\n-   build: {}\\\\r\\\\n+   build: {\\\\r\\\\n+     extend(config) {\\\\r\\\\n+       if (!isDev) {\\\\r\\\\n+         \\\\\\\/\\\\\\\/ absolute path to files on production (default value: '\\\\\\\/_nuxt\\\\\\\/')\\\\r\\\\n+         config.output.publicPath = '_nuxt\\\\\\\/'\\\\r\\\\n+       }\\\\r\\\\n+       config.node = {\\\\r\\\\n+         __dirname: !isProduction,\\\\r\\\\n+         __filename: !isProduction,\\\\r\\\\n+       }\\\\r\\\\n+     },\\\\r\\\\n+   },\\\\r\\\\n+   buildDir: '..\\\\\\\/..\\\\\\\/dist\\\\\\\/nuxt-build',\\\\r\\\\n+   generate: {\\\\r\\\\n+     dir: '..\\\\\\\/..\\\\\\\/dist\\\\\\\/nuxt-build',\\\\r\\\\n+   },\\\\r\\\\n+   telemetry: false,\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n最後に`package.json`のscriptを整理しました。スクリプトの同時実行に利用する`npm-run-all`を併せて導入しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn add --dev npm-run-all\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` diff\\\\r\\\\n{\\\\r\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"nuxt-electron-example\\\\\\\",\\\\r\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"1.0.0\\\\\\\",\\\\r\\\\n  \\\\\\\"private\\\\\\\": true,\\\\r\\\\n+  \\\\\\\"main\\\\\\\": \\\\\\\"dist\\\\\\\/main\\\\\\\/index.js\\\\\\\",\\\\r\\\\n  \\\\\\\"scripts\\\\\\\": {\\\\r\\\\n-    \\\\\\\"dev:renderer\\\\\\\": \\\\\\\"nuxt-ts src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n-    \\\\\\\"build:renderer\\\\\\\": \\\\\\\"nuxt-ts build src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n-    \\\\\\\"generate:renderer\\\\\\\": \\\\\\\"nuxt-ts generate src\\\\\\\/renderer\\\\\\\"\\\\r\\\\n+    \\\\\\\"dev:main\\\\\\\": \\\\\\\"cross-env NODE_ENV=development tsc -p src\\\\\\\/main\\\\\\\/tsconfig.json\\\\\\\",\\\\r\\\\n+    \\\\\\\"dev:renderer\\\\\\\": \\\\\\\"cross-env NODE_ENV=development nuxt-ts src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n+    \\\\\\\"dev:electron\\\\\\\": \\\\\\\"cross-env NODE_ENV=development electron .\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:main\\\\\\\": \\\\\\\"cross-env NODE_ENV=production tsc -p src\\\\\\\/main\\\\\\\/tsconfig.json\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:renderer\\\\\\\": \\\\\\\"cross-env NODE_ENV=production nuxt-ts generate src\\\\\\\/renderer\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:electron\\\\\\\": \\\\\\\"cross-env NODE_ENV=production electron-builder\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:electron:win\\\\\\\": \\\\\\\"cross-env NODE_ENV=production electron-builder --win\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:electron:mac\\\\\\\": \\\\\\\"cross-env NODE_ENV=production electron-builder --mac\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:electron:linux\\\\\\\": \\\\\\\"cross-env NODE_ENV=production electron-builder --linux\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:win\\\\\\\": \\\\\\\"npm-run-all build:main build:renderer build:electron:win\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:mac\\\\\\\": \\\\\\\"npm-run-all build:main build:renderer build:electron:mac\\\\\\\",\\\\r\\\\n+    \\\\\\\"build:linux\\\\\\\": \\\\\\\"npm-run-all build:main build:renderer build:electron:linux\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  ...\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n### 動作確認\\\\r\\\\n\\\\r\\\\nこの状態で`yarn dev:main`を実行したところ、tsconfig.jsonが見つからないエラーが発生しました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn dev:main\\\\r\\\\nyarn run v1.22.4\\\\r\\\\n$ cross-env NODE_ENV=development tsc -p src\\\\\\\/main\\\\\\\/tsconfig.json\\\\r\\\\n\\\\r\\\\nerror TS5058: The specified path does not exist: 'src\\\\\\\/main\\\\\\\/tsconfig.json'.\\\\r\\\\nerror Command failed with exit code 1.\\\\r\\\\ninfo Visit https:\\\\\\\/\\\\\\\/yarnpkg.com\\\\\\\/en\\\\\\\/docs\\\\\\\/cli\\\\\\\/run for documentation about this command.\\\\r\\\\nERROR: \\\\\\\"dev:main\\\\\\\" exited with 1.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\ntsconfig.jsonを`src\\\\\\\/main`以下に配置して再実行します。\\\\r\\\\n\\\\r\\\\n``` js\\\\r\\\\n\\\\\\\/\\\\\\\/ tsconfig.json\\\\r\\\\n{\\\\r\\\\n  \\\\\\\"compilerOptions\\\\\\\": {\\\\r\\\\n    \\\\\\\/* Visit https:\\\\\\\/\\\\\\\/aka.ms\\\\\\\/tsconfig.json to read more about this file *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Basic Options *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"incremental\\\\\\\": true,                   \\\\\\\/* Enable incremental compilation *\\\\\\\/\\\\r\\\\n    \\\\\\\"target\\\\\\\": \\\\\\\"es5\\\\\\\",                          \\\\\\\/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. *\\\\\\\/\\\\r\\\\n    \\\\\\\"module\\\\\\\": \\\\\\\"commonjs\\\\\\\",                     \\\\\\\/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"lib\\\\\\\": [],                             \\\\\\\/* Specify library files to be included in the compilation. *\\\\\\\/\\\\r\\\\n    \\\\\\\"allowJs\\\\\\\": true,                       \\\\\\\/* Allow javascript files to be compiled. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"checkJs\\\\\\\": true,                       \\\\\\\/* Report errors in .js files. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"jsx\\\\\\\": \\\\\\\"preserve\\\\\\\",                     \\\\\\\/* Specify JSX code generation: 'preserve', 'react-native', or 'react'. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"declaration\\\\\\\": true,                   \\\\\\\/* Generates corresponding '.d.ts' file. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"declarationMap\\\\\\\": true,                \\\\\\\/* Generates a sourcemap for each corresponding '.d.ts' file. *\\\\\\\/\\\\r\\\\n    \\\\\\\"sourceMap\\\\\\\": true,                     \\\\\\\/* Generates corresponding '.map' file. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"outFile\\\\\\\": \\\\\\\".\\\\\\\/\\\\\\\",                       \\\\\\\/* Concatenate and emit output to single file. *\\\\\\\/\\\\r\\\\n    \\\\\\\"outDir\\\\\\\": \\\\\\\"..\\\\\\\/..\\\\\\\/dist\\\\\\\",                        \\\\\\\/* Redirect output structure to the directory. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"rootDir\\\\\\\": \\\\\\\".\\\\\\\/\\\\\\\",                       \\\\\\\/* Specify the root directory of input files. Use to control the output directory structure with --outDir. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"composite\\\\\\\": true,                     \\\\\\\/* Enable project compilation *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"tsBuildInfoFile\\\\\\\": \\\\\\\".\\\\\\\/\\\\\\\",               \\\\\\\/* Specify file to store incremental compilation information *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"removeComments\\\\\\\": true,                \\\\\\\/* Do not emit comments to output. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noEmit\\\\\\\": true,                        \\\\\\\/* Do not emit outputs. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"importHelpers\\\\\\\": true,                 \\\\\\\/* Import emit helpers from 'tslib'. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"downlevelIteration\\\\\\\": true,            \\\\\\\/* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"isolatedModules\\\\\\\": true,               \\\\\\\/* Transpile each file as a separate module (similar to 'ts.transpileModule'). *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Strict Type-Checking Options *\\\\\\\/\\\\r\\\\n    \\\\\\\"strict\\\\\\\": true,                           \\\\\\\/* Enable all strict type-checking options. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noImplicitAny\\\\\\\": true,                 \\\\\\\/* Raise error on expressions and declarations with an implied 'any' type. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"strictNullChecks\\\\\\\": true,              \\\\\\\/* Enable strict null checks. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"strictFunctionTypes\\\\\\\": true,           \\\\\\\/* Enable strict checking of function types. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"strictBindCallApply\\\\\\\": true,           \\\\\\\/* Enable strict 'bind', 'call', and 'apply' methods on functions. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"strictPropertyInitialization\\\\\\\": true,  \\\\\\\/* Enable strict checking of property initialization in classes. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noImplicitThis\\\\\\\": true,                \\\\\\\/* Raise error on 'this' expressions with an implied 'any' type. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"alwaysStrict\\\\\\\": true,                  \\\\\\\/* Parse in strict mode and emit \\\\\\\"use strict\\\\\\\" for each source file. *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Additional Checks *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noUnusedLocals\\\\\\\": true,                \\\\\\\/* Report errors on unused locals. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noUnusedParameters\\\\\\\": true,            \\\\\\\/* Report errors on unused parameters. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noImplicitReturns\\\\\\\": true,             \\\\\\\/* Report error when not all code paths in function return a value. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"noFallthroughCasesInSwitch\\\\\\\": true,    \\\\\\\/* Report errors for fallthrough cases in switch statement. *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Module Resolution Options *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"moduleResolution\\\\\\\": \\\\\\\"node\\\\\\\",            \\\\\\\/* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). *\\\\\\\/\\\\r\\\\n    \\\\\\\"baseUrl\\\\\\\": \\\\\\\".\\\\\\\",\\\\r\\\\n    \\\\\\\"paths\\\\\\\": {\\\\r\\\\n      \\\\\\\"~\\\\\\\/*\\\\\\\": [\\\\r\\\\n        \\\\\\\".\\\\\\\/*\\\\\\\"\\\\r\\\\n      ],\\\\r\\\\n      \\\\\\\"@\\\\\\\/*\\\\\\\": [\\\\r\\\\n        \\\\\\\".\\\\\\\/*\\\\\\\"\\\\r\\\\n      ]\\\\r\\\\n    },\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"rootDirs\\\\\\\": [],                        \\\\\\\/* List of root folders whose combined content represents the structure of the project at runtime. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"typeRoots\\\\\\\": [],                       \\\\\\\/* List of folders to include type definitions from. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"types\\\\\\\": [],                           \\\\\\\/* Type declaration files to be included in compilation. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"allowSyntheticDefaultImports\\\\\\\": true,  \\\\\\\/* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. *\\\\\\\/\\\\r\\\\n    \\\\\\\"esModuleInterop\\\\\\\": true,                  \\\\\\\/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"preserveSymlinks\\\\\\\": true,              \\\\\\\/* Do not resolve the real path of symlinks. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"allowUmdGlobalAccess\\\\\\\": true,          \\\\\\\/* Allow accessing UMD globals from modules. *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Source Map Options *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"sourceRoot\\\\\\\": \\\\\\\"\\\\\\\",                      \\\\\\\/* Specify the location where debugger should locate TypeScript files instead of source locations. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"mapRoot\\\\\\\": \\\\\\\"\\\\\\\",                         \\\\\\\/* Specify the location where debugger should locate map files instead of generated locations. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"inlineSourceMap\\\\\\\": true,               \\\\\\\/* Emit a single file with source maps instead of having a separate file. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"inlineSources\\\\\\\": true,                 \\\\\\\/* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Experimental Options *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"experimentalDecorators\\\\\\\": true,        \\\\\\\/* Enables experimental support for ES7 decorators. *\\\\\\\/\\\\r\\\\n    \\\\\\\/\\\\\\\/ \\\\\\\"emitDecoratorMetadata\\\\\\\": true,         \\\\\\\/* Enables experimental support for emitting type metadata for decorators. *\\\\\\\/\\\\r\\\\n\\\\r\\\\n    \\\\\\\/* Advanced Options *\\\\\\\/\\\\r\\\\n    \\\\\\\"skipLibCheck\\\\\\\": true,                     \\\\\\\/* Skip type checking of declaration files. *\\\\\\\/\\\\r\\\\n    \\\\\\\"forceConsistentCasingInFileNames\\\\\\\": true  \\\\\\\/* Disallow inconsistently-cased references to the same file. *\\\\\\\/\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"includes\\\\\\\": [\\\\r\\\\n    \\\\\\\".\\\\\\\/*.(js|ts)\\\\\\\"\\\\r\\\\n  ]\\\\r\\\\n}\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nこれで、`yarn dev:main`が正常終了し、`yarn dev:electron`で、electron appをデバッグ実行できるようになりました。\\\\r\\\\n\\\\r\\\\n最後に`electron-builder.yml`をproject直下に配置し`build:win`を実行します。\\\\r\\\\n\\\\r\\\\n``` yml\\\\r\\\\n<!-- electron-builder.yml -->\\\\r\\\\nappId: com.nuxt-electron-example.app\\\\r\\\\nproductName: nuxt-electron-example\\\\r\\\\nasar: true\\\\r\\\\n\\\\r\\\\ndirectories:\\\\r\\\\n  output: build\\\\\\\/\\\\r\\\\n\\\\r\\\\nfiles:\\\\r\\\\n  - package.json\\\\r\\\\n  - dist\\\\\\\/main\\\\\\\/\\\\r\\\\n  - dist\\\\\\\/renderer\\\\\\\/\\\\r\\\\n  - dist\\\\\\\/nuxt-build\\\\\\\/\\\\r\\\\n\\\\r\\\\ndmg:\\\\r\\\\n  contents:\\\\r\\\\n    - type: link\\\\r\\\\n      path: \\\\\\\/Applications\\\\r\\\\n      x: 410\\\\r\\\\n      y: 150\\\\r\\\\n    - type: file\\\\r\\\\n      x: 130\\\\r\\\\n      y: 150\\\\r\\\\n\\\\r\\\\nmac:\\\\r\\\\n  target: dmg\\\\r\\\\n  category: public.app-category.developer-tools\\\\r\\\\n\\\\r\\\\nwin:\\\\r\\\\n  target: portable\\\\r\\\\n\\\\r\\\\nlinux:\\\\r\\\\n  target:\\\\r\\\\n    - deb\\\\r\\\\n    - AppImage\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\n> yarn build:win\\\\r\\\\nyarn run v1.22.4\\\\r\\\\n$ npm-run-all build:main build:renderer build:electron:win\\\\r\\\\n$ cross-env NODE_ENV=production tsc -p src\\\\\\\/main\\\\\\\/tsconfig.json\\\\r\\\\n$ cross-env NODE_ENV=production nuxt-ts generate src\\\\\\\/renderer\\\\r\\\\ni Doing webpack rebuild because pages\\\\\\\\index.vue modified\\\\r\\\\ni Production build\\\\r\\\\ni Bundling only for client side\\\\r\\\\ni Target: static\\\\r\\\\n√ Builder initialized\\\\r\\\\n√ Nuxt files generated\\\\r\\\\n√ Client\\\\r\\\\n  Compiled successfully in 44.10s\\\\r\\\\n\\\\r\\\\nHash: 93e7999117d5727b31d3\\\\r\\\\nVersion: webpack 4.44.2\\\\r\\\\nTime: 44106ms\\\\r\\\\nBuilt at: 2021-01-11 23:30:39\\\\r\\\\n                         Asset       Size  Chunks                                Chunk Names\\\\r\\\\n..\\\\\\\/server\\\\\\\/client.manifest.json   14.7 KiB          [emitted]\\\\r\\\\n                    1643269.js   24.7 KiB       6  [emitted] [immutable]         vendors\\\\\\\/pages\\\\\\\/index\\\\r\\\\n                    380d0fb.js   3.83 KiB       0  [emitted] [immutable]         app\\\\r\\\\n                    45a7178.js    521 KiB       5  [emitted] [immutable]  [big]  vendors\\\\\\\/app\\\\r\\\\n                    95ff23c.js   2.32 KiB       4  [emitted] [immutable]         runtime\\\\r\\\\n                      LICENSES  389 bytes          [emitted]\\\\r\\\\n                    bbcb20a.js    199 KiB       1  [emitted] [immutable]         commons\\\\\\\/app\\\\r\\\\n                    eaca075.js    5.4 KiB       2  [emitted] [immutable]         pages\\\\\\\/index\\\\r\\\\n                    fb55579.js   8.67 KiB       3  [emitted] [immutable]         pages\\\\\\\/inspire\\\\r\\\\n + 1 hidden asset\\\\r\\\\nEntrypoint app = 95ff23c.js bbcb20a.js 45a7178.js 380d0fb.js\\\\r\\\\n\\\\r\\\\nWARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).\\\\r\\\\nThis can impact web performance.\\\\r\\\\nAssets:\\\\r\\\\n  45a7178.js (521 KiB)\\\\r\\\\ni Generating output directory: nuxt-build\\\\\\\/\\\\r\\\\ni Generating pages\\\\r\\\\n√ Generated route \\\\\\\"\\\\\\\/\\\\\\\"\\\\r\\\\n√ Client-side fallback created: 200.html\\\\r\\\\n$ cross-env NODE_ENV=production electron-builder --win\\\\r\\\\n  • electron-builder  version=22.9.1 os=10.0.19041\\\\r\\\\n  • loaded configuration  file=C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\nuxt-electron-example\\\\\\\\electron-builder.yml\\\\r\\\\n  • description is missed in the package.json  appPackageFile=C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\nuxt-electron-example\\\\\\\\package.json\\\\r\\\\n  • author is missed in the package.json  appPackageFile=C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\nuxt-electron-example\\\\\\\\package.json\\\\r\\\\n  • writing effective config  file=build\\\\\\\\builder-effective-config.yaml\\\\r\\\\n  • packaging       platform=win32 arch=x64 electron=11.1.1 appOutDir=build\\\\\\\\win-unpacked\\\\r\\\\n  • default Electron icon is used  reason=application icon is not set\\\\r\\\\n  • building        target=portable file=build\\\\\\\\nuxt-electron-example 1.0.0.exe archs=x64\\\\r\\\\nDone in 337.16s.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n約5分でbuildが完了しました。distフォルダに`build:main`、`build:renderer`で生成されたビルドモジュールが配置され、それらを使って`build:electron`が各環境用の実行ファイルを生成する、という流れのようです。\\\\r\\\\n\\\\r\\\\n今回はwindowsのビルド設定を`target: portable`にしているので、単独実行可能な`nuxt-electron-example 1.0.0.exe`(約60MB)が生成されました。\\\\r\\\\n\\\\r\\\\n``` powershell\\\\r\\\\nMode                 LastWriteTime         Length Name\\\\r\\\\n----                 -------------         ------ ----\\\\r\\\\nd-----        2021\\\\\\\/01\\\\\\\/11     23:32                win-unpacked\\\\r\\\\n-a----        2021\\\\\\\/01\\\\\\\/11     23:30            534 builder-effective-config.yaml\\\\r\\\\n-a----        2021\\\\\\\/01\\\\\\\/11     23:34       61868355 nuxt-electron-example 1.0.0.exe\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\nこれで完璧！と思ったのですが、実行時に`nuxt.config.js`の`import colors from 'vuetify\\\\\\\/es5\\\\\\\/util\\\\\\\/colors'`を解決できないエラーが発生してしまいました。詳細を調査できていないのですが、`yarn add vuetify`でdependeciesにvuetifyを追加することで解決するところまで確認できました。\\\\r\\\\n\\\\r\\\\n## 残課題\\\\r\\\\n\\\\r\\\\n- renderer\\\\\\\/static フォルダに配置している画像等のリソースがelectronで利用できなくなっていました。electron用の設定が必要そうなので引き続き調査が必要です。\\\\r\\\\n\\\\r\\\\n## 関連項目\\\\r\\\\n\\\\r\\\\n- [Electron + Nuxt.js + TypeScriptの環境構築 - Qiita](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/282Haniwa\\\\\\\/items\\\\\\\/a3b0a7d3c622ad82ac8d)\\\\r\\\\n- [Electronでデスクトップアプリを作ろうとしたメモ](https:\\\\\\\/\\\\\\\/tenderfeel.xsrv.jp\\\\\\\/javascript\\\\\\\/4471\\\\\\\/)\\\\r\\\\n- [Nuxt.js+Electronを試してみるv2 - Qiita](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/tamfoi\\\\\\\/items\\\\\\\/aa5b795d4559fa06f0e3)\\\\r\\\\n- [electron-nuxtを使ってデスクトップアプリケーションを作ってみる - Qiita](https:\\\\\\\/\\\\\\\/qiita.com\\\\\\\/yakiniku0220\\\\\\\/items\\\\\\\/c78ee5c61bd245e80d7a)\\\"}\"}","{\"docRef\":\"angular\\\/angular-setup-ghpages\",\"content\":\"{\\\"title\\\":\\\"angular-cli-ghpagesを利用する\\\",\\\"date\\\":\\\"2019-11-14\\\",\\\"category\\\":\\\"Angular\\\",\\\"tag\\\":[\\\"deploy\\\",\\\"github pages\\\"],\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\nAngular 7でangular-cli-ghpagesライブラリを利用して、github pagesを簡単に更新できるようなので、その設定方法などを調べました。\\\\r\\\\n\\\\r\\\\n## 実施した手順\\\\r\\\\n\\\\r\\\\nまず初めに[angular-cli-ghpagesのgithubリポジトリ](https:\\\\\\\/\\\\\\\/github.com\\\\\\\/angular-schule\\\\\\\/angular-cli-ghpages)を確認しました。\\\\r\\\\n\\\\r\\\\nPrerequisitesに`Angular project created via Angular CLI v8.3.0-next.0 or greate`と書かれているのを発見。うまくいかないかもしれないが、とりあえずAngular CLI v7系のまま設定を実施しました。\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nPS C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp> ng add angular-cli-ghpages\\\\r\\\\nInstalling packages for tooling via npm.\\\\r\\\\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules\\\\\\\\fsevents):\\\\r\\\\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\\\\\\\"os\\\\\\\":\\\\\\\"darwin\\\\\\\",\\\\\\\"arch\\\\\\\":\\\\\\\"any\\\\\\\"} (current: {\\\\\\\"os\\\\\\\":\\\\\\\"win32\\\\\\\",\\\\\\\"arch\\\\\\\":\\\\\\\"x64\\\\\\\"})\\\\r\\\\n+ angular-cli-ghpages@0.5.3\\\\r\\\\nadded 18 packages from 17 contributors and audited 42977 packages in 21.148s\\\\r\\\\nfound 607 vulnerabilities (3 moderate, 604 high)\\\\r\\\\n  run `npm audit fix` to fix them, or `npm audit` for details\\\\r\\\\nInstalled packages for tooling via npm.\\\\r\\\\nThe package that you are trying to add does not support schematics. You can try using a different version of the package or contact the package author to add ng-add support.\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n警告などが出ている（auditは今後の課題）が、今回は無視して進めます。\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nPS C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp> ng build --prod --base-href \\\\\\\"https:\\\\\\\/\\\\\\\/takumura.github.io\\\\\\\/tech-log\\\\\\\/\\\\\\\"\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\ndry-runによる予行でどのように動くか実験。\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nPS C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp> npx angular-cli-ghpages --dry-run\\\\r\\\\n*** Dry-run: No changes are applied at all.\\\\r\\\\n*** Dry-run \\\\\\\/ SKIPPED: cleaning of the cache directory\\\\r\\\\n*** Dry-run \\\\\\\/ SKIPPED: copying of index.html to 404.html\\\\r\\\\n*** Dry-run \\\\\\\/ SKIPPED: publishing to \\\\\\\"C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp\\\\\\\\dist\\\\\\\" with the following options: { dir: 'C:\\\\\\\\\\\\\\\\Repos\\\\\\\\\\\\\\\\github\\\\\\\\\\\\\\\\tech-log\\\\\\\\\\\\\\\\Website\\\\\\\\\\\\\\\\ClientApp\\\\\\\\\\\\\\\\dist',\\\\r\\\\n  repo:\\\\r\\\\n   'undefined: current working directory (which must be a git repo in this case) will be used to commit & push',\\\\r\\\\n  message: 'Auto-generated commit',\\\\r\\\\n  branch: 'gh-pages',\\\\r\\\\n  user:\\\\r\\\\n   'undefined: local or gloabl git username & email properties will be taken',\\\\r\\\\n  noSilent: 'undefined: logging is in silent mode by default',\\\\r\\\\n  noDotfiles: 'undefined: dotfiles are included by default',\\\\r\\\\n  dryRun: true,\\\\r\\\\n  cname: 'undefined: no CNAME file will be created' }\\\\r\\\\n*** Successfully published!\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n問題なさそうなので本実行。\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nPS C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp> npx angular-cli-ghpages\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n初回は`Permission denied (publickey)`エラーが発生してpushに失敗。[Git: githubへのssh接続をSourceTreeからwindows 10標準のssh clientに切り替える](doc\\\\\\\/env\\\\\\\/git-ssh-configuration)<!--rehype:class=internal-link-->の対応を実施してから再チャレンジ。\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nPS C:\\\\\\\\Repos\\\\\\\\github\\\\\\\\tech-log\\\\\\\\Website\\\\\\\\ClientApp> npx angular-cli-ghpages\\\\r\\\\n*** Successfully published!\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n無事成功。<https:\\\\\\\/\\\\\\\/takumura.github.io\\\\\\\/tech-log\\\\\\\/> にアクセスすると、見事にサイトが表示されていました。fetchでのjsonデータ取得や、ページ遷移なども問題なく動作しています。素晴らしい！\\\\r\\\\n\\\\r\\\\n## パブリッシュスクリプトの作成\\\\r\\\\n\\\\r\\\\nprodオプション付きのビルドを実行し、生成されたdistフォルダ以下をorigin\\\\\\\/gh-pagesにpushするスクリプトを作成しました。\\\\r\\\\n\\\\r\\\\n**publish-to-ghpages.ps1**\\\\r\\\\n\\\\r\\\\n```bash\\\\r\\\\nng build --prod --base-href \\\\\\\"https:\\\\\\\/\\\\\\\/takumura.github.io\\\\\\\/tech-log\\\\\\\/\\\\\\\"\\\\r\\\\nnpx angular-cli-ghpages\\\\r\\\\n```\\\\r\\\\n\\\\r\\\\n## 作業時に参照した情報\\\\r\\\\n\\\\r\\\\n- [Deploying an Angular App to Github Pages](https:\\\\\\\/\\\\\\\/alligator.io\\\\\\\/angular\\\\\\\/deploying-angular-app-github-pages\\\\\\\/)\\\\r\\\\n- [Angular-CLIで作成したアプリをGithub Pagesにデプロイする](https:\\\\\\\/\\\\\\\/prokatsu.com\\\\\\\/angular-cli_github-pages_deploy\\\\\\\/)\\\\r\\\\n- [AngularのプロジェクトをGithub Pagesに公開する](https:\\\\\\\/\\\\\\\/choco14t.hatenablog.com\\\\\\\/entry\\\\\\\/2018\\\\\\\/07\\\\\\\/07\\\\\\\/144504)\\\\r\\\\n\\\"}\"}","{\"docRef\":\"welcome\",\"content\":\"{\\\"title\\\":\\\"Welcome\\\",\\\"date\\\":\\\"2022-09-22\\\",\\\"category\\\":\\\"none\\\",\\\"toc\\\":\\\"none\\\",\\\"body\\\":\\\"\\\\r\\\\n\\\\r\\\\n# About this site\\\\r\\\\n\\\\r\\\\nこのサイトは、私が学習したソフトウェア開発に関する知識をまとめ、後で振り返って思い出す事を目的に作成されました。\\\\r\\\\n\\\\r\\\\nAngularと.NET Coreに興味があります。あまり気負わず、暇な時間に、好奇心とモチベーションの続く限りまとめていきます。\\\\r\\\\n\\\\r\\\\n目指せ、生涯現役ソフトウェアエンジニア！\\\\r\\\\n\\\\r\\\\n## About me\\\\r\\\\n\\\\r\\\\n  <div class=\\\\\\\"about-me\\\\\\\">\\\\r\\\\n    <p>@takumura<\\\\\\\/p>\\\\r\\\\n    <img class=\\\\\\\"avatar\\\\\\\" src=\\\\\\\"assets\\\\\\\/images\\\\\\\/profile_20140615.jpg\\\\\\\" \\\\\\\/>\\\\r\\\\n    <p>software engineer<\\\\\\\/p>\\\\r\\\\n  <\\\\\\\/div>\\\\r\\\\n\\\\r\\\\n## Skill Set\\\\r\\\\n\\\\r\\\\n### Currently using\\\\r\\\\n\\\\r\\\\nC# \\\\\\\/ .NET Core \\\\\\\/ ASP.NET WebForms \\\\\\\/ ASP.NET MVC \\\\\\\/ ASP.NET Core \\\\\\\/ Javascript \\\\\\\/ JQuery \\\\\\\/ Typescript \\\\\\\/ Angular \\\\\\\/ Windows Server \\\\\\\/ IIS \\\\\\\/ Microsoft SQL Server \\\\\\\/ 英語(TOEIC 825点)\\\\r\\\\n\\\\r\\\\n### Experienced before\\\\r\\\\n\\\\r\\\\nJava 1.2 - 1.4 \\\\\\\/ SAP BW 3.1C \\\\\\\/ Debian Linux \\\\\\\/ VMWare ESXi 4.1 - 5.5\\\\r\\\\n\\\\r\\\\n## 免責事項\\\\r\\\\n\\\\r\\\\n### 当サイトの情報の正確性について\\\\r\\\\n\\\\r\\\\n当サイトのコンテンツや情報において、可能な限り正確な情報を掲載するよう努めています。\\\\r\\\\n\\\\r\\\\nしかし、誤情報が入り込んだり、情報が古くなったりすることもあります。\\\\r\\\\n\\\\r\\\\n必ずしも正確性を保証するものではありません。また合法性や安全性なども保証しません。\\\\r\\\\n\\\\r\\\\n### 損害等の責任について\\\\r\\\\n\\\\r\\\\n当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますので、ご了承ください。\\\\r\\\\n\\\\r\\\\n<small>&copy; Copyright 2022 takumura<\\\\\\\/small>\\\\r\\\\n\\\"}\"}"]