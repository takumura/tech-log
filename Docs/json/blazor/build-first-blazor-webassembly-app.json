{"title":"Blazor WebAssemblyアプリを作成する","date":"2020-05-05","category":"Blazor","tag":["blazor","webassembly"],"body":"NET5でproduction readyになる予定のBlazor WebAssemblyの情報収集と、空のアプリ作成を作成してみる。\r\n\r\n## 情報収集\r\n\r\nMS Docsにある[チュートリアル - 最初の Blazor アプリをビルドする](https:\/\/docs.microsoft.com\/ja-jp\/aspnet\/core\/tutorials\/build-your-first-blazor-app?view=aspnetcore-3.1)を試してみる事にします。\r\n\r\n注意書きには\".NET Core 3.1ではプレビュー段階である\"と書いてあるので、NET5になったら手順等改めて振り返る必要がありそうです。\r\n\r\n```plaintext\r\nプレビュー段階の Blazor WebAssembly\r\n\" Blazor サーバー\" は ASP.NET Core 3.0 でサポートされています。 \" Blazor WebAssembly\" は、ASP.NET Core 3.1 のプレビュー段階です。\r\n```\r\n\r\nまた[ASP.NET Core Blazor の概要](https:\/\/docs.microsoft.com\/ja-jp\/aspnet\/core\/blazor\/get-started?view=aspnetcore-3.1&tabs=visual-studio)には、\r\n\r\n```plaintext\r\nBlazor WebAssembly エクスペリエンス (Visual Studio 16.6 Preview 2 以降) については、 [Blazor WebAssembly アプリ] テンプレートを選択します。\r\n````\r\n\r\nと記載されているので、Visual Studioで開発を行う場合は16.6以降が必要なようです。\r\n\r\n今日(2020-05-05)時点の最新は16.5.4だったので、Visual Studio 2019 Previewをインストールして開発に使用します。\r\n\r\nまた、以下のコマンドを実行して、テンプレートをインストールします。実行前にプロジェクトを作成してもBlazorサーバテンプレートしか表示されず、Blazor WebAssemblyプロジェクトを開始できませんでした。\r\n\r\n``` powershell\r\n> dotnet new -i Microsoft.AspNetCore.Components.WebAssembly.Templates::3.2.0-preview5.20216.8\r\n```\r\n\r\n実行後の利用可能なテンプレートは以下の通り。\r\n\r\n```plaintext\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common\/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common\/Library\r\nWPF Application                                   wpf                      [C#]              Common\/WPF\r\nWPF Class library                                 wpflib                   [C#]              Common\/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#]              Common\/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#]              Common\/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#]              Common\/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#]              Common\/WinForms\r\nWorker Service                                    worker                   [C#]              Common\/Worker\/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test\/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test\/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test\/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test\/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web\/ASP.NET\r\nRazor Page                                        page                     [C#]              Web\/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web\/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web\/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web\/Blazor\r\nBlazor WebAssembly App                            blazorwasm               [C#]              Web\/Blazor\/WebAssembly\r\nASP.NET Core Empty                                web                      [C#], F#          Web\/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web\/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web\/MVC\/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web\/MVC\/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web\/MVC\/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web\/MVC\/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web\/Razor\/Library\/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web\/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web\/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web\/gRPC\r\n```\r\n\r\n`Blazor WebAssembly App`テンプレートを選択すると、`ASP.NET Core hosted`と`Progressive Web Application`のチェックボックスが表示されました。\r\n\r\n`ASP.NET Core hosted`については[ASP.NET Core Blazor のホスティング モデル](https:\/\/docs.microsoft.com\/ja-jp\/aspnet\/core\/blazor\/hosting-models?view=aspnetcore-3.1)に詳細が書かれており、チェックするとBlazorサーバと同様にサーバ側で処理が行われるようになるので、チェックしないことにしました。\r\n\r\n`Progressive Web Application`については[ASP.NET Core Blazor WebAssembly を使用してプログレッシブ Web アプリケーションをビルドする](https:\/\/docs.microsoft.com\/ja-jp\/aspnet\/core\/blazor\/progressive-web-app?view=aspnetcore-3.1&tabs=visual-studio)に記載があり、チェックすることで何も損しなさそうなので、チェックをしてプロジェクトを作成しました。\r\n\r\nプロジェクト作成後、`F5`キーで実行すると、問題なくBlazor WebAssemblyアプリが起動しました。Chrome DevToolsでネットワークリソースを確認したところ、6.5MBと噂通り巨大なアプリサイズです（これでも少なくなったらしいですが）。\r\n\r\n``` powershell\r\n68 requests, 6.5MB transferred, 18.0MB resources, Finish: 3.51s, DOMContentLoaded: 282ms, Load:291ms\r\n```\r\n\r\n2度目のページ取得ではだいぶ軽くなります。\r\n\r\n``` powershell\r\n11 requests, 171kB transferred 508kB resources, Finish:1.63s, DOMContentLoaded: 359ms, Load:361ms\r\n```\r\n\r\nその後、todoページの作成まで一通り写経して、Blazorの基礎の基礎を理解しました。スタイルを一切変えていないので、見た目は少しヘンテコリンです。\r\n\r\nデフォルトテンプレートはbootstrap4のcssで装飾されています。公式のFluent Design実装はまだなく、[open issue](https:\/\/github.com\/dotnet\/aspnetcore\/issues\/11229)で議論されているようです。\r\n\r\n## 関連項目\r\n\r\n- [Awesome Blazor](https:\/\/awesomeopensource.com\/project\/AdrienTorris\/awesome-blazor)"}